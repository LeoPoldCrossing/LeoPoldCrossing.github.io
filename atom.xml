<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-29T10:41:58.903Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter 开发环境搭建</title>
    <link href="http://yoursite.com/2019/09/29/Flutter-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/09/29/Flutter-开发环境搭建/</id>
    <published>2019-09-29T02:47:53.000Z</published>
    <updated>2019-09-29T10:41:58.903Z</updated>
    
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>前言：因为笔者使用的是MAC，所以我这里只介绍MAC系统的开发环境搭建，Windows及Linux系统请移步 <a href="https://flutter.dev/docs/get-started/install" target="_blank" rel="external">Flutter 开发环境搭建</a></p>
</blockquote>
<hr>
<a id="more"></a>
<p>基于 Flutter 1.9.1 版本（<a href="https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_v1.9.1+hotfix.2-stable.zip" target="_blank" rel="external">下载</a>） </p>
<h1 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h1><ol>
<li>操作系统： macOS（64-bit）</li>
<li>剩余磁盘空间： 2.8GB</li>
<li>命令行工具： </li>
</ol>
<ul>
<li>bash</li>
<li>curl</li>
<li>git 2.x</li>
<li>mkdir</li>
<li>rm</li>
<li>unzip</li>
<li>which</li>
</ul>
<h1 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h1><h2 id="获取Flutter-SDK"><a href="#获取Flutter-SDK" class="headerlink" title="获取Flutter SDK"></a>获取Flutter SDK</h2><ul>
<li><a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos" target="_blank" rel="external">Mac Flutter下载</a></li>
<li>解压文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/development</div><div class="line">unzip ~/Downloads/flutter_macos_v1.9.1+hotfix.2-stable.zip</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="环境变量配置-1"><a href="#环境变量配置-1" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><ul>
<li>设置环境变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export PATH=&quot;$PATH:`pwd`/flutter/bin&quot;  // 仅配置当前终端变量</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># PATH_TO_FLUTTER_GIT_DIRECTORY  为Flutter SDK 存储目录</div><div class="line">$ export PATH=&quot;$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin&quot;</div></pre></td></tr></table></figure>
<ul>
<li><p>刷新环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source $HOME/.bash_profile</div></pre></td></tr></table></figure>
</li>
<li><p>验证环境变量配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo $PATH</div><div class="line">$ which flutter</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="诊断开发环境-Flutter-Doctor"><a href="#诊断开发环境-Flutter-Doctor" class="headerlink" title="诊断开发环境 Flutter Doctor"></a>诊断开发环境 Flutter Doctor</h3><p>这时候它会将你未安装的依赖一一列出，每个电脑缺少的依赖都不尽相同，例如下面这样，然后按照错误提示逐条修复<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">wangyonggangdeMacBook-Pro:~ LeoPoldCrossing$ flutter doctor</div><div class="line">Doctor summary (to see all details, run flutter doctor -v):</div><div class="line">[✓] Flutter (Channel beta, v1.9.1+hotfix.2, on Mac OS X 10.14 18A391, locale</div><div class="line">    zh-Hans-CN)</div><div class="line">[!] Android toolchain - develop for Android devices (Android SDK version 28.0.3)</div><div class="line">    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor</div><div class="line">      --android-licenses</div><div class="line">[!] Xcode - develop for iOS and macOS (Xcode 10.1)</div><div class="line">    ✗ CocoaPods installed but not initialized.</div><div class="line">        CocoaPods is used to retrieve the iOS and macOS platform side&apos;s plugin</div><div class="line">        code that responds to your plugin usage on the Dart side.</div><div class="line">        Without CocoaPods, plugins will not work on iOS or macOS.</div><div class="line">        For more info, see https://flutter.dev/platform-plugins</div><div class="line">      To initialize CocoaPods, run:</div><div class="line">        pod setup</div><div class="line">      once to finalize CocoaPods&apos; installation.</div><div class="line">[✓] Android Studio (version 3.4)</div><div class="line">[!] IntelliJ IDEA Ultimate Edition (version 2018.1.4)</div><div class="line">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</div><div class="line">    ✗ Dart plugin not installed; this adds Dart specific functionality.</div><div class="line">[!] IntelliJ IDEA Ultimate Edition (version 2016.3.1)</div><div class="line">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</div><div class="line">    ✗ Dart plugin not installed; this adds Dart specific functionality.</div><div class="line">    ✗ This install is older than the minimum recommended version of 2017.1.0.</div><div class="line">[✓] VS Code (version 1.38.1)</div><div class="line">[✓] Connected device (1 available)</div></pre></td></tr></table></figure></p>
<h2 id="国内镜像"><a href="#国内镜像" class="headerlink" title="国内镜像"></a>国内镜像</h2><p>由于一些flutter命令需要联网获取数据，如果您是在国内访问，由于众所周知的原因，直接访问很可能不会成功。 下面的PUB_HOSTED_URL和FLUTTER_STORAGE_BASE_URL是google为国内开发者搭建的临时镜像。详情请参考 Using Flutter in China<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ export PUB_HOSTED_URL=https://pub.flutter-io.cn（https://mirrors.sjtug.sjtu.edu.cn/）</div><div class="line">$ export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</div><div class="line"></div><div class="line">or </div><div class="line"></div><div class="line">$ export PUB_HOSTED_URL= https://dart-pub.mirrors.sjtug.sjtu.edu.cn/</div><div class="line">$ export FLUTTER_STORAGE_BASE_URL=https://mirrors.sjtug.sjtu.edu.cn/</div><div class="line"></div><div class="line">$ export PATH=&quot;$PWD/flutter/bin:$PATH&quot;</div><div class="line">$ cd ./flutter</div><div class="line">$ flutter doctor</div></pre></td></tr></table></figure></p>
<h1 id="平台配置"><a href="#平台配置" class="headerlink" title="平台配置"></a>平台配置</h1><h2 id="IOS设置"><a href="#IOS设置" class="headerlink" title="IOS设置"></a>IOS设置</h2><h3 id="1-Xcode安装"><a href="#1-Xcode安装" class="headerlink" title="1. Xcode安装"></a>1. Xcode安装</h3><ul>
<li><a href="https://developer.apple.com/xcode/" target="_blank" rel="external">Xcode</a> 或通过 AppStore 安装最新版XCode</li>
<li><p>配置XCode命令使用最新安装的Xcode版本（如果使用其他版本，请替换路径）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</div></pre></td></tr></table></figure>
</li>
<li><p>同意XCode条款，可通过以下命令操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sodo xcodebuild -license</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-IOS-模拟器设置"><a href="#2-IOS-模拟器设置" class="headerlink" title="2. IOS 模拟器设置"></a>2. IOS 模拟器设置</h3><ul>
<li><p>打开模拟器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ open -a Simulator</div></pre></td></tr></table></figure>
</li>
<li><p>设备选择（64位，至少Iphone5s） Hardware - Device</p>
</li>
<li><p>运行Flutter APP </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ flutter create my_app</div><div class="line"></div><div class="line">$ cd my_app</div><div class="line"></div><div class="line">$ flutter run</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-真机运行"><a href="#3-真机运行" class="headerlink" title="3. 真机运行"></a>3. 真机运行</h3><ul>
<li><p>安装并设置CocoaPods</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo gem install cocoapods</div><div class="line">$ pod setup</div></pre></td></tr></table></figure>
</li>
<li><p>添加账号及信任设备 </p>
<ul>
<li>在Flutter项目根目录下运行 open ios/Runner.xcworkspace</li>
<li>选择要运行项目的的设备</li>
<li>左侧面板选择Runner工程</li>
<li><p>选择Team </p>
<ol>
<li>Xcode 9 &amp; 10, General &gt; Signing &gt; Team.</li>
<li>Xcode 11,  Signing &amp; Capabilities &gt; Team</li>
</ol>
</li>
<li><p>第一次运行IOS项目需要账号<br><img src="https://flutter.dev/images/setup/xcode-account.png" alt="此处输入图片的描述"></p>
</li>
<li>信任开发者<br>通用 - 设备管理</li>
</ul>
</li>
<li><p>Flutter Run 跑起来</p>
</li>
</ul>
<h2 id="Android-配置"><a href="#Android-配置" class="headerlink" title="Android 配置"></a>Android 配置</h2><h3 id="1-安装AndroidStudio下载地址"><a href="#1-安装AndroidStudio下载地址" class="headerlink" title="1. 安装AndroidStudio下载地址"></a>1. 安装AndroidStudio<a href="https://developer.android.com/studio" target="_blank" rel="external">下载地址</a></h3><h3 id="2-Android真机设备"><a href="#2-Android真机设备" class="headerlink" title="2. Android真机设备"></a>2. Android真机设备</h3><ul>
<li>系统版本要求<br>Android 4.1以上</li>
<li>设置<ul>
<li>打开开发调试模式</li>
<li>运行flutter devices检测是否识别</li>
</ul>
</li>
<li>Android模拟器<br>AndroidStudio - Tools - Android - AVD Manager - Create Virtual Device 选择一个模拟器创建<h2 id="编辑器配置"><a href="#编辑器配置" class="headerlink" title="编辑器配置"></a>编辑器配置</h2><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3></li>
<li>安装Android Studio <a href="https://developer.android.com/studio" target="_blank" rel="external">下载地址</a> </li>
<li>安装Flutter插件<br>Perferences - Plugin - 搜索Flutter - 安装</li>
<li>安装Dart插件<br>Perferences - Plugin - 搜索Dart - 安装<h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3></li>
<li>安装VS Code <a href="https://code.visualstudio.com" target="_blank" rel="external">下载地址</a> </li>
<li>安装Flutter插件<br>查看 - 命令面板 - 输入install  - 选择Extensions: Install Extensions - 输入Flutter </li>
<li>安装Dart插件<br>查看 - 命令面板 - 输入install  - 选择Extensions: Install Extensions - Dart</li>
<li>检查设置<br>查看 - 命令面板 - 输入Doctor - 选择Flutter: Run Flutter Doctor</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;前言：因为笔者使用的是MAC，所以我这里只介绍MAC系统的开发环境搭建，Windows及Linux系统请移步 &lt;a href=&quot;https://flutter.dev/docs/get-started/install&quot;&gt;Flutter 开发环境搭建&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Flutter" scheme="http://yoursite.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Charles</title>
    <link href="http://yoursite.com/2017/12/24/Charles-%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/12/24/Charles-使用/</id>
    <published>2017-12-24T02:47:53.000Z</published>
    <updated>2017-12-25T05:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles</a> 是在 Mac 下常用的网络抓包工具，在开发过程中与服务端调式接口的必备利器。</p>
<p>Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。<br>除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。</p>
<a id="more"></a>
<p>Charles 主要的功能包括：</p>
<ul>
<li>截取 Http 和 Https 网络封包。</li>
<li>支持重发网络请求，方便后端调试。</li>
<li>支持修改网络请求参数。</li>
<li>支持网络请求的截获并动态修改。</li>
<li>支持模拟慢速网络。</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><a href="https://www.charlesproxy.com/download/" target="_blank" rel="external">下载地址</a></h2><h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><p>Charles 是一个收费软件，在天朝，看到收费两个字，呵呵之~</p>
<h2 id="破解jar生成"><a href="#破解jar生成" class="headerlink" title="破解jar生成"></a>破解jar生成</h2><p><a href="https://www.zzzmode.com/mytools/charles/" target="_blank" rel="external"><strong>点我，点我</strong></a></p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/7h28sl69on8kjs0e4xjx3xw6/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%2015.07.44.png" alt="屏幕快照 2017-12-19 15.07.44.png-91.4kB"></p>
<h2 id="替换jar包"><a href="#替换jar包" class="headerlink" title="替换jar包"></a>替换jar包</h2><p>macOS: /Applications/Charles.app/Contents/Java/charles.jar</p>
<p>Windows: C:\Program Files\Charles\lib\charles.jar</p>
<h1 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h1><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p><img src="http://static.zybuluo.com/LeoPoldCrossing/j5anx0bbtp81ogfqszduirpj/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%2015.58.26.png" alt="屏幕快照 2017-12-19 15.58.26.png-368.3kB"></p>
<p>选择菜单中的 “Proxy” -&gt; “macOS Proxy” 将 charles 设置为系统代理（需要授权），然后我们就可以在Charles界面看到网络请求。Windows系统类似</p>
<h2 id="iOS-Device"><a href="#iOS-Device" class="headerlink" title="iOS Device"></a>iOS Device</h2><p>iOS 设备我们需要手动的设置 Http 代理</p>
<p>设置 -&gt; 无线 -&gt; 已连接WIFI -&gt; 配置代理 -&gt; 手动 </p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/pglejtggtjzhhv7cvdz0l00a/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%2016.38.30.png" alt="屏幕快照 2017-12-19 16.38.30.png-153.7kB"></p>
<p>服务器地址为 运行charles的电脑 ip 地址，端口默认为 8888 </p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul>
<li>配置手机 wifi 网络代理</li>
</ul>
<p>设置 -&gt; 无线网络 -&gt; WIFI -&gt; 长按 -&gt; 修改网络 -&gt; 显示高级选项 -&gt; 代理 -&gt; 手动 </p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/b8l4bthgoa2dmmfazvbqid4w/Screenshot_20171219-233621.png" alt="Screenshot_20171219-233621.png-73.1kB"></p>
<blockquote>
<p>部分手机被隐藏，可以通过语音助手唤起 “”proxy””</p>
</blockquote>
<ul>
<li>硬编码 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HttpHost httpproxy = new HttpHost(&quot;192.168.0.101&quot;, 8888, &quot;http&quot;);</div><div class="line">httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,httpproxy);</div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HttpUrlConnection conn = url.openConnection(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&quot;192.168.0.101&quot;, 8888)));</div></pre></td></tr></table></figure>
<h1 id="Charles-使用"><a href="#Charles-使用" class="headerlink" title="Charles 使用"></a>Charles 使用</h1><p><img src="http://static.zybuluo.com/LeoPoldCrossing/z8z8ai8n8zgd85016avblch8/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-19%2023.46.08.png" alt="屏幕快照 2017-12-19 23.46.08.png-435.8kB"></p>
<h2 id="视图介绍"><a href="#视图介绍" class="headerlink" title="视图介绍"></a>视图介绍</h2><ul>
<li><p>Structure ： 视图将网络请求按访问的域名分类。</p>
</li>
<li><p>Sequence ： 视图将网络请求按访问的时间排序。</p>
</li>
</ul>
<h2 id="过滤请求"><a href="#过滤请求" class="headerlink" title="过滤请求"></a>过滤请求</h2><ul>
<li><p>Sequence 视图，在 Filter 栏中输入关键字<br>用于临时过滤的场景</p>
</li>
<li><p>Recording Setting -&gt; include<br>用于固定过滤，比如过滤 jinhui365.com<br><img src="http://static.zybuluo.com/LeoPoldCrossing/hp6vkrj2tvtyt3davlpzhm0j/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2000.07.04.png" alt="屏幕快照 2017-12-20 00.07.04.png-404.1kB"></p>
</li>
<li><p>Focus 过滤</p>
</li>
</ul>
<ol>
<li>Structure 视图 : 网络请求右击，选择”Focus”，仅展示过滤的请求，其他请求放入 “Other Hosts” 目录。</li>
<li>Sequence 视图 : 网络请求右击，选择”Focus”，并且勾选Filter栏右侧checkbox，仅展示过滤的请求</li>
</ol>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/4vxgfo6h4sk04rmfgf6g10lk/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2010.55.51.png" alt="屏幕快照 2017-12-20 10.55.51.png-62.1kB">    <img src="http://static.zybuluo.com/LeoPoldCrossing/zyw1f2iw73wakq8zzm72uyiw/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2010.58.52.png" alt="屏幕快照 2017-12-20 10.58.52.png-146.4kB"></p>
<h2 id="Https请求"><a href="#Https请求" class="headerlink" title="Https请求"></a>Https请求</h2><p>成功的抓到了网络请求，却发现有很多的红✘✘，强迫症郁闷了。。。<br><img src="http://static.zybuluo.com/LeoPoldCrossing/t00oq6fe2rwfzx9tt09w8bby/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2011.31.59.png" alt="屏幕快照 2017-12-20 11.31.59.png-186.6kB"></p>
<p>查看发现，出现红✘的请求全部是 https 协议，想要分析该请求，需要安装 Charles 的 CA 证书。</p>
<ul>
<li>Mac 证书安装</li>
</ul>
<ol>
<li>安装证书<br>“Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate”<br><img src="http://static.zybuluo.com/LeoPoldCrossing/kswy57che5fdqxxwuezhcmkw/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2017.35.08.png" alt="屏幕快照 2017-12-20 17.35.08.png-239kB"></li>
<li>证书配置<br>step完成后，在弹出的钥匙串对话框中，双击 charles 证书，将其设置为始终信任<br><img src="http://static.zybuluo.com/LeoPoldCrossing/6hla9bnkmceysqzecc5bv1hx/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2017.38.24.png" alt="屏幕快照 2017-12-20 17.38.24.png-231.8kB"></li>
</ol>
<ul>
<li>移动设备证书安装</li>
</ul>
<ol>
<li>移动设备设置 Http 代理<br><img src="http://static.zybuluo.com/LeoPoldCrossing/bko05h0pzaku284q70uwmzbc/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2017.50.47.png" alt="屏幕快照 2017-12-20 17.50.47.png-27.4kB"></li>
<li>手机浏览器访问 chls.pro/ssl 下载并安装证书</li>
</ol>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/lsi4wqns55hsptvvnmar5xkh/Screenshot_20171220-180049.png" alt="Screenshot_20171220-180049.png-47.4kB"></p>
<ul>
<li>开启 SSL Proxying</li>
</ul>
<ol>
<li><p>右键网络请求，点击 Enable SSL Proxying 菜单项</p>
</li>
<li><p>Proxy - &gt; SSL Proxying Setting -&gt; 勾选 Enable SSL Proxying -&gt; 添加域名<br><img src="http://static.zybuluo.com/LeoPoldCrossing/l7l81tr2bndxc18rvdxlfbwl/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2018.33.43.png" alt="屏幕快照 2017-12-20 18.33.43.png-152.8kB"></p>
</li>
</ol>
<ul>
<li>Https 抓包</li>
</ul>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/9yxcjoe8mg8t68554guyws3s/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2018.30.40.png" alt="屏幕快照 2017-12-20 18.30.40.png-90kB"></p>
<h2 id="网速模拟"><a href="#网速模拟" class="headerlink" title="网速模拟"></a>网速模拟</h2><p>在我们移动开发或测试工作中，常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。</p>
<p>在 Charles 菜单， 选择 Proxy -&gt; Throttle Setting ，勾选 Enable Throttling</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/h2tlpqlndvsr9tz8us5f20nc/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2019.11.32.png" alt="屏幕快照 2017-12-20 19.11.32.png-139.4kB"></p>
<p>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的 “Only for selected hosts” 项，然后在对话框的下半部分设置中增加指定的 hosts 项。</p>
<h2 id="修改-重发-Request"><a href="#修改-重发-Request" class="headerlink" title="修改/重发 Request"></a>修改/重发 Request</h2><p>Charles 提供了网络请求的修改和重发功能，接口调试更方便，有么有。。。</p>
<ul>
<li>修改 Request </li>
</ul>
<p>右键网络请求 -&gt; 菜单项 -&gt; Compose</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/hkrskh42xanol6sqzojor4vw/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2019.25.17.png" alt="屏幕快照 2017-12-20 19.25.17.png-134.6kB"></p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/i0dqxnhbtvgq1orhbi0d5ijy/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2019.26.02.png" alt="屏幕快照 2017-12-20 19.26.02.png-70.2kB"></p>
<p>我们可以修改请求的任何信息，Url地址、参数、端口、Header 等等，点击 Execute 执行网络请求</p>
<ul>
<li>重发 Request </li>
</ul>
<p>右键网络请求 -&gt; 菜单项 -&gt; Repeat/Repeat Advanced</p>
<p>Repeat 仅重试一次，Repeat Advanced 可以设置 重试次数，线程数量，重试间隔等等，可以做简单的服务器压力测试</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/ngv2hykvo2kgy4qjioy1qa7w/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-20%2019.36.39.png" alt="屏幕快照 2017-12-20 19.36.39.png-33.2kB"></p>
<h2 id="修改-Response"><a href="#修改-Response" class="headerlink" title="修改 Response"></a>修改 Response</h2><p>作为移动开发，经常需要服务器返回一些特殊的内容，方便我们调式一些情况，比如数据为空，数据异常，请求超时等等。又是一个很实用的功能，有木有。。</p>
<p>Charles 提供了Map，Rewrite及Breakpoints三种方式修改Response </p>
<ul>
<li><p>Map： 适合长期将某一些请求重定向到另一个 Url 或者本地文件</p>
</li>
<li><p>Rewrite ： 适合对网络请求进行一些正则替换</p>
</li>
<li><p>Breakpoints ： 适合一些临时性的修改</p>
</li>
</ul>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li>Map Remote ： 将指定网络请求重定向到另一个网络地址 ，Tools -&gt; Map Remote </li>
</ul>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/dww2ftmok5zpvmjra3h1pbqe/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-21%2010.42.20.png" alt="屏幕快照 2017-12-21 10.42.20.png-141.2kB"></p>
<ul>
<li>Map Local ： 将指定网络请求重定向到本地文件 ，Tools -&gt; Map Local</li>
</ul>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/fpl08jrgpcm0521ymshs25vr/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-21%2011.19.45.png" alt="屏幕快照 2017-12-21 11.19.45.png-105.1kB"></p>
<h3 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h3><p>Rewrite 功能适合某一个请求进行一些正则替换。Tools -&gt; Rewrite</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/x0gknnzx6ahj3zd7z6fozgep/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-21%2011.49.15.png" alt="屏幕快照 2017-12-21 11.49.15.png-245.2kB"></p>
<p>举个例子：将我们的资产接口中访问 “高端理财”替换为”超级理财”，再也不需要张普同学跑回工位改代码了。。。</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/6bdxsk7jxspy5xqh4kyjfic8/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-21%2011.58.19.png" alt="屏幕快照 2017-12-21 11.58.19.png-42.7kB"></p>
<h3 id="Breakpoints"><a href="#Breakpoints" class="headerlink" title="Breakpoints"></a>Breakpoints</h3><p>Rewrite 功能适合做批量和固定的替换，很多时候我们只是修改一次请求的Response，Rewrite 就感觉有些繁琐了。</p>
<p>Breakpoints 功能类似我们开发过程中的断点，当指定的网络请求发生，Charles 截取到该请求但并未返回结果，这时我们可以修改网络请求的返回内容。</p>
<ul>
<li><p>添加断点<br>双击请求 -&gt; 勾选 Breakpoints<br><img src="http://static.zybuluo.com/LeoPoldCrossing/zpdtca1y2jlc5a2zugnz92g1/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-21%2012.52.00.png" alt="屏幕快照 2017-12-21 12.52.00.png-219.2kB"></p>
</li>
<li><p>断点设置<br>Proxy -&gt; Breakpoints Setting<br><img src="http://static.zybuluo.com/LeoPoldCrossing/imftchjxq9ns85ys8y76slly/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-21%2012.49.37.png" alt="屏幕快照 2017-12-21 12.49.37.png-241.9kB"></p>
</li>
<li><p>修改请求内容</p>
</li>
</ul>
<ol>
<li>完成了前面两步操作，再次发起接口请求，会弹出断点对话框</li>
<li>点击 Edit Response ，修改Body</li>
<li>点击 Execute ，将Body返回<br><img src="http://static.zybuluo.com/LeoPoldCrossing/mdzvctziv826pbf88ytzqsza/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-21%2013.02.25.png" alt="屏幕快照 2017-12-21 13.02.25.png-99.8kB"></li>
</ol>
<blockquote>
<p>Tip:使用 Breakpoints 功能将网络请求截获并修改过程中，整个网络请求的计时并不会暂停，所以长时间的暂停可能导致客户端的请求超时。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 Charles 软件，我们可以很方便地在日常开发中，截取和调试网络请求内容，分析封包协议以及模拟慢速网络。用好 Charles 可以极大的方便我们对于带有网络请求的 App 的开发和调试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; 是在 Mac 下常用的网络抓包工具，在开发过程中与服务端调式接口的必备利器。&lt;/p&gt;
&lt;p&gt;Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。&lt;br&gt;除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Charles" scheme="http://yoursite.com/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>Tinker集成优化</title>
    <link href="http://yoursite.com/2017/07/06/Tinker%E9%9B%86%E6%88%90%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/07/06/Tinker集成优化/</id>
    <published>2017-07-06T02:47:53.000Z</published>
    <updated>2018-04-21T03:50:46.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-兼容多渠道包，使用zip-comment方式生成渠道包（完成）"><a href="#1-兼容多渠道包，使用zip-comment方式生成渠道包（完成）" class="headerlink" title="1. 兼容多渠道包，使用zip comment方式生成渠道包（完成）"></a>1. 兼容多渠道包，使用zip comment方式生成渠道包（完成）</h3><p><a href="https://github.com/LeoPoldCrossing/packer-ng-plugin" target="_blank" rel="external">多渠道打包 packer-ng-plugin</a></p>
<a id="more"></a>
<ul>
<li><p>1.1 引入</p>
<ul>
<li><p>根目录build.gradle</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ......</div><div class="line">    dependencies&#123;</div><div class="line">    // add packer-ng</div><div class="line">        classpath &apos;com.mcxiaoke.gradle:packer-ng:1.0.8&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改android模块的 build.gradle </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;packer&apos; </div><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.mcxiaoke.gradle:packer-helper:1.0.8&apos;</div><div class="line">&#125; </div><div class="line">android &#123;</div><div class="line">...</div><div class="line">signingConfigs &#123;</div><div class="line">    release &#123;</div><div class="line">            // 满足下面两个条件时需要此配置</div><div class="line">            // 1. Gradle版本 &gt;= 2.14.1</div><div class="line">            // 2. Android Gradle Plugin 版本 &gt;= 2.2.0</div><div class="line">            // 作用是只使用旧版签名，禁用V2版签名模式</div><div class="line">            v2SigningEnabled false </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>1.2 打包流程</p>
<ul>
<li>指定market属性 ： 两种方式<ul>
<li>打包时命令行使用 -Pmarket = yourMarketPath</li>
<li>在gradle.properties 里加入 market=yourMarketFilePath<br>market文件是渠道名列表文件，路径为相对路径 一般放在项目根目录 </li>
</ul>
</li>
<li><p>market 格式 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">lianxiang#联想乐商店 // #前面为渠道号，后面为注释</div></pre></td></tr></table></figure>
</li>
<li><p>打包命令：market.txt 在项目根目录</p>
<ul>
<li><p>普通打包 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew -Pmarket=markets.txt clean apkRelease</div></pre></td></tr></table></figure>
</li>
<li><p>指定productFlavors 打包<br>如果项目中有多个productFlavors，默认使用第一个flavor生成的apk文件作为打包工具的输入参数，也可以指定flavor生成渠道包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 指定 使用名称为demo 的flavor 打包</div><div class="line">./gradlew -Pmarket=markets.txt clean apkDemoRelease</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>1.3 插件配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">packer &#123;</div><div class="line">    // 是否检查signingConfig ，默认false</div><div class="line">    checkSigningConfig = true</div><div class="line">    // 是否检查gradle配置中的zipAlignEnabled，默认false </div><div class="line">    checkZipAlign = true</div><div class="line">    // 输出的apk文件名称</div><div class="line">    archiveNameFormat = &apos;$&#123;appPkg&#125;-$&#123;flavorName&#125;-$&#123;buildType&#125;-v$&#123;versionName&#125;-$&#123;versionCode&#125;&apos;</div><div class="line">    // 输出目录</div><div class="line">    archiveOutput = file(new File(project.buildDir.path, &quot;archives&quot;))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apk 文件 名称配置：</div><div class="line"></div><div class="line">projectName - 项目名字</div><div class="line">appName - App模块名字</div><div class="line">appPkg - applicationId (App包名packageName)</div><div class="line">buildType - buildType (release/debug/beta等)</div><div class="line">flavorName - flavorName (对应渠道打包中的渠道名字)</div><div class="line">versionName - versionName (显示用的版本号)</div><div class="line">versionCode - versionCode (内部版本号)</div><div class="line">buildTime - buildTime (编译构建日期时间)</div><div class="line">fileMD5 - fileMD5 (最终APK文件的MD5哈希值) (v1.0.5新增)</div><div class="line">fileSHA1 - fileSHA1 (最终APK文件的SHA1哈希值) (v1.0.5新增)</div></pre></td></tr></table></figure>
<h3 id="2-资源文件未做修改，patch文件过大（完成）"><a href="#2-资源文件未做修改，patch文件过大（完成）" class="headerlink" title="2. 资源文件未做修改，patch文件过大（完成）"></a>2. 资源文件未做修改，patch文件过大（完成）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 1. 关闭aapt对png优化</div><div class="line">android&#123;</div><div class="line">    ...</div><div class="line">    aaptOptions &#123;</div><div class="line">        cruncherEnabled false</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 2. 确认png文件没有修改的情况下 忽略png的修改</div><div class="line">tinkerPatch&#123;</div><div class="line">    ...</div><div class="line">    res&#123;</div><div class="line">        ...</div><div class="line">        ignoreChange = [&quot;*.png&quot;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-TinkerPatch-补丁管理后台集成（完成）"><a href="#3-TinkerPatch-补丁管理后台集成（完成）" class="headerlink" title="3. TinkerPatch 补丁管理后台集成（完成）"></a>3. TinkerPatch 补丁管理后台集成（完成）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gradle接入</div><div class="line">// tinker server</div><div class="line">compile(&quot;com.tencent.tinker:tinker-server-android:0.3.2&quot;)</div><div class="line">// 配置appkey  appVersion</div><div class="line">android&#123;</div><div class="line">    ...</div><div class="line">    // 微信Tinker 后台的appkey</div><div class="line">    buildConfigField &quot;String&quot;, &quot;APP_KEY&quot;, &quot;\&quot;68cfdc1fa61a19df\&quot;&quot;</div><div class="line">    buildConfigField &quot;String&quot;, &quot;APP_VERSION&quot;, &quot;\&quot;$&#123;versionName&#125;\&quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 初始化TinkerPatch SDK</div><div class="line">TinkerServerManager.installTinkerServer(</div><div class="line">                getApplication(),Tinker.with(getApplication()), 1,BuildConfig.APP_KEY, BuildConfig.APP_VERSION, channel);</div><div class="line">// 检查是否有新补丁,默认1小时检查一次</div><div class="line">    TinkerServerManager.checkTinkerUpdate(false);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 注册service </div><div class="line">&lt;service</div><div class="line">    android:name=&quot;com.tencent.tinker.app.service.TinkerServerResultService&quot;</div><div class="line">    android:exported=&quot;false&quot;</div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line">// TinkerServerManager 及 Callback的封装</div><div class="line">public class TinkerServerManager &#123;</div><div class="line"></div><div class="line">    private static final String TAG = &quot;Tinker.ServerManager&quot;;</div><div class="line">    private static final String CONDITION_CHANNEL = &quot;channel&quot;;</div><div class="line"></div><div class="line">    static TinkerServerClient sTinkerServerClient;</div><div class="line">    static String channel;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化 TinkerServer 实例</div><div class="line">     * @param context context</div><div class="line">     * @param tinker &#123;@link Tinker&#125; 实例</div><div class="line">     * @param hours  访问服务器的时间间隔, 单位为小时, 应为 &gt;= 0</div><div class="line">     * @param appKey 从Tinkerpatch中得到的appKey</div><div class="line">     * @param appVersion 在Tinkerpatch中填写的appVersion</div><div class="line">     * @param channel 发布的渠道名称，由于GooglePlay渠道的政策限制，我们会停止所有channel中含有google关键字的动态下发功能。</div><div class="line">     */</div><div class="line">    public static void installTinkerServer(Context context, Tinker tinker,</div><div class="line">                                           int hours, String appKey, String appVersion, String channel) &#123;</div><div class="line">        final boolean debug = Debugger.getInstance(context).isDebug();</div><div class="line">        TinkerLog.w(TAG, String.format(&quot;installTinkerServer, debug value: %s appVersion: %s, channel: %s&quot;,</div><div class="line">            String.valueOf(debug), appVersion, channel)</div><div class="line">        );</div><div class="line">        sTinkerServerClient = TinkerServerClient.init(</div><div class="line">            context,</div><div class="line">            tinker,</div><div class="line">            appKey,</div><div class="line">            appVersion,</div><div class="line">            debug,</div><div class="line">            new TinkerServerPatchRequestCallback()</div><div class="line">        );</div><div class="line">        // add channel condition</div><div class="line">        sTinkerServerClient.updateTinkerCondition(CONDITION_CHANNEL, channel);</div><div class="line">        sTinkerServerClient.setCheckIntervalByHours(hours);</div><div class="line">        TinkerServerManager.channel = channel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 检查服务器是否有补丁更新</div><div class="line">     * @param immediately 是否立刻检查,忽略时间间隔限制</div><div class="line">     */</div><div class="line">    public static void checkTinkerUpdate(final boolean immediately) &#123;</div><div class="line">        if (sTinkerServerClient == null) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;checkTinkerUpdate, sTinkerServerClient == null&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        Tinker tinker = sTinkerServerClient.getTinker();</div><div class="line">        //only check at the main process</div><div class="line">        if (tinker.isMainProcess()) &#123;</div><div class="line">            Looper.getMainLooper().myQueue().addIdleHandler(new MessageQueue.IdleHandler() &#123;</div><div class="line">                @Override</div><div class="line">                public boolean queueIdle() &#123;</div><div class="line">                    sTinkerServerClient.checkTinkerUpdate(immediately);</div><div class="line">                    return false;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 向服务器请求在线参数信息</div><div class="line">     * @param configRequestCallback</div><div class="line">     * @param immediately            是否立刻请求,忽略时间间隔限制</div><div class="line">     */</div><div class="line">    public static void getDynamicConfig(final ConfigRequestCallback configRequestCallback, final boolean immediately) &#123;</div><div class="line">        if (sTinkerServerClient == null) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;checkTinkerUpdate, sTinkerServerClient == null&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        Tinker tinker = sTinkerServerClient.getTinker();</div><div class="line">        //only check at the main process</div><div class="line">        if (tinker.isMainProcess()) &#123;</div><div class="line">            Looper.getMainLooper().myQueue().addIdleHandler(new MessageQueue.IdleHandler() &#123;</div><div class="line">                @Override</div><div class="line">                public boolean queueIdle() &#123;</div><div class="line">                    sTinkerServerClient.getDynamicConfig(configRequestCallback, immediately);</div><div class="line">                    return false;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置在线参数的时间间隔</div><div class="line">     * @param hours 大于等于0的整数</div><div class="line">     */</div><div class="line">    public static void setGetConfigIntervalByHours(int hours) &#123;</div><div class="line">        if (sTinkerServerClient == null) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;setGetConfigIntervalByHours, sTinkerServerClient == null&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        sTinkerServerClient.setGetConfigIntervalByHours(hours);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将在线参数返回的 json 转化为 Hashmap</div><div class="line">     * @param jsonString</div><div class="line">     * @return</div><div class="line">     * @throws JSONException</div><div class="line">     */</div><div class="line">    public static HashMap&lt;String, String&gt; jsonToMap(String jsonString) throws JSONException &#123;</div><div class="line">        HashMap&lt;String, String&gt; map = new HashMap&lt;&gt;();</div><div class="line">        JSONObject jObject = new JSONObject(jsonString);</div><div class="line">        Iterator&lt;String&gt; keys = jObject.keys();</div><div class="line"></div><div class="line">        while (keys.hasNext()) &#123;</div><div class="line">            String key = keys.next();</div><div class="line">            String value = jObject.getString(key);</div><div class="line">            map.put(key, value);</div><div class="line">        &#125;</div><div class="line">        return map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置条件下发的属性</div><div class="line">     * @param key</div><div class="line">     * @param value</div><div class="line">     */</div><div class="line">    public static void updateTinkerCondition(String key, String value) &#123;</div><div class="line">        if (sTinkerServerClient == null) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;updateTinkerCondition, sTinkerServerClient == null&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        sTinkerServerClient.updateTinkerCondition(key, value);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 上报补丁合成情况</div><div class="line">     * @param patchResult</div><div class="line">     */</div><div class="line">    public static void reportTinkerPatchFail(PatchResult patchResult) &#123;</div><div class="line">        if (sTinkerServerClient == null) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;reportTinkerPatchFail, sTinkerServerClient == null&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if (patchResult == null) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;reportTinkerPatchFail, patchResult == null&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (patchResult.isSuccess) &#123;</div><div class="line">            TinkerLog.i(TAG, &quot;reportTinkerPatchFail, patch success, just return&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        String patchMd5 = (patchResult.patchVersion != null)</div><div class="line">            ? patchResult.patchVersion : SharePatchFileUtil.getMD5(new File(patchResult.rawPatchFilePath));</div><div class="line"></div><div class="line">        if (!patchMd5.equals(sTinkerServerClient.getCurrentPatchMd5())) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;reportTinkerPatchFail, md5 not equal, patchMd5:%s, currentPatchMd5:%s&quot;,</div><div class="line">                patchMd5, sTinkerServerClient.getCurrentPatchMd5()</div><div class="line">            );</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        sTinkerServerClient.reportPatchFail(</div><div class="line">            sTinkerServerClient.getCurrentPatchVersion(),</div><div class="line">            DefaultPatchRequestCallback.ERROR_PATCH_FAIL</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 上报补丁合成情况</div><div class="line">     * @param patchMd5</div><div class="line">     */</div><div class="line">    public static void reportTinkerPatchListenerFail(int returnCode, String patchMd5) &#123;</div><div class="line">        if (sTinkerServerClient == null) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;reportTinkerPatchListenerFail, sTinkerServerClient == null&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if (returnCode == ShareConstants.ERROR_PATCH_OK) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if (patchMd5 == null) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;reportTinkerPatchListenerFail, patchMd5 == null&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if (!patchMd5.equals(sTinkerServerClient.getCurrentPatchMd5())) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;reportTinkerPatchListenerFail, md5 not equal, patchMd5:%s, currentPatchMd5:%s&quot;,</div><div class="line">                patchMd5, sTinkerServerClient.getCurrentPatchMd5()</div><div class="line">            );</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        sTinkerServerClient.reportPatchFail(</div><div class="line">            sTinkerServerClient.getCurrentPatchVersion(),</div><div class="line">            DefaultPatchRequestCallback.ERROR_LISTENER_CHECK_FAIL</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 上报补丁加载情况</div><div class="line">     */</div><div class="line">    public static void reportTinkerLoadFail() &#123;</div><div class="line">        if (sTinkerServerClient == null) &#123;</div><div class="line">            TinkerLog.e(TAG, &quot;reportTinkerPatchFail, sTinkerServerClient == null&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        sTinkerServerClient.reportPatchFail(</div><div class="line">            sTinkerServerClient.getCurrentPatchVersion(),</div><div class="line">            DefaultPatchRequestCallback.ERROR_LOAD_FAIL</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static boolean isGooglePlayChannel() &#123;</div><div class="line">        return channel.contains(&quot;google&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static boolean is360Channel()&#123;</div><div class="line">        return channel.contains(&quot;360&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">public class TinkerServerPatchRequestCallback extends DefaultPatchRequestCallback &#123;</div><div class="line">    private static final String TAG = &quot;Tinker.TinkerServerDefaultRequestCallback&quot;;</div><div class="line"></div><div class="line">    public static final String TINKER_RETRY_PATCH     = &quot;tinker_retry_patch&quot;;</div><div class="line">    public static final int    TINKER_MAX_RETRY_COUNT = 3;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean beforePatchRequest() &#123;</div><div class="line">        boolean result = super.beforePatchRequest();</div><div class="line">        if (result) &#123;</div><div class="line">            TinkerServerClient client = TinkerServerClient.get();</div><div class="line">            Tinker tinker = client.getTinker();</div><div class="line">            Context context = client.getContext();</div><div class="line"></div><div class="line">            if (!tinker.isMainProcess()) &#123;</div><div class="line">                TinkerLog.e(TAG, &quot;beforePatchRequest, only request on the main process&quot;);</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            if (TinkerServerManager.isGooglePlayChannel()) &#123;</div><div class="line">                TinkerLog.e(TAG, &quot;beforePatchRequest, google play channel, return false&quot;);</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            if (TinkerServerManager.is360Channel()) &#123;</div><div class="line">                TinkerLog.e(TAG, &quot;beforePatchRequest, 360 channel, return false&quot;);</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            // main process must be the newly version</div><div class="line">            // check whether it is pending work</div><div class="line">            String currentPatchMd5 = client.getCurrentPatchMd5();</div><div class="line">            TinkerLoadResult tinkerLoadResult = tinker.getTinkerLoadResultIfPresent();</div><div class="line"></div><div class="line">            if (tinkerLoadResult.currentVersion == null || !currentPatchMd5.equals(tinkerLoadResult.currentVersion)) &#123;</div><div class="line">                Integer version = client.getCurrentPatchVersion();</div><div class="line">                if (version &gt; 0) &#123;</div><div class="line">                    File patchFile = ServerUtils.getServerFile(</div><div class="line">                        context, client.getAppVersion(), String.valueOf(version)</div><div class="line">                    );</div><div class="line">                    if (patchFile.exists() &amp;&amp; patchFile.isFile() &amp;&amp; handlePatchFile(context, version, patchFile)) &#123;</div><div class="line">                        return false;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private boolean handlePatchFile(Context context, Integer version, File patchFile) &#123;</div><div class="line">        SharedPreferences sp = context.getSharedPreferences(</div><div class="line">            TinkerServerClient.SHARE_SERVER_PREFERENCE_CONFIG, Context.MODE_PRIVATE</div><div class="line">        );</div><div class="line">        int current = sp.getInt(TINKER_RETRY_PATCH, 0);</div><div class="line">        if (current &gt;= TINKER_MAX_RETRY_COUNT) &#123;</div><div class="line">            SharePatchFileUtil.safeDeleteFile(patchFile);</div><div class="line">            sp.edit().putInt(TINKER_RETRY_PATCH, 0).commit();</div><div class="line">            TinkerLog.w(TAG,</div><div class="line">                &quot;beforePatchRequest, retry patch install more than %d times, version: %d, patch:%s&quot;,</div><div class="line">                current, version, patchFile.getPath()</div><div class="line">            );</div><div class="line">        &#125; else &#123;</div><div class="line">            TinkerLog.w(TAG, &quot;beforePatchRequest, have pending patch to install, version: %d, patch:%s&quot;,</div><div class="line">                version, patchFile.getPath()</div><div class="line">            );</div><div class="line"></div><div class="line">            sp.edit().putInt(TINKER_RETRY_PATCH, ++current).commit();</div><div class="line">            TinkerInstaller.onReceiveUpgradePatch(context, patchFile.getAbsolutePath());</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onPatchRollback() &#123;</div><div class="line">        TinkerLog.w(TAG, &quot;onPatchRollback&quot;);</div><div class="line">        TinkerServerClient client = TinkerServerClient.get();</div><div class="line"></div><div class="line">        if (!client.getTinker().isTinkerLoaded()) &#123;</div><div class="line">            TinkerLog.w(TAG, &quot;onPatchRollback, tinker is not loaded, just return&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (TinkerServerUtils.isBackground()) &#123;</div><div class="line">            TinkerLog.i(TAG, &quot;onPatchRollback, it is in background, just clean patch and kill all process&quot;);</div><div class="line">            rollbackPatchDirectly();</div><div class="line">        &#125; else &#123;</div><div class="line">            //we can wait process at background, such as onAppBackground</div><div class="line">            //or we can restart when the screen off</div><div class="line">            TinkerLog.i(TAG, &quot;tinker wait screen to clean patch and kill all process&quot;);</div><div class="line">            new TinkerServerUtils.ScreenState(client.getContext(), new TinkerServerUtils.IOnScreenOff() &#123;</div><div class="line">                @Override</div><div class="line">                public void onScreenOff() &#123;</div><div class="line">                    rollbackPatchDirectly();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onPatchDownloadFail(Exception e, Integer newVersion, Integer currentVersion) &#123;</div><div class="line">        super.onPatchDownloadFail(e, newVersion, currentVersion);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onPatchSyncFail(Exception e) &#123;</div><div class="line">        super.onPatchSyncFail(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onPatchUpgrade(File file, Integer newVersion, Integer currentVersion) &#123;</div><div class="line">        boolean result = super.onPatchUpgrade(file, newVersion, currentVersion);</div><div class="line">        if (result) &#123;</div><div class="line">            TinkerServerClient client = TinkerServerClient.get();</div><div class="line">            Context context = client.getContext();</div><div class="line">            SharedPreferences sp = context.getSharedPreferences(</div><div class="line">                TinkerServerClient.SHARE_SERVER_PREFERENCE_CONFIG, Context.MODE_PRIVATE</div><div class="line">            );</div><div class="line">            sp.edit().putInt(TINKER_RETRY_PATCH, 0).commit();</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-合成进程可能被中断，补丁合成的重试"><a href="#4-合成进程可能被中断，补丁合成的重试" class="headerlink" title="4. 合成进程可能被中断，补丁合成的重试"></a>4. 合成进程可能被中断，补丁合成的重试</h3><p>重试三次 TinkerServePatchRequestCallBack  – handlePatchFile </p>
<h3 id="5-补丁后程序无法启动的处理（完成）"><a href="#5-补丁后程序无法启动的处理（完成）" class="headerlink" title="5. 补丁后程序无法启动的处理（完成）"></a>5. 补丁后程序无法启动的处理（完成）</h3><p>停用Tinker 及 清理补丁</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Tinker.with(context).setTinkerDisable();</div><div class="line">Tinker.with(context).cleanPatch();</div></pre></td></tr></table></figure>
<h3 id="6-Tinker-默认的-DefaultTinkerResultService-会在加载patch成功之后立刻杀掉进程-应该在程序进入后台或者手机锁屏后杀掉进程，使补丁生效！-（完成）"><a href="#6-Tinker-默认的-DefaultTinkerResultService-会在加载patch成功之后立刻杀掉进程-应该在程序进入后台或者手机锁屏后杀掉进程，使补丁生效！-（完成）" class="headerlink" title="6. Tinker 默认的 DefaultTinkerResultService 会在加载patch成功之后立刻杀掉进程,应该在程序进入后台或者手机锁屏后杀掉进程，使补丁生效！ （完成）"></a>6. Tinker 默认的 DefaultTinkerResultService 会在加载patch成功之后立刻杀掉进程,应该在程序进入后台或者手机锁屏后杀掉进程，使补丁生效！ （完成）</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-兼容多渠道包，使用zip-comment方式生成渠道包（完成）&quot;&gt;&lt;a href=&quot;#1-兼容多渠道包，使用zip-comment方式生成渠道包（完成）&quot; class=&quot;headerlink&quot; title=&quot;1. 兼容多渠道包，使用zip comment方式生成渠道包（完成）&quot;&gt;&lt;/a&gt;1. 兼容多渠道包，使用zip comment方式生成渠道包（完成）&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/LeoPoldCrossing/packer-ng-plugin&quot;&gt;多渠道打包 packer-ng-plugin&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="hotfix" scheme="http://yoursite.com/tags/hotfix/"/>
    
  </entry>
  
  <entry>
    <title>微信Tinker集成</title>
    <link href="http://yoursite.com/2017/07/01/%E5%BE%AE%E4%BF%A1Tinker%E9%9B%86%E6%88%90/"/>
    <id>http://yoursite.com/2017/07/01/微信Tinker集成/</id>
    <published>2017-07-01T02:47:53.000Z</published>
    <updated>2018-04-21T03:49:13.415Z</updated>
    
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>前言： Tinker 是一个开源项目(Github链接)，它是微信官方的Android热补丁解决方案，它支持动态下发代码、So库以及资源，让应用能够在不需要重新安装的情况下实现更新。</p>
</blockquote>
<a id="more"></a>
<h4 id="1-1-Gradle-接入"><a href="#1-1-Gradle-接入" class="headerlink" title="1.1 Gradle 接入"></a>1.1 Gradle 接入</h4><p>在项目的build.gradle中添加 tinker-patch-gradle-plugin的依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath (&apos;com.tencent.tinker:tinker-patch-gradle-plugin:1.7.5&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在app的build.gradle中添加tinker的库依赖以及apply tinker 的gradle plugin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dependencies&#123;</div><div class="line">    //tinker的核心库</div><div class="line">    compile(&apos;com.tencent.tinker:tinker-android-lib:1.7.5&apos;)</div><div class="line">    //可选，用于注解生成application类</div><div class="line">    provided(&apos;com.tencent.tinker:tinker-android-anno:1.7.5&apos;)</div><div class="line">&#125;</div><div class="line">//　应用plugin </div><div class="line">apply plugin:&apos;com.tencent.tinker.patch&apos;</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="1-2-Tinker-Gradle-配置"><a href="#1-2-Tinker-Gradle-配置" class="headerlink" title="1.2 Tinker Gradle 配置"></a>1.2 Tinker Gradle 配置</h4><p><a href="https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="external">参考 Tinker 接入指南</a><br>tinkerPatch 全局配置示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">tinkerPatch &#123;</div><div class="line">        // 基准包 path </div><div class="line">        oldApk = getOldApkPath()</div><div class="line">        ignoreWarning = false</div><div class="line">        useSign = true</div><div class="line">        buildConfig &#123;</div><div class="line">            // mapping文件</div><div class="line">            applyMapping = getApplyMappingPath()</div><div class="line">            // R文件</div><div class="line">            applyResourceMapping = getApplyResourceMappingPath()</div><div class="line">            // tinkerId 必须设置</div><div class="line">            tinkerId = getTinkerIdValue()</div><div class="line">        &#125;</div><div class="line">        dex &#123;</div><div class="line">            dexMode = &quot;jar&quot;</div><div class="line">            // 是否提前生成dex，而非合成方式，回退成Qzone方案</div><div class="line">            usePreGeneratedPatchDex = false</div><div class="line">            pattern = [&quot;classes*.dex&quot;,</div><div class="line">                       &quot;assets/secondary-dex-?.jar&quot;]</div><div class="line">            loader = [&quot;com.tencent.tinker.loader.*&quot;, &quot;com.rxhui.pay.application.MyApplication&quot;,</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">        lib &#123;</div><div class="line">            pattern = [&quot;lib/armeabi/*.so&quot;]</div><div class="line">        &#125;</div><div class="line">        res &#123;</div><div class="line">            pattern = [&quot;res/*&quot;, &quot;assets/*&quot;, &quot;resources.arsc&quot;, &quot;AndroidManifest.xml&quot;]</div><div class="line">            // 生成patch 需要忽略的文件pattern（此处有坑）</div><div class="line">//            ignoreChange = []</div><div class="line">            ignoreChange = [&quot;*.png&quot;]</div><div class="line">            largeModSize = 100</div><div class="line">        &#125;</div><div class="line">        packageConfig &#123;</div><div class="line">            //todo 每次升级时，填写升级信息</div><div class="line">            configField(&quot;patchMessage&quot;, &quot;tinker test&quot;)</div><div class="line">            configField(&quot;platform&quot;, &quot;all&quot;)</div><div class="line">            configField(&quot;patchVersion&quot;, getTinkerIdValue())</div><div class="line">        &#125;</div><div class="line">        sevenZip &#123;</div><div class="line">            zipArtifact = &quot;com.tencent.mm:SevenZip:1.1.10&quot;</div><div class="line">            /**</div><div class="line">             * optional，default &apos;7za&apos;</div><div class="line">             * todo you can specify the 7za path yourself, it will overwrite the zipArtifact value</div><div class="line">             */</div><div class="line">//            path = &quot;/usr/bin/7za&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="1-3-Patch-生成"><a href="#1-3-Patch-生成" class="headerlink" title="1.3 Patch 生成"></a>1.3 Patch 生成</h4><ul>
<li>执行assemble任务，生成 oldApk </li>
<li>修改代码，bug 修复，资源文件修改等等</li>
<li>修改gradle tinkerPatch 配置，oldApk applyMapping及applyResourceMapping （混淆 mapping 和R文件使用同一份）</li>
<li>执行 tinkerPatch task 生成patch文件</li>
</ul>
<p>apk路径，mapping 路径，R.txt 路径 示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def bakPath = file(&quot;$&#123;rootDir&#125;/tinker/bakApk&quot;)</div><div class="line">ext &#123;</div><div class="line">    // 普通生成patch模式</div><div class="line">    tinkerOldApkPath = &quot;$&#123;bakPath&#125;/base-app-release-v1.0.1-2016-1125.apk&quot;</div><div class="line">    tinkerApplyMappingPath = &quot;$&#123;bakPath&#125;/base-app-release-v1.0.1-2016-1125-mapping.txt&quot;</div><div class="line">    tinkerApplyResourcePath = &quot;$&#123;bakPath&#125;/base-app-release-v1.0.1-2016-1125-R.txt&quot;</div><div class="line"></div><div class="line">    // 包含多个flavor时配置  </div><div class="line">    tinkerBuildFlavorDirectory = &quot;$&#123;bakPath&#125;/app-2016-1209&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">tinkerPatch中：</div><div class="line"></div><div class="line">List&lt;String&gt; flavors = new ArrayList&lt;&gt;();</div><div class="line">    project.android.productFlavors.each &#123;flavor -&gt;</div><div class="line">        flavors.add(flavor.name)</div><div class="line">    &#125;</div><div class="line">    boolean hasFlavors = flavors.size() &gt; 0</div><div class="line">    /**</div><div class="line">    * 备份apk mapping R文件值bakPath</div><div class="line">    */</div><div class="line">    android.applicationVariants.all &#123; variant -&gt;</div><div class="line">        /**</div><div class="line">         * task type, you want to bak</div><div class="line">         */</div><div class="line">        def taskName = variant.name</div><div class="line">        def date = new Date().format(&quot;MMdd-HH-mm-ss&quot;)</div><div class="line"></div><div class="line">        tasks.all &#123;</div><div class="line">            if (&quot;assemble$&#123;taskName.capitalize()&#125;&quot;.equalsIgnoreCase(it.name)) &#123;</div><div class="line"></div><div class="line">                it.doLast &#123;</div><div class="line">                    copy &#123;</div><div class="line">                        def fileNamePrefix = &quot;$&#123;project.name&#125;-$&#123;variant.baseName&#125;&quot;</div><div class="line">                        def newFileNamePrefix = hasFlavors ? &quot;$&#123;fileNamePrefix&#125;&quot; : &quot;$&#123;fileNamePrefix&#125;-$&#123;date&#125;&quot;</div><div class="line"></div><div class="line">                        def destPath = hasFlavors ? file(&quot;$&#123;bakPath&#125;/$&#123;project.name&#125;-$&#123;date&#125;/$&#123;variant.flavorName&#125;&quot;) : bakPath</div><div class="line">                        from variant.outputs.outputFile</div><div class="line">                        into destPath</div><div class="line">                        rename &#123; String fileName -&gt;</div><div class="line">                            fileName.replace(&quot;$&#123;fileNamePrefix&#125;.apk&quot;, &quot;$&#123;newFileNamePrefix&#125;.apk&quot;)</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        from &quot;$&#123;buildDir&#125;/outputs/mapping/$&#123;variant.dirName&#125;/mapping.txt&quot;</div><div class="line">                        into destPath</div><div class="line">                        rename &#123; String fileName -&gt;</div><div class="line">                            fileName.replace(&quot;mapping.txt&quot;, &quot;$&#123;newFileNamePrefix&#125;-mapping.txt&quot;)</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        from &quot;$&#123;buildDir&#125;/intermediates/symbols/$&#123;variant.dirName&#125;/R.txt&quot;</div><div class="line">                        into destPath</div><div class="line">                        rename &#123; String fileName -&gt;</div><div class="line">                            fileName.replace(&quot;R.txt&quot;, &quot;$&#123;newFileNamePrefix&#125;-R.txt&quot;)</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">    * 多flavor 处理  配置每个flavor的tinkerPatch task </div><div class="line">    */</div><div class="line">    project.afterEvaluate &#123;</div><div class="line">        //sample use for build all flavor for one time</div><div class="line">        if (hasFlavors) &#123;</div><div class="line">            task(tinkerPatchAllFlavorRelease) &#123;</div><div class="line">                group = &apos;tinker&apos;</div><div class="line">                def originOldPath = getTinkerBuildFlavorDirectory()</div><div class="line">                for (String flavor : flavors) &#123;</div><div class="line">                    def tinkerTask = tasks.getByName(&quot;tinkerPatch$&#123;flavor.capitalize()&#125;Release&quot;)</div><div class="line">                    dependsOn tinkerTask</div><div class="line">                    def preAssembleTask = tasks.getByName(&quot;process$&#123;flavor.capitalize()&#125;ReleaseManifest&quot;)</div><div class="line">                    preAssembleTask.doFirst &#123;</div><div class="line">                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)</div><div class="line">                        project.tinkerPatch.oldApk = &quot;$&#123;originOldPath&#125;/$&#123;flavorName&#125;/$&#123;project.name&#125;-$&#123;flavorName&#125;-release.apk&quot;</div><div class="line">                        project.tinkerPatch.buildConfig.applyMapping = &quot;$&#123;originOldPath&#125;/$&#123;flavorName&#125;/$&#123;project.name&#125;-$&#123;flavorName&#125;-release-mapping.txt&quot;</div><div class="line">                        project.tinkerPatch.buildConfig.applyResourceMapping = &quot;$&#123;originOldPath&#125;/$&#123;flavorName&#125;/$&#123;project.name&#125;-$&#123;flavorName&#125;-release-R.txt&quot;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            task(tinkerPatchAllFlavorDebug) &#123;</div><div class="line">                group = &apos;tinker&apos;</div><div class="line">                def originOldPath = getTinkerBuildFlavorDirectory()</div><div class="line">                for (String flavor : flavors) &#123;</div><div class="line">                    def tinkerTask = tasks.getByName(&quot;tinkerPatch$&#123;flavor.capitalize()&#125;Debug&quot;)</div><div class="line">                    dependsOn tinkerTask</div><div class="line">                    def preAssembleTask = tasks.getByName(&quot;process$&#123;flavor.capitalize()&#125;DebugManifest&quot;)</div><div class="line">                    preAssembleTask.doFirst &#123;</div><div class="line">                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)</div><div class="line">                        project.tinkerPatch.oldApk = &quot;$&#123;originOldPath&#125;/$&#123;flavorName&#125;/$&#123;project.name&#125;-$&#123;flavorName&#125;-debug.apk&quot;</div><div class="line">                        project.tinkerPatch.buildConfig.applyMapping = &quot;$&#123;originOldPath&#125;/$&#123;flavorName&#125;/$&#123;project.name&#125;-$&#123;flavorName&#125;-debug-mapping.txt&quot;</div><div class="line">                        project.tinkerPatch.buildConfig.applyResourceMapping = &quot;$&#123;originOldPath&#125;/$&#123;flavorName&#125;/$&#123;project.name&#125;-$&#123;flavorName&#125;-debug-R.txt&quot;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="1-4-Tinker-patch-加载"><a href="#1-4-Tinker-patch-加载" class="headerlink" title="1.4 Tinker patch 加载"></a>1.4 Tinker patch 加载</h4><ul>
<li><p>1.4.1 改造Application类（实现补丁包可以对Application做修改），两种方式（建议使用注解的方式）：</p>
<ul>
<li>（1）定义代理类实现DefaultApplicationLike<br><a href="https://github.com/Tencent/tinker/wiki/Tinker-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95" target="_blank" rel="external">Tinker自定义扩展</a></li>
<li>（2）Annotation 方式，需要引入 tinker-android-anno。保证无法修改Application，避免误操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> @DefaultLifeCycle(</div><div class="line">application = &quot;.SampleApplication&quot;,                       //application类名</div><div class="line">flags = ShareConstants.TINKER_ENABLE_ALL,                 //tinkerFlags</div><div class="line">loaderClass = &quot;com.tencent.tinker.loader.TinkerLoader&quot;,   //loaderClassName, 我们这里使用默认即可!</div><div class="line">loadVerifyFlag = false)                                   //tinkerLoadVerifyFlag</div><div class="line">public class SampleApplicationLike extends DefaultApplicationLike</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注：将原来的application类删掉，初始化操作全部放在代理类中。</p>
<ul>
<li><p>1.4.2 gradle tinker patch 配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dex &#123;</div><div class="line">loader = [&quot;com.tencent.tinker.loader.*&quot;,</div><div class="line">         // 配置成自己的application </div><div class="line">          &quot;tinker.sample.android.YourApplication&quot;,       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>1.4.3 安装tinker </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@SuppressWarnings(&quot;unused&quot;)</div><div class="line">@DefaultLifeCycle(application = &quot;tinker.sample.android.app.SampleApplication&quot;,</div><div class="line">                  flags = ShareConstants.TINKER_ENABLE_ALL,</div><div class="line">                  loadVerifyFlag = false)</div><div class="line">public class SampleApplicationLike extends DefaultApplicationLike &#123;</div><div class="line">    private static final String TAG = &quot;Tinker.SampleApplicationLike&quot;;</div><div class="line"></div><div class="line">    public SampleApplicationLike(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag,</div><div class="line">                                 long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent,</div><div class="line">                                 Resources[] resources, ClassLoader[] classLoader, AssetManager[] assetManager) &#123;</div><div class="line">        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent, resources, classLoader, assetManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    @Override</div><div class="line">    public void onBaseContextAttached(Context base) &#123;</div><div class="line">        super.onBaseContextAttached(base);</div><div class="line">       </div><div class="line">        MultiDex.install(base);</div><div class="line"></div><div class="line">        SampleApplicationContext.application = getApplication();</div><div class="line">        SampleApplicationContext.context = getApplication();</div><div class="line"></div><div class="line">        //installTinker after load multiDex</div><div class="line">        //or you can put com.tencent.tinker.** to main dex</div><div class="line">        TinkerInstaller.install(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>1.4.4 加载补丁<br>将生成的补丁包，推送到指定目录，运行app时调用下面的代码进行加载。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;/patch_signed_7zip.apk&quot;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在实际开发过程中，我们是需要将补丁存到服务器，由服务器进行补丁分发，Tinker的开发团队已经提供，集成文档很详细，我就不做搬运工了。<a href="http://www.tinkerpatch.com/Docs/SDK" target="_blank" rel="external">Tinker Server SDK集成文档</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;前言： Tinker 是一个开源项目(Github链接)，它是微信官方的Android热补丁解决方案，它支持动态下发代码、So库以及资源，让应用能够在不需要重新安装的情况下实现更新。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="hotfix" scheme="http://yoursite.com/tags/hotfix/"/>
    
  </entry>
  
  <entry>
    <title>Android 设备获取唯一标识</title>
    <link href="http://yoursite.com/2017/06/20/Android%E8%AE%BE%E5%A4%87%E8%8E%B7%E5%8F%96%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86/"/>
    <id>http://yoursite.com/2017/06/20/Android设备获取唯一标识/</id>
    <published>2017-06-20T02:47:53.000Z</published>
    <updated>2018-04-21T04:03:43.953Z</updated>
    
    <content type="html"><![CDATA[<p>Android设备有很多的”标识”号，比如常见的IMEI，SerizalNumber，UUID等概念。既然这样，那我们就把这些概念拉出来溜溜，对这些标识做一个总结，看看Android为毛整这么多标识。</p>
<a id="more"></a>
<h3 id="DEVICE-ID"><a href="#DEVICE-ID" class="headerlink" title="DEVICE_ID"></a>DEVICE_ID</h3><ul>
<li><p>IMEI（International Mobile EquipmentIdentity）<br>是国际移动设备身份码的缩写，由15为数字组成，它与每台手机一一对应，该码是全世界唯一的。</p>
</li>
<li><p>MEID（Mobile Equipment Identifier）<br>全球唯一的56bit CDMA制式移动终端标识号。标示号会被烧入到终端里，不可修改。可用来对CDMA制式移动设备进行身份识别和跟踪，由14位数字组成。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static String getDeviceID(Context context)&#123;</div><div class="line">    TelephonyManager tm = (TelephonyManager)context.getSystemService（Context.TELEPHONY_SERVICE）；</div><div class="line">    return tm.getDeviceID().toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码会根据不同的手机设备返回IMEI，MEID或者ESN码，作为Android手机设备的唯一标识。是不是感觉很简单？ 好吧，让我们看看官方开发者的是怎么说的。</p>
<ul>
<li><p>Non-phones: Wifi-only devices or music players that don’t have telephony hardware just don’t have this kind of unique identifier.</p>
</li>
<li><p>Persistence: On devices which do have this, it persists across device data wipes and factory resets. It’s not clear at all if, in this situation, your app should regard this as the same device.</p>
</li>
<li><p>Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don’t otherwise use or need telephony.</p>
</li>
<li><p>Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for example zeros or asterisks.</p>
</li>
</ul>
<p>看完上面的介绍，感觉自己又被谷歌以及某些厂商们耍弄了一番，但是胳膊拧不过大腿，谁让人家强势呢，找替代方法吧，先去看看物理mac地址，地球人都知道这个玩意是唯一的。</p>
<h3 id="MAC-ADDRESS"><a href="#MAC-ADDRESS" class="headerlink" title="MAC_ADDRESS"></a>MAC_ADDRESS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static String getMacAddress(Context context)&#123;</div><div class="line">    WifiManager wm = (WifiManager)context.getSystemService(Context.WIFI_SERVICE);</div><div class="line">    return wm.getConnectionInfo().getMacAddress();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public static String getBluetoothAddress()&#123;</div><div class="line">    BluetoothAdapter adapter = BluetoothAdapter.getDefauleAdapter();</div><div class="line">    if(adapter == null)&#123;</div><div class="line">        // 不支持蓝牙</div><div class="line">        return &quot;&quot; </div><div class="line">    &#125;</div><div class="line">    if(!adapter.isEnabled())&#123;</div><div class="line">        // 蓝牙未打开</div><div class="line">        return &quot;&quot;</div><div class="line">    &#125;</div><div class="line">    return adapter.getAddress();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>哦了，获取到了wifi或者蓝牙的mac地址，还没来得及庆幸一番，一盆凉水又浇了下来。</p>
<ul>
<li>硬件限制：不是所有的设备都有wifi或者蓝牙，硬件不支持，编一个mac地址出来？</li>
<li>获取限制：如果wifi没有打开过，是无法获取mac地址的，蓝牙还要可恨一点，只有在打开的时候才能获取到。</li>
</ul>
<p>Pass，宝宝心里苦，宝宝不说，继续找其他方法。。。</p>
<h3 id="Serial-Number"><a href="#Serial-Number" class="headerlink" title="Serial Number"></a>Serial Number</h3><p>硬件序列，在Android 2.2 以上的设备可以通过android.os.Build.SERIAL获得序列号。没有电话功能的设备上被要求必须提供，手机就看厂商心情了。。。所以经常返回unKnown，大写的PASS！！！</p>
<h3 id="ANDROID-ID"><a href="#ANDROID-ID" class="headerlink" title="ANDROID_ID"></a>ANDROID_ID</h3><p>ANDROID_ID是设备第一次启动时产生和存储的64bit的一个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static String getAndroidId(Context context)&#123;</div><div class="line">    return Settings.Secure.getString(context.getContentResolver),Setting.Secure.ANDROID_ID);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这哥们看起来挺靠谱，但是android的各大厂商们又来刷存在感了。。。</p>
<ul>
<li>官方介绍：它在Android &lt;=2.1 or Android&gt;=2.3的版本是可靠的，但是2.2。。。，当然此缺陷可以忽略不计。。</li>
<li>在某些厂商的设备，有一个bug，每个设备都会产生相同的ANDROID_ID:9774d56d682e549c。别问我为什么，我也不知道。。。</li>
<li>某些厂商会返回null。。。</li>
<li>设备差异：CDMA设备，ANDROID_ID和DEVICE_ID是同一个值。</li>
</ul>
<h3 id="Installtion-UUID"><a href="#Installtion-UUID" class="headerlink" title="Installtion: UUID"></a>Installtion: UUID</h3><p>UUID是官方推荐的一个标识方法，该方法无需访问设备的资源，跟设备类型无关。它是在程序第一次运行后生成一个ID实现的（<strong>自己生成，非系统生成！</strong>），它不是标识设备，而是某一个应用的唯一ID。 </p>
<p>Google Developer Blog 给出了这样一个框架：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class Installation &#123;</div><div class="line">    private static String sID = null;</div><div class="line">    private static final String INSTALLATION = &quot;INSTALLATION&quot;;</div><div class="line"></div><div class="line">    public synchronized static String id(Context context) &#123;</div><div class="line">        if (sID == null) &#123;  </div><div class="line">            File installation = new File(context.getFilesDir(), INSTALLATION);</div><div class="line">            try &#123;</div><div class="line">                if (!installation.exists())</div><div class="line">                    writeInstallationFile(installation);</div><div class="line">                sID = readInstallationFile(installation);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                throw new RuntimeException(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return sID;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static String readInstallationFile(File installation) throws IOException &#123;</div><div class="line">        RandomAccessFile f = new RandomAccessFile(installation, &quot;r&quot;);</div><div class="line">        byte[] bytes = new byte[(int) f.length()];</div><div class="line">        f.readFully(bytes);</div><div class="line">        f.close();</div><div class="line">        return new String(bytes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void writeInstallationFile(File installation) throws IOException &#123;</div><div class="line">        FileOutputStream out = new FileOutputStream(installation);</div><div class="line">        String id = UUID.randomUUID().toString();</div><div class="line">        out.write(id.getBytes());</div><div class="line">        out.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前面说过，Installtion ID 不是设备的唯一标识，它会为不同的应用程序生成不同的ID，并且在程序重新安装后也会生成不同的ID。</p>
<p>到这里我的耐心基本被消磨殆尽。。。</p>
<p>##总结<br>既然通过一种方式，不能保证ID的可靠性，那就采用多个，对比以上的几种方案，决定通过ANDROID_ID,DEVICE_ID,INSTALLTION_ID来生成一个ID，先来看下此方案的注意事项：</p>
<ul>
<li>目前的手机基本上都在4.0以上，所以ANDROID_ID一般可用，可以通过其生成一个UUID</li>
<li>厂商的定制导致ANDROID_ID返回9774d56d682e549c和Null,用DeviceID替代ANDROID_ID，作为种子生成一个UUID</li>
<li>以上都无法获取，生成一个InstalltionID</li>
<li>当需要生成一个deviceid时，即绑定设备时，采用该方案，不需要绑定设备，InstalltionID就可满足需求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">import android.content.Context;</div><div class="line">import android.content.SharedPreferences;</div><div class="line">import android.provider.Settings.Secure;</div><div class="line">import android.telephony.TelephonyManager;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.util.UUID;</div><div class="line"></div><div class="line">public class DeviceUUIDFactory&#123;</div><div class="line">    private static final String PREFS_FILE = &quot;device_id.xml&quot;;</div><div class="line">    private static final String PREFFS_DEVICE_ID = &quot;device_id&quot;;</div><div class="line">    private static UUID uuid;</div><div class="line">    public DeviceUUIDFactory (Context context)&#123;</div><div class="line">        if(uuid == null)&#123;</div><div class="line">            synchronized (DeviceUUIDFactory.class)&#123;</div><div class="line">                if(uuid == null)&#123;</div><div class="line">                    final SharedPreferences prefs = context.getSharedPreferences(PREFS_FILE,0);</div><div class="line">                    final String id = prefs.getString(PREFFS_DEVICE_ID,null);</div><div class="line">                    if(id != null)&#123;</div><div class="line">                         uuid = UUID.fromString(id);</div><div class="line">                    &#125;else&#123;</div><div class="line">                        final String androidID = Secure.getString(context.getContentResolver(),Secure.ANDROID_ID);</div><div class="line">                        try&#123;</div><div class="line">                            if(!&quot;9774d56d682e549c&quot;.equals(androidID))&#123;</div><div class="line">                                uuid = UUID.nameUUIDFROMBYTES(androidID.getBytes(&quot;utf8&quot;));</div><div class="line">                            &#125;</div><div class="line">                            else&#123;</div><div class="line">                                final String deviceId = ((TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId();</div><div class="line">                                uuid = deviceId!=null?UUID.nameUUIDFromBytes(deviceId.getBytes(&quot;utf8&quot;)):UUID.randomUUID();</div><div class="line">                            &#125;</div><div class="line">                        &#125;catch(UnsupportedEncodingException e)&#123;</div><div class="line">                            throw new RuntimeException(e);</div><div class="line">                        &#125;</div><div class="line">                        prefs.edit().putString(PREFFS_DEVICE_ID,uuid.toString()).commit();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android设备有很多的”标识”号，比如常见的IMEI，SerizalNumber，UUID等概念。既然这样，那我们就把这些概念拉出来溜溜，对这些标识做一个总结，看看Android为毛整这么多标识。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Git 使用入门</title>
    <link href="http://yoursite.com/2017/06/15/Git-%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/06/15/Git-使用入门/</id>
    <published>2017-06-15T07:17:48.000Z</published>
    <updated>2017-06-16T03:42:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-客户端安装"><a href="#Git-客户端安装" class="headerlink" title="Git 客户端安装"></a>Git 客户端安装</h1><p>讲真，这个对大家应该都没有难度。。。提供下载地址，自己玩</p>
<h2 id="Mac-安装"><a href="#Mac-安装" class="headerlink" title="Mac 安装"></a>Mac 安装</h2><ul>
<li>图形化的Git安装工具 <a href="https://sourceforge.net/projects/git-osx-installer/files/" target="_blank" rel="external">点我</a></li>
<li><a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="external">HomeBrew</a> 安装 </li>
</ul>
<h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><p><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git For Windows</a>  提供命令行 Git Bash 和图形化 Git GUI</p>
<hr>
<a id="more"></a>
<h1 id="玩转本地仓库"><a href="#玩转本地仓库" class="headerlink" title="玩转本地仓库"></a>玩转本地仓库</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">Initialized empty Git repository in /Users/LeoPoldCrossing/Development/work/android-pay-git-test/.git/</div></pre></td></tr></table></figure>
<p>android-pay-git-test 目录下多了一个 .git 目录，意味着该目录已经成为可以通过Git管理的Repository。</p>
<blockquote>
<p>Tips: .git 目录不要乱动~切记。。。</p>
</blockquote>
<h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add     : 将修改添加到暂存区</div><div class="line">$ git commit  : 提交代码</div></pre></td></tr></table></figure>
<blockquote>
<p>Tips: </p>
<ol>
<li>git commit -m “description”</li>
<li>git add . 可以add所有修改文件</li>
</ol>
</blockquote>
<h3 id="查看状态及修改内容"><a href="#查看状态及修改内容" class="headerlink" title="查看状态及修改内容"></a>查看状态及修改内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git status        : 查看状态</div><div class="line">$ git diff &lt;file&gt;   : 查看修改的内容</div></pre></td></tr></table></figure>
<blockquote>
<p>Tips:<br>多使用 git status 命令查看当前状态</p>
</blockquote>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git log    // 查看提交历史</div><div class="line">commit f91b85aa785e5ecb84f8a103dc8646bee17878fe</div><div class="line">Author: LeoPoldCrossing &lt;18911378366@163.com&gt;</div><div class="line">Date:   Tue Jun 13 12:37:58 2017 +0800</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git log --pretty=oneline</div><div class="line">f91b85aa785e5ecb84f8a103dc8646bee17878fe first commit</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reflog // 查看提交命令历史</div><div class="line">f91b85a HEAD@&#123;0&#125;: commit (initial): first commit</div></pre></td></tr></table></figure>
<h3 id="后悔药-撤销修改及版本回退"><a href="#后悔药-撤销修改及版本回退" class="headerlink" title="后悔药-撤销修改及版本回退"></a>后悔药-撤销修改及版本回退</h3><ul>
<li><p>场景一： 仅修改了工作区，直接丢弃工作区的修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- &lt;file&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>场景二： 修改已经提交到暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD &lt;file&gt;</div><div class="line">$ git checkout -- &lt;file&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>场景三： 修改已经 commit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard &lt;版本&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>Tips : </p>
<ol>
<li>HEAD 表示当前版本，上一个版本为HEAD^，上上个版本 HEAD^^，之前的第100个版本 HEAD~100</li>
<li>每一次 commit 都会生成一个唯一SHA1值，我们称之为 commit id，可以根据该 id 准确的定位到某一版本。</li>
</ol>
</blockquote>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm &lt;file&gt;</div></pre></td></tr></table></figure>
<p>执行 rm 命令后，文件在工作区删除，我们可以使用 checkout 找回或者 commit提交删除。</p>
<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">创建并切换分支</div><div class="line">$ git branch &lt;branch name&gt;</div><div class="line">$ git checkout &lt;branch name&gt;</div><div class="line">or</div><div class="line">$ git checkout -b &lt;branch name&gt;</div></pre></td></tr></table></figure>
<h3 id="查看分支列表"><a href="#查看分支列表" class="headerlink" title="查看分支列表"></a>查看分支列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git branch </div><div class="line">* dev     // * 标注为当前所在分支</div><div class="line">  master</div></pre></td></tr></table></figure>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 删除已合并分支</div><div class="line">$ git branch -d &lt;branch name&gt;</div><div class="line">// 强行删除</div><div class="line">$ git branch -D &lt;branch name&gt;</div></pre></td></tr></table></figure>
<h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge &lt;branch name&gt;</div></pre></td></tr></table></figure>
<h3 id="查看分支合并日志"><a href="#查看分支合并日志" class="headerlink" title="查看分支合并日志"></a>查看分支合并日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log --graph --pretty=oneline --abbrev-commit</div></pre></td></tr></table></figure>
<h3 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h3><p>冲突的原因：不同的分支修改同一位置的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD   // 当前分支</div><div class="line">git#Git冲突master分支</div><div class="line">=======         </div><div class="line">git#Git冲突分支</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; conflictTest // 冲突分支</div></pre></td></tr></table></figure></p>
<p>删除多余内容，保留所需内容，提交即可。</p>
<h3 id="分支操作流程"><a href="#分支操作流程" class="headerlink" title="分支操作流程"></a>分支操作流程</h3><blockquote>
<p>初始状态：HEAD 执行 master<br>创建分支：创建dev指针，指向 master 相同的 commit<br>切换分支：HEAD 指向 dev<br>修改分支：dev 指向最新的 commit，master指向不变，HEAD 跟随 dev<br>切换至master：HEAD 指向 master 的 commit<br>合并dev分支：master 指向 dev 最新的commit，HEAD 跟随 master </p>
</blockquote>
<h3 id="分支合并模式"><a href="#分支合并模式" class="headerlink" title="分支合并模式"></a>分支合并模式</h3><ul>
<li>Fast-forward: “快进模式”,直接将 master 指向 dev 最新的 commit。Git默认采用这种模式，合并速度快，删除分支后，会丢失分支信息。</li>
</ul>
<p>fast-forward 合并分支<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git merge dev</div><div class="line">Updating <span class="number">732</span>a5c7..c8898aa</div><div class="line">Fast-forward</div><div class="line">markets.txt | <span class="number">3</span> ++-</div><div class="line"><span class="number">1</span> file changed, <span class="number">2</span> insertions(+), <span class="number">1</span> deletion(-)</div></pre></td></tr></table></figure></p>
<p>合并日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$  git log --graph --pretty=oneline --abbrev-commit</div><div class="line">*   65df01a resolve conflict</div><div class="line">|\  </div><div class="line">| * 0b22857 conflict branch commit</div><div class="line">* | cfadfe0 conflict master</div><div class="line">|/  </div><div class="line">* c8898aa git branch test</div><div class="line">* 732a5c7 android-pay first commit</div></pre></td></tr></table></figure></p>
<ul>
<li>–no-ff模式:不使用快进模式，该模式在merge时生成一个新的commit，需要 -m 描述信息，git log 命令可以查看分支历史提交信息</li>
</ul>
<p>–no-ff 合并分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m &quot;merge form no-ff branch&quot; dev</div><div class="line"># 因为本次合并会创建一个新的commit ，所以需要 -m 参数</div><div class="line">Merge made by the &apos;recursive&apos; strategy.</div><div class="line"> markets.txt | 1 +</div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure></p>
<p>合并日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git log --graph --pretty=oneline --abbrev-commit</div><div class="line">*   2d45171 merge form no-ff branch</div><div class="line">|\  </div><div class="line">| * 6907c87 --no-ff branch</div><div class="line">|/  </div><div class="line">*   65df01a resolve conflict</div><div class="line">|\  </div><div class="line">| * 0b22857 conflict branch commit</div><div class="line">* | cfadfe0 conflict master</div><div class="line">|/  </div><div class="line">* c8898aa git branch test</div><div class="line">* 732a5c7 android-pay first commit</div></pre></td></tr></table></figure></p>
<h2 id="临时存储"><a href="#临时存储" class="headerlink" title="临时存储"></a>临时存储</h2><p>场景：开发过程中，我们需要切换到另一分支，当前分支的修改不能或不想提交，又不能丢弃。。。怎么玩？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 储存工作现场</div><div class="line">$ git stash     </div><div class="line">// 查看 stash 列表</div><div class="line">$ git stash list</div><div class="line">// 恢复工作现场 </div><div class="line">$ git stash apply</div><div class="line">$ git satsh apply stash@&#123;0&#125; </div><div class="line">// 删除工作现场</div><div class="line">$ git stash drop</div><div class="line">$ git satsh drop stash@&#123;0&#125;</div><div class="line">// 恢复，并删除 stash </div><div class="line">$ git stash pop </div><div class="line">$ git satsh pop stash@&#123;0&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="远程仓库配置"><a href="#远程仓库配置" class="headerlink" title="远程仓库配置"></a>远程仓库配置</h2><h3 id="SSH-设置"><a href="#SSH-设置" class="headerlink" title="SSH 设置"></a>SSH 设置</h3><p>Git 本地仓库和远程仓库之前数据传输使用ssh协议。</p>
<ul>
<li><p>SSH key 生成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div><div class="line">...</div><div class="line">可以起个文件名</div><div class="line">...</div><div class="line">$ cat ~/.ssh/&lt;ssh file name&gt;.pub // 复制公钥，远程仓库设置</div></pre></td></tr></table></figure>
</li>
<li><p>Gitlab 设置 SSH Key<br><img src="http://static.zybuluo.com/LeoPoldCrossing/nk7noj9a8ls20rf5ahh1spo8/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-13%2016.33.52.png" alt="屏幕快照 2017-06-13 16.33.52.png-83.1kB"></p>
</li>
<li><p>验证链接是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line">Hi LeoPoldCrossing! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="多SSH管理"><a href="#多SSH管理" class="headerlink" title="多SSH管理"></a>多SSH管理</h3><p>多个Git平台账号共存，比如 Github 和 Gitlab ，如何处理？ </p>
<ul>
<li><p>生成对应平台的 SSH key</p>
</li>
<li><p>添加ssh私钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa_github</div><div class="line">$ ssh-add ~/.ssh/id_rsa_gitlab</div></pre></td></tr></table></figure>
</li>
<li><p>创建修改config文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># gitlab</div><div class="line">    Host gitlab.jinhui365.cn</div><div class="line">    HostName gitlab.jinhui365.cn  </div><div class="line">    PreferredAuthentications publickey</div><div class="line">    IdentityFile ~/.ssh/id_rsa_gitlab</div><div class="line">    User gitlab username</div><div class="line"># github</div><div class="line">    Host github.com</div><div class="line">    HostName github.com</div><div class="line">    PreferredAuthentications publickey</div><div class="line">    IdentityFile ~/.ssh/id_rsa_github</div><div class="line">    User github username</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="用户名和邮箱配置"><a href="#用户名和邮箱配置" class="headerlink" title="用户名和邮箱配置"></a>用户名和邮箱配置</h3><ul>
<li><p>全局配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;yourname&quot;  </div><div class="line">git config --global user.email &quot;youremail&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>局部配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name &quot;yourname&quot;  </div><div class="line">git config user.email &quot;youremail&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>重置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global --unset user.name &quot;yourname&quot;</div><div class="line">git config --global --unset user.email &quot;youremail&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>这个很简单，就不演示了~ Github 或者 Gitlab 上找 New Reposity。得到类似下面的地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git@gitlab.jinhui365.cn:android/android-pay.git</div></pre></td></tr></table></figure></p>
<h3 id="关联仓库"><a href="#关联仓库" class="headerlink" title="关联仓库"></a>关联仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin &lt;仓库地址&gt;</div></pre></td></tr></table></figure>
<h3 id="查看仓库信息"><a href="#查看仓库信息" class="headerlink" title="查看仓库信息"></a>查看仓库信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 查看信息</div><div class="line">$ git remote </div><div class="line">origin</div><div class="line">// 查看详细信息</div><div class="line">$ git remote -v </div><div class="line">origin	git@gitlab.jinhui365.cn:android/android-pay.git (fetch)</div><div class="line">origin	git@gitlab.jinhui365.cn:android/android-pay.git (push)</div></pre></td></tr></table></figure>
<h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 首次推送</div><div class="line">$ git push -u &lt;repository&gt; &lt;branch name&gt; </div><div class="line">// 再次推送</div><div class="line">$ git push &lt;repository&gt; &lt;branch name&gt;</div></pre></td></tr></table></figure>
<h3 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 查看所有修改</div><div class="line">git diff &lt;repository&gt;/&lt;branch name&gt;...HEAD</div><div class="line">// 查看某一个文件的修改</div><div class="line">git diff &lt;repository&gt;/&lt;branch name&gt;...HEAD &lt;file&gt;</div></pre></td></tr></table></figure>
<h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><ul>
<li><p>克隆仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone &lt;仓库地址&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>拉取代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull &lt;repository&gt; &lt;branch name&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="关联分支"><a href="#关联分支" class="headerlink" title="关联分支"></a>关联分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch –set-upstream-to=&lt;repository&gt;/&lt;branch name&gt;</div></pre></td></tr></table></figure>
<p>分支关联后，git pull 或者 push 直接使用。。。</p>
<hr>
<h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ul>
<li><p>默认标签,打在HEAD</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag &lt;tag name&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>指定commit </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag &lt;tag name&gt; &lt;commit id&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>创建说明标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -a &lt;tag name&gt; &quot;description&quot; &lt;commit id&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><ul>
<li><p>查看列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag</div></pre></td></tr></table></figure>
</li>
<li><p>查看标签信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show &lt;tag name&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Push-标签"><a href="#Push-标签" class="headerlink" title="Push  标签"></a>Push  标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin &lt;tag name&gt;</div></pre></td></tr></table></figure>
<h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><ul>
<li><p>本地删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -d &lt;tag name&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>远程删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git tag -d &lt;tag name&gt;</div><div class="line">$ git push origin :refs/tags/&lt;tag name&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="拉取TAG代码"><a href="#拉取TAG代码" class="headerlink" title="拉取TAG代码"></a>拉取TAG代码</h2><ul>
<li><p>不可编辑</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout &lt;tag name&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>可编辑:从TAG checkout 一个分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b &lt;branch name&gt; &lt;tag name&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-客户端安装&quot;&gt;&lt;a href=&quot;#Git-客户端安装&quot; class=&quot;headerlink&quot; title=&quot;Git 客户端安装&quot;&gt;&lt;/a&gt;Git 客户端安装&lt;/h1&gt;&lt;p&gt;讲真，这个对大家应该都没有难度。。。提供下载地址，自己玩&lt;/p&gt;
&lt;h2 id=&quot;Mac-安装&quot;&gt;&lt;a href=&quot;#Mac-安装&quot; class=&quot;headerlink&quot; title=&quot;Mac 安装&quot;&gt;&lt;/a&gt;Mac 安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;图形化的Git安装工具 &lt;a href=&quot;https://sourceforge.net/projects/git-osx-installer/files/&quot;&gt;点我&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://brew.sh/index_zh-cn.html&quot;&gt;HomeBrew&lt;/a&gt; 安装 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Windows安装&quot;&gt;&lt;a href=&quot;#Windows安装&quot; class=&quot;headerlink&quot; title=&quot;Windows安装&quot;&gt;&lt;/a&gt;Windows安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://git-for-windows.github.io/&quot;&gt;Git For Windows&lt;/a&gt;  提供命令行 Git Bash 和图形化 Git GUI&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="分享" scheme="http://yoursite.com/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>ButterKnife 框架使用详解</title>
    <link href="http://yoursite.com/2017/05/04/Android-ButterKnife-%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/05/04/Android-ButterKnife-框架使用详解/</id>
    <published>2017-05-04T07:00:48.000Z</published>
    <updated>2017-05-04T07:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>findViewById 是每一个 Android 开发者的必经之路，同样也是噩梦。为了提高开发效率，准备在项目中使用 ButterKnife（PS：感谢JakeWharton大神），本文基于8.5.1 版本官方文档翻译，不同的版本在用法上可能会差异，实际使用时，请参考官网文档。<br><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">Github 地址</a><br><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">官方文档</a></p>
<a id="more"></a>
<h1 id="ButterKnife-介绍"><a href="#ButterKnife-介绍" class="headerlink" title="ButterKnife 介绍"></a>ButterKnife 介绍</h1><ul>
<li>Android 开发者的福音，专为 Android View 设计的绑定注解，专治 findViewById。</li>
<li>配合 AndroidStudio 插件使用，一键生成 view field。。。爽歪歪</li>
<li>还有其他很多有用的注解。。。</li>
</ul>
<h1 id="ButterKnife引入"><a href="#ButterKnife引入" class="headerlink" title="ButterKnife引入"></a>ButterKnife引入</h1><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  compile <span class="string">'com.jakewharton:butterknife:8.5.1'</span></div><div class="line">  annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:8.5.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Library-Module中使用"><a href="#Library-Module中使用" class="headerlink" title="Library Module中使用"></a>Library Module中使用</h2><p>###在 Module 的 build.gradle 添加如下配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">  repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">   &#125;</div><div class="line">  dependencies &#123;</div><div class="line">    classpath <span class="string">'com.jakewharton:butterknife-gradle-plugin:8.5.1'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line">apply plugin: <span class="string">'com.jakewharton.butterknife'</span></div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用 R2 代替 R<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R2.id.user) EditText username;</div><div class="line">    <span class="meta">@BindView</span>(R2.id.pwd) EditText pwd;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="控件绑定"><a href="#控件绑定" class="headerlink" title="控件绑定"></a>控件绑定</h1><p>用 @BindView 注解，并注明view id，ButterKnife 会自动查找控件，并转换成layout文件中指定的类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R.id.title)</div><div class="line">    TextView title;</div><div class="line">    <span class="meta">@BindView</span>(R.id.subtitle)</div><div class="line">    TextView subtitle;</div><div class="line">    <span class="meta">@BindView</span>(R.id.footer)</div><div class="line">    TextView footer;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.simple_activity);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// TODO Use fields...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="资源绑定"><a href="#资源绑定" class="headerlink" title="资源绑定"></a>资源绑定</h1><p><strong>@BindArray, @BindBitmap, @BindBool, @BindColor, @BindDimen, @BindDrawable, @BindFloat, @BindInt, @BindString</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="meta">@BindString</span>(R.string.title) String title;</div><div class="line">    <span class="meta">@BindDrawable</span>(R.drawable.graphic) Drawable graphic;</div><div class="line">    <span class="meta">@BindColor</span>(R.color.red) <span class="keyword">int</span> red; <span class="comment">// int or ColorStateList field</span></div><div class="line">    <span class="meta">@BindDimen</span>(R.dimen.spacer) Float spacer; <span class="comment">// int (for pixel size) or float (for exact value) field</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="非Activity绑定"><a href="#非Activity绑定" class="headerlink" title="非Activity绑定"></a>非Activity绑定</h1><p>ButterKnife 提供了 bind 的几个重载，只要传入根布局，便可以在任何对象中使用注解绑定。</p>
<p>例如在 Fragment 中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R.id.button1) Button button1;</div><div class="line">    <span class="meta">@BindView</span>(R.id.button2) Button button2;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">        <span class="comment">// TODO Use fields...</span></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有一种比较常见的场景，是 adapter 中的 ViewHolder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View view, ViewGroup parent)</span></span>&#123;</div><div class="line">        ViewHolder holder;</div><div class="line">        <span class="keyword">if</span>(view != <span class="keyword">null</span>)&#123;</div><div class="line">            holder = (ViewHolder) view.getTag();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            view = inflater.inflate(R.layout.whatever,parent,<span class="keyword">false</span>);</div><div class="line">            holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">            view.setTag(holder);</div><div class="line">        &#125;</div><div class="line">        holder.name.setText(<span class="string">"John Doe"</span>);</div><div class="line">        <span class="comment">// etc...</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R.id.title)</div><div class="line">    TextView name;</div><div class="line">    <span class="meta">@BindViewe</span>(R.id.job_title)</div><div class="line">    TextView jobTitle;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>,view)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ButterKnife 可以在任何调用 fingViewById 的地方使用。</p>
<p>提供的其他绑定 API ： </p>
<ul>
<li><p>使用Activity作为跟布局在任意对象中进行绑定。如果你使用了类似MVC的编程模式，你可以对controller使用它的Activity用ButterKnife.bind(this, activity)进行绑定。</p>
</li>
<li><p>使用ButterKnife.bind(this)绑定一个布局的子布局。如果你在布局中使用了<merge>标签并且在自定义的控件构造时inflate这个布局，你可以在inflate之后立即调用它。或者，你可以在onFinishInflate()回调中使用它。</merge></p>
</li>
</ul>
<h1 id="View-Lists"><a href="#View-Lists" class="headerlink" title="View Lists"></a>View Lists</h1><p>一次性将多个 Views 绑定到一个 List 或数组中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindViews</span>(&#123;R.id.first_name,R.id.middle_name,R.id.last_name&#125;)</div><div class="line">List&lt;EditText&gt; nameViews;</div></pre></td></tr></table></figure></p>
<p>我们可以通过 <code>apply</code> 函数在列表中的所有view上执行一个动作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ButterKnife.apply(nameViews,DISABLE);</div><div class="line">ButterKnife.apply(nameViews,ENABLED,<span class="keyword">false</span>);</div></pre></td></tr></table></figure></p>
<p><code>Action</code> 和 <code>Setter</code> 接口指定一些动作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static final ButterKnife.Action&lt;View&gt; DISABLE = new ButterKnife.Action&lt;View&gt;()&#123;</div><div class="line">    @Override</div><div class="line">    public void apply(View view, int index)&#123;</div><div class="line">        view.setEnabled(false);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">static final ButterKnife.Setter&lt;View,Boolean&gt; ENABLED = new ButterKnife.Setter&lt;View,Boolean&gt;()&#123;</div><div class="line">    @Override</div><div class="line">    public void set(View view,Boolean value,int index)&#123;</div><div class="line">        view.setEnabled(value);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Android 中的 <code>Property</code> 属性也可以使用 <code>apply</code> 方法进行设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ButterKnife.apply(nameViews,View.ALPHA,<span class="number">0.0f</span>);</div></pre></td></tr></table></figure></p>
<h1 id="监听器绑定"><a href="#监听器绑定" class="headerlink" title="监听器绑定"></a>监听器绑定</h1><h2 id="事件绑定示例"><a href="#事件绑定示例" class="headerlink" title="事件绑定示例"></a>事件绑定示例</h2><p>监听器可以自动绑定到指定的方法上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnClick</span>(R.id.submit)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(View view)</span></span>&#123;</div><div class="line">    <span class="comment">// TODO something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>监听器方法的参数是可选的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnClick</span>(R.id.submit)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// TODO something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>指定一个特定的类型，ButterKnife 会将它自动转换<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnClick</span>(R.id.submit)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(Button button)</span></span>&#123;</div><div class="line">    button.setText(<span class="string">"Hello!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在一个方法上指定多个 view id ，多个 view 共用一个处理方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@OnClick(&#123;R.id.door1,R.id.door2,R.id.door3&#125;)</div><div class="line">public void pickDoor(DoorView door)&#123;</div><div class="line">    if(door.hasPrizeBehind())&#123;</div><div class="line">        Toast.makeText(this,&quot;You win!&quot;,LENGTH_SHORT).show();</div><div class="line">    &#125;else&#123;</div><div class="line">        Toast.makeText(this,&quot;Try again&quot;,LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>自定义 view 绑定事件监听不需要指定ID<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">Button</span></span>&#123;</div><div class="line">    <span class="meta">@OnClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// todo something!</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ButterKnife-事件监听注解"><a href="#ButterKnife-事件监听注解" class="headerlink" title="ButterKnife 事件监听注解"></a>ButterKnife 事件监听注解</h2><p><img src="http://static.zybuluo.com/LeoPoldCrossing/1ya8vcbqp161x7w6sud4mssv/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-04%2010.46.33.png" alt="屏幕快照 2017-05-04 10.46.33.png-26.3kB"></p>
<p>可以看到，我们常用的事件，ButterKniffe 都提供了注解。</p>
<h2 id="多个方法的监听绑定"><a href="#多个方法的监听绑定" class="headerlink" title="多个方法的监听绑定"></a>多个方法的监听绑定</h2><p>当一个监听器包含多个回调函数时，使用函数的注解能够对其中任何一个函数进行绑定。每一个注解都会绑定到一个默认的回调。你也可以使用callback参数来指定一个其他函数作为回调。</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/3kykjy0w58n01rpoz5bc5snz/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-04%2015.01.15.png" alt="屏幕快照 2017-05-04 15.01.15.png-142kB"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnItemSelected</span>(R.id.list_view)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</div><div class="line">    <span class="comment">// TODO </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@OnItemSelected</span>(value =  R.id.maybe_missing,callback = NOTHING_SELSECTED)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// TODO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="解除绑定"><a href="#解除绑定" class="headerlink" title="解除绑定"></a>解除绑定</h1><p>Fragment 的生命周期和Activity是不同的。如果在 <code>onCreateView</code> 中绑定了 Fragment，我们应该在 <code>onDestoryView</code> 方法中解除绑定。ButterKnife 返回了 Unbinder 实例来完成这个操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R.id.button1) Button button1;</div><div class="line">    <span class="meta">@BindView</span>(R.id.button2) Button button2;</div><div class="line">    <span class="keyword">private</span> Unbinder unbinder；</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</div><div class="line">        unbinder = ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">        <span class="comment">// TODO Use fields...</span></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroyView();</div><div class="line">        unbinder.unbind();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="可选绑定"><a href="#可选绑定" class="headerlink" title="可选绑定"></a>可选绑定</h1><p>默认情况下， @Bind 和 监听绑定是必须得，如果目标view没有找到的话，ButterKnife会抛出异常。<br>我们可以通过 @Nullable 标注字段或者 @Optional 标注方法，防止异常的抛出，创建可选的绑定。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span> <span class="meta">@BindView</span>(R.id.might_not_be_there) TextView mightNotBeThere;</div><div class="line"></div><div class="line"><span class="meta">@Optional</span> <span class="meta">@OnClick</span>(R.id.maybe_missing) <span class="function"><span class="keyword">void</span> <span class="title">onMaybeMissingClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>ButterKnife 提供了 findViewById 方法的简化版： findById，可以在Activity，View 和 Dialog 中查找view。 它使用泛型对返回值类型进行自动转换，不需要我们进行强转。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, <span class="keyword">null</span>);</div><div class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);</div><div class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);</div><div class="line">ImageView photo = ButterKnife.findById(view, R.id.photo);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;findViewById 是每一个 Android 开发者的必经之路，同样也是噩梦。为了提高开发效率，准备在项目中使用 ButterKnife（PS：感谢JakeWharton大神），本文基于8.5.1 版本官方文档翻译，不同的版本在用法上可能会差异，实际使用时，请参考官网文档。&lt;br&gt;&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot;&gt;Github 地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Gson 泛型封装</title>
    <link href="http://yoursite.com/2017/04/17/Gson-%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2017/04/17/Gson-泛型封装/</id>
    <published>2017-04-17T09:40:48.000Z</published>
    <updated>2017-04-18T01:38:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言： 在《Gson正确使用姿势(一)》的 Gson 泛型使用一节中介绍了如何使用泛型来简化POJO的设计，但是每次都要写 <code>new TypeToken&lt;XXX&gt;(){};</code>, 你能忍么？ 我不能。。。本文主要介绍如何去将泛型的使用封装起来。</p>
<a id="more"></a>
<h1 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h1><p>还是使用项目中的json数据格式</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"message"</span>:&#123;</div><div class="line">        <span class="attr">"code"</span>:<span class="string">"0"</span></div><div class="line">        <span class="string">"message"</span>:<span class="string">"success"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"data"</span>:&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"message"</span>:&#123;</div><div class="line">        <span class="attr">"code"</span>:<span class="string">"0"</span></div><div class="line">        <span class="string">"message"</span>:<span class="string">"success"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"data"</span>:[]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="方法原型"><a href="#方法原型" class="headerlink" title="方法原型"></a>方法原型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 处理 data 为 Object 的情况</div><div class="line">public static &lt;T&gt; Result&lt;T&gt; fromJsonObject(Reader reader,Class&lt;T&gt; class)&#123;&#125;</div><div class="line">// 处理 data 为 array 的情况</div><div class="line">public static &lt;T&gt; Result&lt;List&lt;T&gt;&gt; fromJsonArray(Reader reader,Class&lt;T&gt; clazz)&#123;&#125;</div></pre></td></tr></table></figure>
<h1 id="封装步骤"><a href="#封装步骤" class="headerlink" title="封装步骤"></a>封装步骤</h1><p>封装最重要的就是获取我们需要Type，使用 java 提供的 ParameterizedType 接口</p>
<h2 id="实现一个简易的ParameterizedType"><a href="#实现一个简易的ParameterizedType" class="headerlink" title="实现一个简易的ParameterizedType"></a>实现一个简易的ParameterizedType</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTypeImpl</span> <span class="keyword">implements</span> <span class="title">ParameterizedType</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class raw;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type[] args;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterizedTypeImpl</span><span class="params">(Class raw, Type[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.raw = raw;</div><div class="line">        <span class="keyword">this</span>.args = args != <span class="keyword">null</span> ? args : <span class="keyword">new</span> Type[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Type[] getActualTypeArguments() &#123;</div><div class="line">        <span class="keyword">return</span> args;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getRawType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> raw;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getOwnerType</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="生成Gson-需要的泛型"><a href="#生成Gson-需要的泛型" class="headerlink" title="生成Gson 需要的泛型"></a>生成Gson 需要的泛型</h2><h3 id="解析data是Object的情况"><a href="#解析data是Object的情况" class="headerlink" title="解析data是Object的情况"></a>解析data是Object的情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static &lt;T&gt; Result&lt;T&gt; fromJsonObject(Reader reader,Class&lt;T&gt; clazz)&#123;</div><div class="line">    Type type = new ParameterizedTypeImpl(Result.class,new Class[]&#123;clazz&#125;);</div><div class="line">    return Gson.fromJson(reader,type);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解析data是array的情况"><a href="#解析data是array的情况" class="headerlink" title="解析data是array的情况"></a>解析data是array的情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static &lt;T&gt; Result&lt;List&lt;T&gt;&gt; fromJsonArray(Reader reader, Class&lt;T&gt; clazz)&#123;</div><div class="line">    // 生成 List&lt;T&gt; 的 type </div><div class="line">    Type listType = new ParameterizedTypeImpl(List.class,new Class[]&#123;class&#125;);</div><div class="line">    // 生成 Result&lt;List&lt;T&gt;&gt; 的 type</div><div class="line">    Type type = new ParameterizedTypeImpl(Result.class,new Type[]&#123;listTYpe&#125;);</div><div class="line">    return Gson.fromJson(reader,type);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言： 在《Gson正确使用姿势(一)》的 Gson 泛型使用一节中介绍了如何使用泛型来简化POJO的设计，但是每次都要写 &lt;code&gt;new TypeToken&amp;lt;XXX&amp;gt;(){};&lt;/code&gt;, 你能忍么？ 我不能。。。本文主要介绍如何去将泛型的使用封装起来。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Gson" scheme="http://yoursite.com/tags/Gson/"/>
    
  </entry>
  
  <entry>
    <title>Gson 正确打开姿势（二）</title>
    <link href="http://yoursite.com/2017/04/17/Gson-%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/17/Gson-正确使用姿势（二）/</id>
    <published>2017-04-17T03:40:48.000Z</published>
    <updated>2017-04-18T01:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GsonBuilder-初探"><a href="#GsonBuilder-初探" class="headerlink" title="GsonBuilder 初探"></a>GsonBuilder 初探</h1><p>Gson 类提供的API满足我们大部分的使用场景，但是有时我们需要更强大的功能，这时候就需要使用 GsonBuilder。<br>GsonBuilder，见名知意，它用于构建Gson的实例，用来改变Gson的默认配置。</p>
<a id="more"></a>
<h2 id="GsonBuilder-用法"><a href="#GsonBuilder-用法" class="headerlink" title="GsonBuilder 用法"></a>GsonBuilder 用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 返回自定义的Gson实例。</div><div class="line">Gson gson = new GsonBuilder()</div><div class="line">            // 各种配置</div><div class="line">            .creat();</div></pre></td></tr></table></figure>
<p>我们来看一个示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">public</span> String email;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">User user = <span class="keyword">new</span> User(<span class="string">"Leo"</span>,<span class="number">28</span>);</div><div class="line">System.out.println(gson.toJson(user)); <span class="comment">//&#123;"name":"Leo","age":28&#125;</span></div></pre></td></tr></table></figure>
<p>从结果可以看出email字段，在输出的json串中没有体现。如果我们需要通过日志输出查看User中所有的字段。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</div><div class="line">            .serializeNulls()</div><div class="line">            .create();</div><div class="line">User user = <span class="keyword">new</span> User(<span class="string">"Leo"</span>,<span class="number">28</span>);</div><div class="line">System.out.println(gson.toJson(user)); <span class="comment">//&#123;"name":"Leo","age":28,"email":null&#125;</span></div></pre></td></tr></table></figure></p>
<p>再来看一些高级点的功能，格式化输出，日期时间等<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</div><div class="line">        <span class="comment">//序列化null</span></div><div class="line">        .serializeNulls()</div><div class="line">        <span class="comment">// 设置日期时间格式，另有2个重载方法</span></div><div class="line">        <span class="comment">// 在序列化和反序化时均生效</span></div><div class="line">        .setDateFormat(<span class="string">"yyyy-MM-dd"</span>)</div><div class="line">        <span class="comment">// 禁此序列化内部类</span></div><div class="line">        .disableInnerClassSerialization()</div><div class="line">        <span class="comment">//生成不可执行的Json, 多了 )]&#125;' 这4个字符）</span></div><div class="line">        .generateNonExecutableJson()</div><div class="line">        <span class="comment">//禁止转义html标签</span></div><div class="line">        .disableHtmlEscaping()</div><div class="line">        <span class="comment">//格式化输出</span></div><div class="line">        .setPrettyPrinting()</div><div class="line">        .create();</div></pre></td></tr></table></figure></p>
<h1 id="字段过滤"><a href="#字段过滤" class="headerlink" title="字段过滤"></a>字段过滤</h1><p>在项目开发过程中，我们有些字段是不需要进行序列化的，那么在序列化时，我们就要将这些字段过滤，让我们来看一下 Gson 如何解决的这个问题，它提供四种方式：</p>
<h2 id="基于-Expose-注解"><a href="#基于-Expose-注解" class="headerlink" title="基于 @Expose 注解"></a>基于 @Expose 注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Expose &#123;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">   * If &#123;<span class="doctag">@code</span> true&#125;, the field marked with this annotation is written out in the JSON while</div><div class="line">   * serializing. If &#123;<span class="doctag">@code</span> false&#125;, the field marked with this annotation is skipped from the</div><div class="line">   * serialized output. Defaults to &#123;<span class="doctag">@code</span> true&#125;.</div><div class="line">   * <span class="doctag">@since</span> 1.4</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">serialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * If &#123;<span class="doctag">@code</span> true&#125;, the field marked with this annotation is deserialized from the JSON.</div><div class="line">   * If &#123;<span class="doctag">@code</span> false&#125;, the field marked with this annotation is skipped during deserialization. </div><div class="line">   * Defaults to &#123;<span class="doctag">@code</span> true&#125;.</div><div class="line">   * <span class="doctag">@since</span> 1.4</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deserialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看源码注释，我们得知： @Expose 有两个属性 serialize 和 deserialize<br>，默认值为 true。<br>|属性|true|false|<br>|–|–|<br>|serialize|序列化|不序列化|<br>|deserialize|反序列化|不反序列化|</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">    <span class="meta">@Expose</span></div><div class="line">    <span class="keyword">public</span> String name;<span class="comment">// 序列化和反序列化都生效</span></div><div class="line">    <span class="meta">@Expose</span>(deserialize=<span class="keyword">true</span>;serialize=<span class="keyword">false</span>) </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;<span class="comment">// 序列化不生效，反序列化生效</span></div><div class="line">    <span class="meta">@Expose</span>(deserialize=<span class="keyword">false</span>;serialize=<span class="keyword">true</span>)</div><div class="line">    <span class="keyword">public</span> String email; <span class="comment">// 序列化生效，反序列化不生效</span></div><div class="line">    <span class="meta">@Expose</span>(deserialize=<span class="keyword">false</span>;serialize=<span class="keyword">false</span>) ： 可以不写</div><div class="line">    <span class="keyword">public</span> String des; <span class="comment">// 序列化和反序列化都不生效 </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Expose 注解必须配合 GsonBuilder 使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</div><div class="line">            .excludeFieldsWithoutExposeAnnotation()</div><div class="line">            .create();</div></pre></td></tr></table></figure></p>
<h2 id="基于版本-setVersion"><a href="#基于版本-setVersion" class="headerlink" title="基于版本 setVersion()"></a>基于版本 setVersion()</h2><p>Gson 另外提供了两个注解 @Since 和 @Util ，配合setVersion(double version) 使用。当然我们还是通过代码来演示：</p>
<ul>
<li>创建Gson实例 调用 setVersion(),设置版本为1.0<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Gson gson = new GsonBuilder()</div><div class="line">            .setVersion(1.0)</div><div class="line">            .create();</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class User &#123;</div><div class="line">    @Since(1.0) private String emailAddress;</div><div class="line">    @Since(1.1) private Address address;</div><div class="line">    @Util(1.0)  private String password;</div><div class="line">    @Util(1.1)  private String username;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>@Since<br>当前版本<strong>大于或等于</strong>@Since标注版本时，字段可以序列化和反序列化。<br>上面代码 emailAddress 可以序列化和反序列化，address 不可以。</p>
</li>
<li><p>@Util<br>当前版本<strong>小于</strong>@Util标注版本时，字段可以序列化和反序列化。<br>上面代码 username 可以序列化和反序列化，password 不可以。</p>
</li>
</ul>
<p>注：当一个字段被 @Since 和 @Util 同时注解时，需两者同时满足条件。</p>
<h2 id="基于访问修饰符"><a href="#基于访问修饰符" class="headerlink" title="基于访问修饰符"></a>基于访问修饰符</h2><p>常用的修饰符 public、static、final、private、protected等等。<br>我们可以通过 excludeFieldsWithModifiers(int… modifiers)来过滤字段。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModifierSample</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> String finalField = <span class="string">"final"</span>;</div><div class="line">    <span class="keyword">static</span> String staticField = <span class="string">"static"</span>;</div><div class="line">    <span class="keyword">public</span> String publicField = <span class="string">"public"</span>;</div><div class="line">    <span class="keyword">protected</span> String protectedField = <span class="string">"protected"</span>;</div><div class="line">    String defaultField = <span class="string">"default"</span>;</div><div class="line">    <span class="keyword">private</span> String privateField = <span class="string">"private"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用GsonBuilder.excludeFieldsWithModifiers构建gson,支持int形的可变参数，值由java.lang.reflect.Modifier提供，下面的程序排除了privateField 、 finalField 和staticField 三个字段。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</div><div class="line">        .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.STATIC, Modifier.PRIVATE)</div><div class="line">        .create();</div></pre></td></tr></table></figure></p>
<h2 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h2><p>自定义规则相对麻烦一些，但是更强大，更灵活。<br>Gson提供了ExclusionStrategy接口，同样需要使用GsonBuilder,相关API 分别是addSerializationExclusionStrategy(序列化)和addDeserializationExclusionStrategy（反序列化）。下面我们以序列化为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Gson gson = new GsonBuilder()</div><div class="line">        .addSerializationExclusionStrategy(new ExclusionStrategy() &#123;</div><div class="line">            @Override</div><div class="line">            public boolean shouldSkipField(FieldAttributes f) &#123;</div><div class="line">                // 这里作判断，决定要不要排除该字段,return true为排除</div><div class="line">                if (&quot;finalField&quot;.equals(f.getName())) return true; //按字段名排除</div><div class="line">                Expose expose = f.getAnnotation(Expose.class); </div><div class="line">                if (expose != null &amp;&amp; expose.deserialize() == false) return true; //按注解排除</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public boolean shouldSkipClass(Class&lt;?&gt; clazz) &#123;</div><div class="line">                // 直接排除某个类 ，return true为排除</div><div class="line">                return (clazz == int.class || clazz == Integer.class);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .create();</div></pre></td></tr></table></figure></p>
<h1 id="序列化命名自定义"><a href="#序列化命名自定义" class="headerlink" title="序列化命名自定义"></a>序列化命名自定义</h1><p>涉及到的API ： </p>
<ol>
<li>GsonBuilder :  setFieldNamingPolicy() 和 setFieldNamingStrategy()</li>
<li>FieldNamingStrategy 接口 </li>
<li>实现了FieldNamingStrategy 的枚举类 FieldNamingPolicy</li>
</ol>
<h2 id="Gson-提供的默认实现"><a href="#Gson-提供的默认实现" class="headerlink" title="Gson 提供的默认实现"></a>Gson 提供的默认实现</h2><p>setFieldNamingPolicy() 结合 FieldNamingPolicy<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</div><div class="line">        .setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE)           .create();</div><div class="line">Log.e(<span class="string">"GsonDemo"</span>, gson.toJson(repository));</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>FieldNamingPolicy</th>
<th>输出结果（emailAddress字段为例）</th>
</tr>
</thead>
<tbody>
<tr>
<td>IDENTITY</td>
<td>{“emailAddress”:”leo@example.com”}</td>
</tr>
<tr>
<td>LOWER_CASE_WITH_DASHES</td>
<td>{“email-address”:”leo@example.com”}</td>
</tr>
<tr>
<td>LOWER_CASE_WITH_UNDERSCORES</td>
<td>{“email_address”:”leo@example.com”}</td>
</tr>
<tr>
<td>UPPER_CAMEL_CASE</td>
<td>{“EmailAddress”:”leo@example.com”}</td>
</tr>
<tr>
<td>UPPER_CAMEL_CASE_WITH_SPACES</td>
<td>{“Email Address”:”leo@example.com”}</td>
</tr>
</tbody>
</table>
<h2 id="自定义规则-1"><a href="#自定义规则-1" class="headerlink" title="自定义规则"></a>自定义规则</h2><p>setFieldNamingStrategy() 结合 FieldNamingStrategy<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</div><div class="line">        .setFieldNamingStrategy(<span class="keyword">new</span> FieldNamingStrategy() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">translateName</span><span class="params">(Field f)</span> </span>&#123;</div><div class="line">                <span class="comment">//实现自己的规则</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .create();</div></pre></td></tr></table></figure></p>
<p>注： @SerializedName 注解拥有最高优先级，在 @SerializedName 标注的字段上 FieldNamingStrategy 不生效！</p>
<h1 id="随心所欲玩转序列化和反序列化"><a href="#随心所欲玩转序列化和反序列化" class="headerlink" title="随心所欲玩转序列化和反序列化"></a>随心所欲玩转序列化和反序列化</h1><h2 id="TypeAdapter"><a href="#TypeAdapter" class="headerlink" title="TypeAdapter"></a>TypeAdapter</h2><p><code>TypeAdapter</code> 是Gson2.1提供的一个抽象类，用于POJO的序列化和反序列化。主要重写两个方法 write(JsonWriter out, T value) 和 read(JsonReader in)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeAdapter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter out, T value)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">User user = <span class="keyword">new</span> User(<span class="string">"leo"</span>, <span class="number">28</span>,<span class="string">"leo@example.com"</span>);</div><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</div><div class="line">        <span class="comment">//为User注册TypeAdapter</span></div><div class="line">        .registerTypeAdapter(User.class, <span class="keyword">new</span> UserTypeAdapter())</div><div class="line">        .create();</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTypeAdapter</span> <span class="keyword">extends</span> <span class="title">TypeAdapter</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter out, User value)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        out.beginObject();</div><div class="line">        out.name(<span class="string">"name"</span>).value(value.name);</div><div class="line">        out.name(<span class="string">"age"</span>).value(value.age);</div><div class="line">        out.name(<span class="string">"email"</span>).value(value.email);</div><div class="line">        out.endObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        in.beginObject();</div><div class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</div><div class="line">            <span class="keyword">switch</span> (in.nextName()) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">"name"</span>:</div><div class="line">                    user.name = in.nextString();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"age"</span>:</div><div class="line">                    user.age = in.nextInt();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"email"</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">"email_address"</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">"emailAddress"</span>:</div><div class="line">                    user.email = in.nextString();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        in.endObject();</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们为 User.class 注册了 TypeAdapter 之后，操作User.class的 那些@SerializedName、FieldNamingStrategy、@Since、@Until、@Expose，q全部废废，只会调用我们实现的UserTypeAdapter.write(JsonWriter, User) 方法，我们想怎么玩就怎么玩。</p>
<p>当然上面的序列化和反序列化的操作是有缺点的，如果我们想要对多个POJO随心所欲的操作，那么在创建 Gson 实例就要注册很多个 TypeAdapter ，追求代码洁癖的人会疯的。解决这个问题就需要用到 @JsonAdapter 注解。</p>
<h2 id="JsonAdapter"><a href="#JsonAdapter" class="headerlink" title="@JsonAdapter"></a>@JsonAdapter</h2><p>前面提到 @JsonAdapter 可以解决注册多个 TypeAdapter 的问题~ 它用来标注POJO类，接收一个参数，参数必须是 TypeAdapter，JsonSerializer或 JsonDeserializer 中的一个。</p>
<p>使用方法(以User为例)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@JsonAdapter(UserTypeAdapter.class)</div><div class="line">public class User&#123;</div><div class="line">    public String name;</div><div class="line">    public int age;</div><div class="line">    @SerializedName(value=&quot;emialAddress&quot;)</div><div class="line">    public String email;</div><div class="line">    </div><div class="line">    public User()&#123;&#125;</div><div class="line">    </div><div class="line">    public User(String name,int age,String email)&#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">        this.email = email;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用时不用再 GsonBuilder 去注册 UserTypeAdapter 了。</p>
<p>注：</p>
<ul>
<li>@JsonAdapter 仅支持 TypeAdapter 或 TypeAdapterFactory。</li>
<li>@JsonAdapter 的优先级比 GsonBuilder.registerTypeAdapter 的优先级高。</li>
</ul>
<h1 id="JsonDeserializer-与-JsonSerializer"><a href="#JsonDeserializer-与-JsonSerializer" class="headerlink" title="JsonDeserializer 与 JsonSerializer"></a>JsonDeserializer 与 JsonSerializer</h1><p>那么问题来了，我们只想控制序列化过程或者反序列化过程，比如我们后端经常在我们需要double类型数据时，返回空串””，导致我们数据异常，引起崩溃。肿么办？</p>
<p>同样见名知意， JsonDeserializer 可以用控制反序列化，JsonSerializer 控制序列化。</p>
<h2 id="JsonDeserializer-反序列化操作"><a href="#JsonDeserializer-反序列化操作" class="headerlink" title="JsonDeserializer 反序列化操作"></a>JsonDeserializer 反序列化操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</div><div class="line">        .registerTypeAdapter(Double.class, <span class="keyword">new</span> JsonDeserializer&lt;Double&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Double <span class="title">deserialize</span><span class="params">(JsonElement json, Type typeOfT, JsonDeserializationContext context)</span> <span class="keyword">throws</span> JsonParseException</span>&#123;</div><div class="line">                <span class="comment">// 处理脏数据，返回一个默认值</span></div><div class="line">                <span class="keyword">try</span>&#123;</div><div class="line">                    <span class="keyword">return</span> json.getAsDouble();</div><div class="line">                &#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</div><div class="line">                    <span class="keyword">return</span> -<span class="number">1.0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .create();</div></pre></td></tr></table></figure>
<h2 id="JsonSerializer"><a href="#JsonSerializer" class="headerlink" title="JsonSerializer"></a>JsonSerializer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">JsonSerializer&lt;Number&gt; jsonSerializer = <span class="keyword">new</span> JsonSerializer&lt;Number&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JsonElement <span class="title">serialize</span><span class="params">(Number src, Type typeOfSrc, JsonSerializationContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonPrimitive(String.valueOf(src));</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()&#123;</div><div class="line">    .registerTypeAdapter(Integer.class, jsonSerializer)</div><div class="line">    .registerTypeAdapter(Double.class, jsonSerializer)</div><div class="line">    .registerTypeAdapter(Long.class, jsonSerializer)</div><div class="line">    .registerTypeAdapter(Float.class, jsonSerializer)</div><div class="line">    .create();</div></pre></td></tr></table></figure>
<p>注： <code>registerTypeAdapter</code> 必须使用包装类型，所以 int.class ,long.class,double.class 是不可以的。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GsonBuilder-初探&quot;&gt;&lt;a href=&quot;#GsonBuilder-初探&quot; class=&quot;headerlink&quot; title=&quot;GsonBuilder 初探&quot;&gt;&lt;/a&gt;GsonBuilder 初探&lt;/h1&gt;&lt;p&gt;Gson 类提供的API满足我们大部分的使用场景，但是有时我们需要更强大的功能，这时候就需要使用 GsonBuilder。&lt;br&gt;GsonBuilder，见名知意，它用于构建Gson的实例，用来改变Gson的默认配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Gson" scheme="http://yoursite.com/tags/Gson/"/>
    
  </entry>
  
  <entry>
    <title>Gson 正确打开姿势（一）</title>
    <link href="http://yoursite.com/2017/04/16/Gson-%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/04/16/Gson-正确打开姿势（一）/</id>
    <published>2017-04-16T03:40:48.000Z</published>
    <updated>2017-04-18T01:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>JSON (官网) 是一种文本形式的数据交换格式，它比XML更轻量、比二进制容易阅读和编写，调式也更加方便。其重要性不言而喻。解析和生成的方式很多，Java中最常用的类库有：JSON-Java、Gson、Jackson、FastJson等。<br>项目中使用了Gson，然而现在发现Gson差点被自己玩坏，所以决定好好学习一下~</p>
<a id="more"></a>
<h1 id="Gson-基本用法"><a href="#Gson-基本用法" class="headerlink" title="Gson 基本用法"></a>Gson 基本用法</h1><p>Gson 提供了两个方法 <code>fromJson()</code> 和 <code>toJson()</code>方法直接用于解析和生成Json。前者实现反序列化，后者实现序列化。</p>
<h2 id="基本数据类型解析"><a href="#基本数据类型解析" class="headerlink" title="基本数据类型解析"></a>基本数据类型解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> Gson();</div><div class="line"><span class="keyword">int</span> i = gson.fromJson(<span class="string">"100"</span>, <span class="keyword">int</span>.class);              <span class="comment">//100</span></div><div class="line"><span class="keyword">double</span> d = gson.fromJson(<span class="string">"\"99.99\""</span>, <span class="keyword">double</span>.class);  <span class="comment">//99.99</span></div><div class="line"><span class="keyword">boolean</span> b = gson.fromJson(<span class="string">"true"</span>, <span class="keyword">boolean</span>.class);     <span class="comment">// true</span></div><div class="line">String str = gson.fromJson(<span class="string">"String"</span>, String.class);   <span class="comment">// String</span></div></pre></td></tr></table></figure>
<h2 id="基本数据类型生成"><a href="#基本数据类型生成" class="headerlink" title="基本数据类型生成"></a>基本数据类型生成</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">String jsonNumber = gson.toJson(<span class="number">100</span>);       <span class="comment">// 100</span></div><div class="line">String jsonBoolean = gson.toJson(<span class="keyword">false</span>);    <span class="comment">// false</span></div><div class="line">String jsonString = gson.toJson(<span class="string">"String"</span>); <span class="comment">//"String"</span></div></pre></td></tr></table></figure>
<h2 id="POJO类的生成与解析"><a href="#POJO类的生成与解析" class="headerlink" title="POJO类的生成与解析"></a>POJO类的生成与解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">public</span> String emailAddress;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成Json：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">User user = <span class="keyword">new</span> User(<span class="string">"怪盗kidou"</span>,<span class="number">24</span>);</div><div class="line">String jsonObject = gson.toJson(user); <span class="comment">// &#123;"name":"怪盗kidou","age":24&#125;</span></div></pre></td></tr></table></figure></p>
<p>解析Json：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">String jsonString = <span class="string">"&#123;\"name\":\"怪盗kidou\",\"age\":24&#125;"</span>;</div><div class="line">User user = gson.fromJson(jsonString, User.class);</div></pre></td></tr></table></figure></p>
<h1 id="属性重命名"><a href="#属性重命名" class="headerlink" title="属性重命名"></a>属性重命名</h1><p>之前我们认为Gson对于服务器json数据的解析，属性名称需要与json中的key保持一致，一一对应。但是我们经常会遇到一些不和谐的情况。。。</p>
<h2 id="SerializedName注解使用"><a href="#SerializedName注解使用" class="headerlink" title="@SerializedName注解使用"></a>@SerializedName注解使用</h2><p>我们期望的json数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"name"</span>:<span class="string">"leo"</span>,<span class="attr">"age"</span>:<span class="number">28</span>,<span class="attr">"emailAddress"</span>:<span class="string">"leo@example.com"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>服务端返回的json数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"name"</span>:<span class="string">"leo"</span>,<span class="attr">"age"</span>:<span class="number">28</span>,<span class="attr">"email_address"</span>:leo@example.com&#125;</div></pre></td></tr></table></figure></p>
<p>谷歌的大神，怎么可能不考虑这个问题，我们来看一下如何处理，我们只需要将POJO中属性变成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@SerializedName(&quot;email_address&quot;)</div><div class="line">public String emailAddress;</div></pre></td></tr></table></figure></p>
<p>哦了，重命名的问题搞定~如果接口重用，后端的开发人员也更换了，来了一个偷懒的人。。。出现了下面的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;name&quot;:&quot;leo&quot;,&quot;age&quot;:28,&quot;emailAddress&quot;:&quot;leo@example.com&quot;&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;name&quot;:&quot;leo&quot;,&quot;age&quot;:28,&quot;email_address&quot;:leo@example.com&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;name&quot;:&quot;leo&quot;,&quot;age&quot;:28,&quot;email&quot;:leo@example.com&#125;</div></pre></td></tr></table></figure>
<p>我们如何处理？</p>
<h2 id="为POJO字段提供属性备选名"><a href="#为POJO字段提供属性备选名" class="headerlink" title="为POJO字段提供属性备选名"></a>为POJO字段提供属性备选名</h2><p>SerializedName注解提供了两个属性，上面用到了其中一个，另外还有一个属性alternate（2.4版本以上），接收一个String数组。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SerializedName</span>(value = <span class="string">"emailAddress"</span>, alternate = &#123;<span class="string">"email"</span>, <span class="string">"email_address"</span>&#125;)</div><div class="line"><span class="keyword">public</span> String emailAddress;</div></pre></td></tr></table></figure></p>
<p>当上面的三个属性(email_address、email、emailAddress)出现任意一个时都可以得到正确的结果。</p>
<h1 id="Gson泛型使用"><a href="#Gson泛型使用" class="headerlink" title="Gson泛型使用"></a>Gson泛型使用</h1><p>Gson 为我们提供了 <code>TypeToken</code> 来实现对泛型的支持。</p>
<h2 id="基本类型数据解析"><a href="#基本类型数据解析" class="headerlink" title="基本类型数据解析"></a>基本类型数据解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">String jsonArray = <span class="string">"[\"Android\",\"Java\",\"PHP\"]"</span>;</div><div class="line">List&lt;String&gt; stringList = gson.fromJson(jsonArray,<span class="keyword">new</span> TypeToken&lt;List&lt;String&gt;&gt;()&#123;&#125;.getType());</div></pre></td></tr></table></figure>
<h2 id="POJO的泛型数据解析"><a href="#POJO的泛型数据解析" class="headerlink" title="POJO的泛型数据解析"></a>POJO的泛型数据解析</h2><p>泛型的引入可以减少很多无关的代码，我们现在后台的数据接口数据主要有下面两类:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    message : &#123;"code":0,"message":"操作成功"&#125;,</div><div class="line">    "data":&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    message : &#123;"code":0,"message":"操作成功"&#125;,</div><div class="line">    "data":&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们真正需要的是 data 所包含的数据，message 中的数据我们只需要统一处理一次。如果我们不定义泛型那么我们就需要这样定义POJO。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> MessageBean message;</div><div class="line">    <span class="keyword">private</span> User data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MessageBean <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageBean</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * code : 0</div><div class="line">         * message : 操作成功</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> code;</div><div class="line">        <span class="keyword">private</span> String message;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> code;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> message;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>定义成泛型，就会简洁很多<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> MessageBean message;</div><div class="line">    <span class="keyword">private</span> T data;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们只需编写data字段所对应的POJO即可，专注于我们的业务逻辑。</p>
<p>解析数据的写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Type userType = <span class="keyword">new</span> TypeToken&lt;Result&lt;User&gt;&gt;()&#123;&#125;.getType();</div><div class="line">Result&lt;User&gt; userResult = gson.fromJson(json,userType);</div><div class="line">User user = userResult.data;</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Type userListType = <span class="keyword">new</span> TypeToken&lt;Result&lt;List&lt;User&gt;&gt;&gt;()&#123;&#125;.getType();</div><div class="line">Result&lt;List&lt;User&gt;&gt; userListResult = gson.fromJson(json,userListType);</div><div class="line">List&lt;User&gt; users = userListResult.data;</div></pre></td></tr></table></figure></p>
<h1 id="Gson-流操作"><a href="#Gson-流操作" class="headerlink" title="Gson 流操作"></a>Gson 流操作</h1><p>Gson 的流操作是通过stream包下的JsonReader类和JsonWriter来实现的。</p>
<h2 id="Gson-流反序列化"><a href="#Gson-流反序列化" class="headerlink" title="Gson 流反序列化"></a>Gson 流反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">String json = <span class="string">"&#123;\"name\":\"leo\",\"age\":\"28\"&#125;"</span>;</div><div class="line">User user = <span class="keyword">new</span> User();</div><div class="line">JsonReader reader = <span class="keyword">new</span> JsonReader(<span class="keyword">new</span> StringReader(json));</div><div class="line">reader.beginObject(); <span class="comment">// throws IOException</span></div><div class="line"><span class="keyword">while</span> (reader.hasNext()) &#123;</div><div class="line">    String s = reader.nextName();</div><div class="line">    <span class="keyword">switch</span> (s) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"name"</span>:</div><div class="line">            user.name = reader.nextString();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"age"</span>:</div><div class="line">            user.age = reader.nextInt(); </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"email"</span>:</div><div class="line">            user.email = reader.nextString();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">reader.endObject(); <span class="comment">// throws IOException</span></div></pre></td></tr></table></figure>
<p>fromJson()方法实际上就是通过JsonReader来进行数据解析的，不信？ 去看源码喽~<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String json, Type typeOfT)</span> <span class="keyword">throws</span> JsonSyntaxException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    StringReader reader = <span class="keyword">new</span> StringReader(json);</div><div class="line">    T target = (T) fromJson(reader, typeOfT);</div><div class="line">    <span class="keyword">return</span> target;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h2 id="Gson-流序列化"><a href="#Gson-流序列化" class="headerlink" title="Gson 流序列化"></a>Gson 流序列化</h2><p>序列化和反序列化始终是成对出现的，咱们这也不能让它落单不是。。。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">JsonWriter writer = <span class="keyword">new</span> JsonWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</div><div class="line">writer.beginObject() <span class="comment">// throws IOException</span></div><div class="line">        .name(<span class="string">"name"</span>).value(<span class="string">"leo"</span>)</div><div class="line">        .name(<span class="string">"age"</span>).value(<span class="number">28</span>)</div><div class="line">        .name(<span class="string">"email"</span>).nullValue() <span class="comment">//演示null</span></div><div class="line">        .endObject(); <span class="comment">// throws IOException</span></div><div class="line">writer.flush(); <span class="comment">// throws IOException</span></div></pre></td></tr></table></figure></p>
<p>类似的，toJson() 方法自然是通过JsonWriter实现序列化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">(Object src, Type typeOfSrc)</span> </span>&#123;</div><div class="line">    StringWriter writer = <span class="keyword">new</span> StringWriter();</div><div class="line">    toJson(src, typeOfSrc, writer);</div><div class="line">    <span class="keyword">return</span> writer.toString();</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSON (官网) 是一种文本形式的数据交换格式，它比XML更轻量、比二进制容易阅读和编写，调式也更加方便。其重要性不言而喻。解析和生成的方式很多，Java中最常用的类库有：JSON-Java、Gson、Jackson、FastJson等。&lt;br&gt;项目中使用了Gson，然而现在发现Gson差点被自己玩坏，所以决定好好学习一下~&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Gson" scheme="http://yoursite.com/tags/Gson/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入框架 -- Dagger2 实践</title>
    <link href="http://yoursite.com/2017/04/05/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A1%86%E6%9E%B6-Dagger2-%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2017/04/05/依赖注入框架-Dagger2-实践/</id>
    <published>2017-04-05T03:40:48.000Z</published>
    <updated>2017-04-12T01:56:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在基础和进阶两篇文章中，讨论很多的理论知识，不知道你们怎么样，反正我是有点懵逼了，程序猿么，终归是要垒代码。来吧，我们用代码说话，看一看Dagger2到底是怎么个用法。</p>
</blockquote>
<p><a href="https://github.com/LeoPoldCrossing/ArchiSamples" target="_blank" rel="external">本文代码地址 Dagger2 示例 app-mvp-dagger2</a><br>示例中采用了MVP架构，使用Retrofit进行网络通信，并融入了 Rxjava RxBus 等。Dagger2 使用示例 在 app-mvp-dagger2 分支，请自行chekcout。</p>
<a id="more"></a>
<h1 id="依赖标注"><a href="#依赖标注" class="headerlink" title="依赖标注"></a>依赖标注</h1><h2 id="Inject-标注"><a href="#Inject-标注" class="headerlink" title="@Inject 标注"></a>@Inject 标注</h2><ul>
<li>@Inject 注解 BaseActivity 和 BaseFragment 的 Presenter 实例。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">SupportActivity</span> <span class="keyword">implements</span> <span class="title">BaseView</span> </span>&#123;</div><div class="line">    <span class="meta">@Inject</span> </div><div class="line">    <span class="keyword">protected</span> T mPresenter</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">SupportFragment</span> <span class="keyword">implements</span> <span class="title">BaseView</span> </span>&#123;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="keyword">public</span> T mPresenter;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>@Inject标注依赖构造函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Inject</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(RetrofitHelper retrofitHelper)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.retrofitHelper = retrofitHelper;</div><div class="line">    registerEvent();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Inject</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">RepositoryPresenter</span><span class="params">(RetrofitHelper retrofitHelper)</span></span>&#123;</div><div class="line">     <span class="keyword">this</span>.retrofitHelper = retrofitHelper;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Moudle-工厂类"><a href="#Moudle-工厂类" class="headerlink" title="@Moudle 工厂类"></a>@Moudle 工厂类</h2><ul>
<li><p>AppModule 提供全局依赖实例 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArchiApplication application;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(ArchiApplication application)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.application = application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">ArchiApplication <span class="title">provideApplicationContext</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">RetrofitHelper <span class="title">provideRetrofitHelper</span><span class="params">(RepositoriesService repositoriesService, UserInfoService userInfoService)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RetrofitHelper(repositoriesService, userInfoService);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ActivityModule 为 Activity 提供 this 实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Activity mActivity;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityModule</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mActivity = activity;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@ActivityScope</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mActivity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>FragmentModule 为 Fragment 提供 Activity 实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Fragment fragment;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FragmentModule</span><span class="params">(Fragment fragment)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fragment = fragment;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@FragmentScope</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> fragment.getActivity();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Component组织"><a href="#Component组织" class="headerlink" title="Component组织"></a>Component组织</h1><p>Component 是依赖和被依赖的的桥梁，注入依赖。</p>
<h2 id="AppComponent"><a href="#AppComponent" class="headerlink" title="AppComponent"></a>AppComponent</h2><ul>
<li>定义 AppComponent 接口 ，@Singleton 标注，增加可读性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Singleton</div><div class="line">// modules 定义提供依赖实例的 Module </div><div class="line">@Component(modules = &#123;AppModule.class, HttpModule.class&#125;)</div><div class="line">public interface AppComponent &#123;</div><div class="line">    ArchiApplication getContext();  // 提供App的Context</div><div class="line"></div><div class="line">    RetrofitHelper getRetrofitHelper();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建 AppComponent 单例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArchiApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AppComponent appComponent;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppComponent <span class="title">getAppComponent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (appComponent == <span class="keyword">null</span>) &#123;</div><div class="line">            appComponent = DaggerAppComponent.builder()</div><div class="line">                    .appModule(<span class="keyword">new</span> AppModule(mInstance))</div><div class="line">                    .httpModule(<span class="keyword">new</span> HttpModule())</div><div class="line">                    .build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> appComponent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ActivityComponent"><a href="#ActivityComponent" class="headerlink" title="ActivityComponent"></a>ActivityComponent</h2><ul>
<li><p>自定义 ActivityScope 注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActivityScope &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义 ActivityComponent 使用 @ActivityScope 标注</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class,modules = ActivityModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</div><div class="line">    <span class="function">Activity <span class="title">getActivity</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(RepositoryActivity repositoryActivity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>@ActivityScope 标注 Module 中的依赖实例提供方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mActivity;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Build ActivityComponent实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">SupportActivity</span> <span class="keyword">implements</span> <span class="title">BaseView</span> </span>&#123;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">protected</span> ActivityComponent <span class="title">getActivityComponent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> DaggerActivityComponent.builder()</div><div class="line">                <span class="comment">// 添加依赖 component</span></div><div class="line">                .appComponent(ArchiApplication.getAppComponent())</div><div class="line">                .activityModule(<span class="keyword">new</span> ActivityModule(<span class="keyword">this</span>))</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注入实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">RepositoryPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">RepositoryContract</span>.<span class="title">View</span></span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInject</span><span class="params">()</span> </span>&#123;</div><div class="line">        getActivityComponent().inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="FragmentComponent"><a href="#FragmentComponent" class="headerlink" title="FragmentComponent"></a>FragmentComponent</h2><ul>
<li><p>自定义 FragmentComponent 注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FragmentScope &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义 FragmentComponent 使用 @FragmentScope 标注</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FragmentScope</span></div><div class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class,modules = FragmentModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FragmentComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Activity <span class="title">getActivity</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainFragment mainFragment)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>@FragmentScope 标注 Module 中的依赖实例提供方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="meta">@FragmentScope</span></div><div class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> fragment.getActivity();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Build FragmentComponent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">SupportFragment</span> <span class="keyword">implements</span> <span class="title">BaseView</span> </span>&#123;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">protected</span> FragmentComponent <span class="title">getFragmentComponent</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> DaggerFragmentComponent.builder()</div><div class="line">                <span class="comment">// 添加依赖 component </span></div><div class="line">                .appComponent(ArchiApplication.getAppComponent())</div><div class="line">                .fragmentModule(<span class="keyword">new</span> FragmentModule(<span class="keyword">this</span>))</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注入实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">BaseFragment</span>&lt;<span class="title">MainPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">MainContract</span>.<span class="title">View</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInject</span><span class="params">()</span> </span>&#123;</div><div class="line">        getFragmentComponent().inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="RetrofitHelper-注入流程"><a href="#RetrofitHelper-注入流程" class="headerlink" title="RetrofitHelper 注入流程"></a>RetrofitHelper 注入流程</h1><p>MainPresenter 和 RepositoryPresenter 的构造函数中，有一个参数为 RetrofitHelper，根据Dagger2的注入流程，我们可以知道，RetrofitHelper会优先创建注入。<br>在 AppComponent 中管理的 Modules 中有一个 HttpModule，该 Module 主要作用是提供网络访问实例。<br>我们来看一下 RetrofitHelper 的注入流程。</p>
<ul>
<li>Presenter 的构造函数参数为 RetrofitHelper，所以 RetrofitHelper 会优先创建。</li>
<li><p>RetrofitHelper 构造函数参数为网络访问实例 RepositoriesService,  UserInfoService。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">RetrofitHelper</span><span class="params">(RepositoriesService repositoriesService, UserInfoService userInfoService)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.repositoriesService = repositoriesService;</div><div class="line">        <span class="keyword">this</span>.userInfoService = userInfoService;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>RepositoriesService 和 UserInfoService 实例由 HttpModule 提供 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提供builder</div><div class="line">     * */</div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    Retrofit.<span class="function">Builder <span class="title">provideRetrofitBuilder</span> <span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    OkHttpClient.<span class="function">Builder <span class="title">provideOkHttpClientBuilder</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提供客户端</div><div class="line">     * */</div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@RespositoriesUrl</span></div><div class="line">    <span class="function">Retrofit <span class="title">provideRepositoriesRetrofit</span><span class="params">(Retrofit.Builder builder,OkHttpClient client)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> createRetrofit(builder, client, RepositoriesService.HOST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@UserInfoUrl</span></div><div class="line">    <span class="function">Retrofit <span class="title">provideUserInfoRetrofit</span><span class="params">(Retrofit.Builder builder,OkHttpClient client)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> createRetrofit(builder, client, RepositoriesService.HOST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">OkHttpClient <span class="title">provideClient</span><span class="params">(OkHttpClient.Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> builder.connectTimeout(<span class="number">60000L</span>, TimeUnit.MILLISECONDS)</div><div class="line">                .readTimeout(<span class="number">60000L</span>, TimeUnit.MILLISECONDS)</div><div class="line">                .writeTimeout(<span class="number">60000L</span>, TimeUnit.MILLISECONDS)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提供API</div><div class="line">     * */</div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">RepositoriesService <span class="title">provideRepositoriesService</span><span class="params">(@RespositoriesUrl Retrofit retrofit)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(RepositoriesService.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">UserInfoService <span class="title">provideUserInfoService</span><span class="params">(@UserInfoUrl Retrofit retrofit)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(UserInfoService.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Retrofit <span class="title">createRetrofit</span><span class="params">(Retrofit.Builder builder, OkHttpClient client, String host)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> builder</div><div class="line">                .baseUrl(host)</div><div class="line">                .client(client)</div><div class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>RetrofitHelper 完成创建后由 AppComponent 注入，为全局单一实例。</p>
<h1 id="Qualifier-使用"><a href="#Qualifier-使用" class="headerlink" title="@Qualifier 使用"></a>@Qualifier 使用</h1><p>@Qualifier 的作用是使 Dagger2 避免依赖混乱。</p>
<ul>
<li><p>定义 Qualifier 以 RespositoriesUrl 为例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RespositoriesUrl &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 @RespositoriesUrl 标注依赖实例提供方法，该方法和其他方法的返回相同。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="meta">@RespositoriesUrl</span></div><div class="line"><span class="function">Retrofit <span class="title">provideRepositoriesRetrofit</span><span class="params">(Retrofit.Builder builder,OkHttpClient client)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> createRetrofit(builder, client, RepositoriesService.HOST);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 @RespositoriesUrl 标注 provideRepositoriesRetrofit 的返回值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="function">RepositoriesService <span class="title">provideRepositoriesService</span><span class="params">(@RespositoriesUrl Retrofit retrofit)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> retrofit.create(RepositoriesService.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在基础和进阶两篇文章中，讨论很多的理论知识，不知道你们怎么样，反正我是有点懵逼了，程序猿么，终归是要垒代码。来吧，我们用代码说话，看一看Dagger2到底是怎么个用法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/LeoPoldCrossing/ArchiSamples&quot;&gt;本文代码地址 Dagger2 示例 app-mvp-dagger2&lt;/a&gt;&lt;br&gt;示例中采用了MVP架构，使用Retrofit进行网络通信，并融入了 Rxjava RxBus 等。Dagger2 使用示例 在 app-mvp-dagger2 分支，请自行chekcout。&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Dagger2" scheme="http://yoursite.com/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入框架 -- Dagger2 进阶</title>
    <link href="http://yoursite.com/2017/04/05/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A1%86%E6%9E%B6-Dagger2-%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2017/04/05/依赖注入框架-Dagger2-进阶/</id>
    <published>2017-04-05T03:25:48.000Z</published>
    <updated>2017-04-12T17:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Dagger2 基础分析了 @Inject，@Component，@Module，@Provides 是如何构成 dagger2 整个依赖注入框架的。</p>
<p>主线已经完成，dagger2 中剩下的 @Qualifier（限定符）， @Singleton（单例），@Scope（作用域）是对整个依赖注入框架细节上完善，提供更完善的功能。</p>
<a id="more"></a>
<h1 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h1><p>Dagger2 基础中分析到 @Component 是一个注入器，起着桥梁的作用。被依赖类的实例有两种创建方式：</p>
<ul>
<li>@Inject 标注构造函数创建</li>
<li>@Module 中工厂模式创建</li>
</ul>
<p>这两种方式是有优先级之分的，Component会首先从Module中查找实例，找不到才会去查找Inject方式创建的实例。<br>问题随之而来，在同一种实例创建方式中，可能有多个方法创建类示例，注入器应该选择哪个？ @Qualifier 的作用就是用来决定 Component 做选择的。</p>
<p>我们使用 @Qualifier 来定义自己的注解，然后通过自定义注解去标注依赖的方法和依赖需求方，这样 Dagger2 就知道为谁提供依赖了。</p>
<h1 id="Component-组织方式"><a href="#Component-组织方式" class="headerlink" title="Component 组织方式"></a>Component 组织方式</h1><p>@Scope， @Singleton 有些坑，结合Component讲解，个人认为会更要效果。</p>
<h2 id="如何划分Component"><a href="#如何划分Component" class="headerlink" title="如何划分Component"></a>如何划分Component</h2><p>如果一个 app 只有一个Component，脑补一下吧，简直是世界末日。这个Component会很难维护，变化率极高，很庞大，职责不明确。所以我们要将Component进行划分</p>
<ul>
<li>要有一个全局的Component，定义为 ApplicationComponent，负责管理整个 app 的全局类示例（整个app都要用到的类的实例，比如applicationContext，这些类都是单例的）</li>
<li>每一个页面对应一个Component，比如一个Activity或者Fragment页面定义一个Component，当然这个不是必须的，某些页面依赖的类是一样的，可以共用一个Component。</li>
</ul>
<h2 id="Singleton仅起标注作用"><a href="#Singleton仅起标注作用" class="headerlink" title="@Singleton仅起标注作用"></a>@Singleton仅起标注作用</h2><p>前面提到 ApplicationComponent 负责管理整个app用到的全局类示例，如何才能创建单例？ </p>
<ul>
<li>Module 中定义创建全局类实例 </li>
<li>ApplicationComponent 管理Module </li>
<li>保证ApplicationComponent只有一个实例（在app的Application中实例化）<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppComponent <span class="title">getAppComponent</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (appComponent == <span class="keyword">null</span>) &#123;</div><div class="line">        appComponent = DaggerAppComponent.builder()</div><div class="line">                .appModule(<span class="keyword">new</span> AppModule(instance))</div><div class="line">                .httpModule(<span class="keyword">new</span> HttpModule())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> appComponent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Dagger2 中真正创建单例的方法是上面的不走，全局类实例的生命周期就和Application一致了。疑问又来了，@Singleton 岂不是多余的？ 答案当然是NO！！！ @Singleton有以下作用：</p>
<ul>
<li>更好的管理 ApplicationComponent 和 Module 之间的关系，保证 ApplicationComponent 和 Module是匹配的。若两者的作用域不一样，则在编译时报错。</li>
<li>提高代码可读性，让猿们清晰的看到 Module中创建的类实例是单例。</li>
</ul>
<h2 id="组织Component"><a href="#组织Component" class="headerlink" title="组织Component"></a>组织Component</h2><p>我们划分好Component之后，全局类实例也已经创建了单例模式，如果其他的Component想要把全局的类实例注入到目标类中，怎么办？ 我们需要组织Component之间的关系。 具体的组织方式有以下2种：</p>
<ul>
<li>依赖方式<br>一个Component是依赖于一个或多个Component，使用<code>dependencies</code>属性来添加依赖的Component</li>
<li>包含方式<br>一个 Component 包含一个或多个Component，被包含的Component还可以继续包含其他的Component。 使用 @Subcomponent 注解组织Component </li>
</ul>
<h2 id="Scope的真正用处"><a href="#Scope的真正用处" class="headerlink" title="@Scope的真正用处"></a>@Scope的真正用处</h2><p>@Scope的真正用处是用于组织Component</p>
<ul>
<li>为了更好的管理Component，不管是依赖还是包含，都有必要用自定义的Scope标注，使用不同的自定义Scope来提现Component之间的组织方式。编译器会检查有依赖关系或包含关系的Component，如果没有自定义Scope标注，会报错。</li>
<li>更好的管理Component与Module之间的匹配关系，编译器会检查Component管理的Modules，若发现标注Component的自定义Scope注解与Modules中的标注创建类示例方法的注解不一样，报错。</li>
<li>可读性提高，比如用Singleton标注全局类，这样我们可以立刻明白这类是全局单例类。</li>
</ul>
<h1 id="Dagger原理分析"><a href="#Dagger原理分析" class="headerlink" title="Dagger原理分析"></a>Dagger原理分析</h1><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p><strong>我们的代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> Activity mActivity;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityModule</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.mActivity = activity;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Provides</span></div><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> mActivity;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>生成的工厂类代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Generated</span>(<span class="string">"dagger.internal.codegen.ComponentProcessor"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule_ProvideActivityFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">Activity</span>&gt; </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ActivityModule <span class="keyword">module</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityModule_ProvideActivityFactory</span><span class="params">(ActivityModule <span class="keyword">module</span>)</span> </span>&#123;  </div><div class="line"><span class="keyword">assert</span> <span class="keyword">module</span> != <span class="keyword">null</span>;</div><div class="line"><span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">get</span><span class="params">()</span> </span>&#123;  </div><div class="line">Activity provided = <span class="keyword">module</span>.provideActivity();</div><div class="line"><span class="keyword">if</span> (provided == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> provided;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Factory&lt;Activity&gt; <span class="title">create</span><span class="params">(ActivityModule <span class="keyword">module</span>)</span> </span>&#123;  </div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ActivityModule_ProvideActivityFactory(<span class="keyword">module</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>ActivityModule_ProvideActivityFactory 中的 get() 方法调用了 ActivityModule 中的 provideActivity() 方法来获取我们需要的依赖 provideActivity 对象。 </li>
<li>ActivityModule_ProvideActivityFactory 的对象是由 create() 方法创建，并且传入 ActivityModule 对象。</li>
</ul>
<p>那么一定有地方调用了 create() 方法创建 Factory 对象，并通过 get 方法获取实例。</p>
<p>之前多次说到 Component 是依赖提供方和依赖需求方之间的桥梁，下面我们分析一下，Dagger2 是如何通过 Component 将两者联系起来的。</p>
<h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><p><strong>我们的代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class,modules = ActivityModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</div><div class="line"><span class="function">Activity <span class="title">getActivity</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(RepositoryActivity repositoryActivity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>生成代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Generated</span>(<span class="string">"dagger.internal.codegen.ComponentProcessor"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerActivityComponent</span> <span class="keyword">implements</span> <span class="title">ActivityComponent</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> Provider&lt;Activity&gt; provideActivityProvider;</div><div class="line"><span class="keyword">private</span> Provider&lt;RetrofitHelper&gt; getRetrofitHelperProvider;</div><div class="line"><span class="keyword">private</span> Provider&lt;RepositoryPresenter&gt; repositoryPresenterProvider;</div><div class="line"><span class="keyword">private</span> MembersInjector&lt;BaseActivity&lt;RepositoryPresenter&gt;&gt; baseActivityMembersInjector;</div><div class="line"><span class="keyword">private</span> MembersInjector&lt;RepositoryActivity&gt; repositoryActivityMembersInjector;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">DaggerActivityComponent</span><span class="params">(Builder builder)</span> </span>&#123;  </div><div class="line"><span class="keyword">assert</span> builder != <span class="keyword">null</span>;</div><div class="line">initialize(builder);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;  </div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> Builder();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> Builder builder)</span> </span>&#123;  </div><div class="line"><span class="keyword">this</span>.provideActivityProvider = ScopedProvider.create(ActivityModule_ProvideActivityFactory.create(builder.activityModule));</div><div class="line"><span class="keyword">this</span>.getRetrofitHelperProvider = <span class="keyword">new</span> Factory&lt;RetrofitHelper&gt;() &#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> AppComponent appComponent = builder.appComponent;</div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> RetrofitHelper <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">RetrofitHelper provided = appComponent.getRetrofitHelper();</div><div class="line"><span class="keyword">if</span> (provided == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot return null from a non-@Nullable component method"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> provided;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">this</span>.repositoryPresenterProvider = RepositoryPresenter_Factory.create((MembersInjector) MembersInjectors.noOp(), getRetrofitHelperProvider);</div><div class="line"><span class="keyword">this</span>.baseActivityMembersInjector = BaseActivity_MembersInjector.create((MembersInjector) MembersInjectors.noOp(), repositoryPresenterProvider);</div><div class="line"><span class="keyword">this</span>.repositoryActivityMembersInjector = MembersInjectors.delegatingTo(baseActivityMembersInjector);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">getActivity</span><span class="params">()</span> </span>&#123;  </div><div class="line"><span class="keyword">return</span> provideActivityProvider.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(RepositoryActivity repositoryActivity)</span> </span>&#123;  </div><div class="line">repositoryActivityMembersInjector.injectMembers(repositoryActivity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> ActivityModule activityModule;</div><div class="line"><span class="keyword">private</span> AppComponent appComponent;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> ActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;  </div><div class="line"><span class="keyword">if</span> (activityModule == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"activityModule must be set"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (appComponent == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"appComponent must be set"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> DaggerActivityComponent(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">activityModule</span><span class="params">(ActivityModule activityModule)</span> </span>&#123;  </div><div class="line"><span class="keyword">if</span> (activityModule == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"activityModule"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>.activityModule = activityModule;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">appComponent</span><span class="params">(AppComponent appComponent)</span> </span>&#123;  </div><div class="line"><span class="keyword">if</span> (appComponent == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"appComponent"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>.appComponent = appComponent;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>Dagger2 生成了 ActivityComponent 的实现类 DaggerActivityComponent</li>
<li>DaggerActivityComponent 对象是在调用 build() 方法时进行初始化（initialize方法）</li>
</ul>
<ul>
<li>初始化Provider</li>
<li>初始化MembersInjector</li>
</ul>
<ul>
<li>inject 方法中，调用injectMembers() 进行注入。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于 Dagger2 的的一些概念，就介绍到这里了。啰里啰嗦的说了好多，我们来总结一下 Dagger2 到底有些什么好处呢，应该如何使用。</p>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul>
<li><p>提高开发效率，不做油漆工<br>Dagger2 把 new 对象和注入的工作给做了，我们只需要将精力集中在关建业务上。<br>省去了单例的写法，也不用再操心单例线程安全的问题。</p>
</li>
<li><p>更方便的管理类实例<br>每个app中的ApplicationComponent管理整个app的全局类实例，他们的生命周期和app的生命周期一样。<br>每个页面的Component管理自己页面所以来的类实例。<br>Component,Module让整个类实例结构变得很清晰。</p>
</li>
<li><p>解耦<br>正常情况下，new 关键字到处都有，一旦类的构造函数发生变化，咱们哭死的心都有。。。设计模式中提倡<strong>把容易变化的部分封装起来</strong>。<br>Dagger2 通过 @Inject 注解 和 @Module 来创建实例<br>@Inject构造函数变化时，我们不用做任何修改<br>@Module 管理的实例，我们也只需要修改Module，比如HttpModule。</p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>依赖注入的流程</li>
</ul>
<blockquote>
<ol>
<li>查找Module中是否存在创建该类实例的方法 </li>
<li>存在创建类实例的方法，查看该方法是否需要参数<br>2.1 需要，则从步骤1开始，初始化每个参数<br>2.2 不需要，直接初始化类实例，一次依赖注入完成</li>
<li>若不存在创建类方法，则查找Inject注解的构造函数，查看是否需要参数<br>3.1 需要，从步骤1开始一次初始化每个参数<br>3.2 不需要，初始化该实例，一次依赖注入完成</li>
</ol>
</blockquote>
<ul>
<li>使用注意事项</li>
</ul>
<ul>
<li>一个app必须有一个Component来管理整个app的全局类实例</li>
<li>多个页面可以共享一个Component</li>
<li>最好使用自定义Scope，增强代码阅读性，及早的暴露问题（编译时检查）。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Dagger2 基础分析了 @Inject，@Component，@Module，@Provides 是如何构成 dagger2 整个依赖注入框架的。&lt;/p&gt;
&lt;p&gt;主线已经完成，dagger2 中剩下的 @Qualifier（限定符）， @Singleton（单例），@Scope（作用域）是对整个依赖注入框架细节上完善，提供更完善的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Dagger2" scheme="http://yoursite.com/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入框架 -- Dagger2 基础</title>
    <link href="http://yoursite.com/2017/03/30/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A1%86%E6%9E%B6-Dagger2-%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/03/30/依赖注入框架-Dagger2-基础/</id>
    <published>2017-03-30T03:25:48.000Z</published>
    <updated>2017-04-10T06:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>dagger2 是解决Android或着Java中依赖注入的一个类库（DI类库）。最近看了一些开源的项目都在使用dagger2，而且有很多对其是甚是推崇，我也蠢蠢欲动。。。在学习dagger2的过程中，我遇到了一下的困惑：</p>
<ul>
<li>dagger2 中的Inject，Component，Module，Provides等等都是什么鬼？有什么作用</li>
<li>dagger2 到底有什么魔力，让大家都推崇备至</li>
<li>如何在项目中更好的使用dagger2 ?</li>
</ul>
<p>在具体的学习过程中，看了好多的博客，有时候感觉挺简单，就那么回事吧，但是真正使用的时候，一脸懵逼了。Component应该怎么用？Module应该放些神马？Scope怎么起到作用域控制？。。。一瞬间怀疑人生。本文将自己对dagger2的理解与大家分享一下，希望能对大家有所帮助。</p>
<a id="more"></a>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>Inject，Component，Module，Provides他们是什么？ 怎么去理解？各自有什么作用？主要讲解抽象的概念，代码的剖析，后期实践中再说~ 下面请看黑板</p>
<h1 id="小科普"><a href="#小科普" class="headerlink" title="小科普"></a>小科普</h1><ul>
<li><p><a href="http://codethink.me/2015/08/01/dependency-injection-theory/" target="_blank" rel="external">依赖注入（Dependency Injection 简称DI)</a></p>
</li>
<li><p><a href="http://baike.baidu.com/item/Java%20%E6%B3%A8%E8%A7%A3?fr=aladdin" target="_blank" rel="external">注解（Annotation）</a></p>
</li>
</ul>
<p>Dagger2 就是通过注解实现依赖注入的一种技术手段。</p>
<h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><p>Dagger2 注入框架最重要的就是注解的使用，那么我们先来逐个分析这些东东。</p>
<h2 id="Inject注解"><a href="#Inject注解" class="headerlink" title="@Inject注解"></a>@Inject注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B b;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B()&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Inject 注解用来标注目标类依赖的实例以以及被依赖类的构造函数。这样，目标类中依赖的实例与被依赖类的构造函数之间有了一种的联系，茫茫大海中，如何找到相互关联的两个 @Inject注解？</p>
<h2 id="Component-注解"><a href="#Component-注解" class="headerlink" title="@Component 注解"></a>@Component 注解</h2><p>@Component 是连接目标类依赖的实例和被依赖类构造方法的桥梁，@Component标注的类是接口或者抽象类。既然说它是桥梁，我们来分析一下，它是如何工作的。</p>
<ul>
<li>Component类持有目标类的实例。</li>
<li>Component查找目标类中用@Inject注解标注的属性，然后查找该属性对应的用@Inject标注的构造函数。</li>
<li>初始化该属性的实例，并进行赋值。</li>
</ul>
<p>Component 就像是一个注入器，将目标类依赖的实例注入到目标类中。</p>
<blockquote>
<p>Tip：Dagger依赖注入的流程</p>
<ol>
<li>@Inject 标注目标类中的依赖类</li>
<li>@Inject 标注被依赖类的构造函数</li>
<li>若依赖类还有依赖类，重复 step1 step2</li>
<li>调用 Component 的 injectXXX(Object) 方法开始依赖注入。（injectXXX 方法名称是官方推荐。）</li>
</ol>
</blockquote>
<h2 id="Module-注解"><a href="#Module-注解" class="headerlink" title="@Module 注解"></a>@Module 注解</h2><p>新坑来啦！！！项目中会使用很多的第三方类库，对于这些类库的依赖，我们没有办法去修改，不能将@Inject加入到这些类中。这可如何是好。。。</p>
<p>@Module 应运而生，我们可以将第三方类库封装入Module中，来对第三方库进行封装，当然@Module的功能不止封装第三方库，它的应用场景主要有以下三个：</p>
<ul>
<li>接口（Interface）是没有构造方法的</li>
<li>第三方库提供的类，构造方法不能被注解</li>
<li>有些类需要灵活选择初始化配置，而不是使用单一的构造方法</li>
</ul>
<p>Module 其实是一个简单工厂模式，Module里面的方法基本都是创建类示例的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Activity mActivity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityModule</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mActivity = activity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@ActivityScope</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mActivity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Module 和 Component 又是如何关联起来呢？ </p>
<h2 id="Component的新任务"><a href="#Component的新任务" class="headerlink" title="Component的新任务"></a>Component的新任务</h2><p>Component 是注入器，它一段连接目标类，另一端链接被依赖类。之前说到Module类是一个提供类实例的类，所以Component的新职责就是将Module提供的被依赖类示例注入到目标类中。（Component中的modules属性可以把Module加入Component，modules可以加入多个Module）。</p>
<p>引入新问题，Modules 中创建的各种类实例如何注入到目标类中，如何与目标类中@Inject标注的依赖产生关联。</p>
<h2 id="Provides注解"><a href="#Provides注解" class="headerlink" title="@Provides注解"></a>@Provides注解</h2><p>Module 中创建类实例方法用Provides进行标注，Component 在搜索到目标类中用 @Inject 标注的属性后，Component就会去 Module 中去查找用 Provides 标注的对应的创建类实例方法，实现依赖注入。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Inject，Component，Module，Provides 是dagger2中最基础最核心的知识点。</p>
<ul>
<li>@Inject 用来标注目标类的依赖和被依赖类的构造函数</li>
<li>@Component 是一个桥梁，一端是目标类，一端是目标类所依赖的实例。负责依赖注入，同时管理 Module。</li>
<li>Module 和 Provides  Module是一个简单工厂模式，主要包含创建类示例的方法，这些方法用Provides来标注。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;dagger2 是解决Android或着Java中依赖注入的一个类库（DI类库）。最近看了一些开源的项目都在使用dagger2，而且有很多对其是甚是推崇，我也蠢蠢欲动。。。在学习dagger2的过程中，我遇到了一下的困惑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dagger2 中的Inject，Component，Module，Provides等等都是什么鬼？有什么作用&lt;/li&gt;
&lt;li&gt;dagger2 到底有什么魔力，让大家都推崇备至&lt;/li&gt;
&lt;li&gt;如何在项目中更好的使用dagger2 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在具体的学习过程中，看了好多的博客，有时候感觉挺简单，就那么回事吧，但是真正使用的时候，一脸懵逼了。Component应该怎么用？Module应该放些神马？Scope怎么起到作用域控制？。。。一瞬间怀疑人生。本文将自己对dagger2的理解与大家分享一下，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Dagger2" scheme="http://yoursite.com/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入</title>
    <link href="http://yoursite.com/2017/03/28/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2017/03/28/依赖注入/</id>
    <published>2017-03-28T03:25:48.000Z</published>
    <updated>2019-09-29T10:38:08.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先来一段看似比较装逼的介绍。在软件工程领域，依赖注入（Dependency Injection）是用于实现控制反转（Inversion of Control）的最常见的方式之一。本文主要介绍依赖注入原理和常见的实现方式</p>
<a id="more"></a>
<h1 id="依赖注入的作用"><a href="#依赖注入的作用" class="headerlink" title="依赖注入的作用"></a>依赖注入的作用</h1><p>控制反转用于解耦，解的究竟是什么？<br>引用一下 Martin Flower在介绍注入时使用的部分代码说明这个问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieFinder finder；</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieLister</span><span class="params">()</span></span>&#123;</div><div class="line">        finder = <span class="keyword">new</span> MovieFinderImpl();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> Movie[] moviesDirectedBy(String arg)&#123;</div><div class="line">        List allMovies = finder.findAll();</div><div class="line">        <span class="keyword">for</span>(Iterator it = allMovies.iterator(); it.hasNext();)&#123;</div><div class="line">            Movie movie = (Movie)it.next();</div><div class="line">            <span class="keyword">if</span>(!movie.getDirector().equals(arg)) it.remove();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (Movie[]) allMovies.toArray(<span class="keyword">new</span> Movie[allMovies.size()]);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MovieFinder</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>脑补一下这段代码的功能：</p>
<ul>
<li>MovieLister的类来提供需要的电影列表，依赖于MovieFinder对象</li>
<li>movieDirectedBy方法根据导演名来筛选电影</li>
<li>MovieFinder接口的实现类MovieFinderImpl负责与数据库交互，搜索电影</li>
</ul>
<p>目前看来，我们完美的实现了功能！然而，我们都晓得，需求是无时无刻不在改变的~😭，现在我们需要将finder的实现改变（比如增加一个参数）。那我们就需要修改多个类。</p>
<p>这就是依赖注入需要处理的耦合。这种在MovieLister中创建MovieFinderImpl的方式，是的MovieLister不仅仅依赖MovieFinder接口，还依赖于MovieFinderImpl这个实现。这种在一个类中，直接创建另一个累的对象的代码，我们称之为hard init , 它是有毒的：</p>
<ul>
<li>修改实现时，我们需要修改new Object的代码</li>
<li>不便于测试，上文中的MovieLister无法单独被测试，其行为和MovieFinderImpl紧紧耦合在一起。</li>
</ul>
<h1 id="依赖注入的实现方式"><a href="#依赖注入的实现方式" class="headerlink" title="依赖注入的实现方式"></a>依赖注入的实现方式</h1><p>其实我们在平常的工作过程中，会经常使用依赖注入，只不过很少注意（反正我是。。。），也不太注意使用依赖注入进行解耦。我们在这里介绍一下依赖注入实现的三种方式。</p>
<h2 id="构造函数注入（Contructor-Injection）"><a href="#构造函数注入（Contructor-Injection）" class="headerlink" title="构造函数注入（Contructor Injection）"></a>构造函数注入（Contructor Injection）</h2><p>在类的外面创建对象，然后通过构造方法传入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造函数注入，MovieLister类就只依赖于我们定义的MovieFinder接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieFinder finder;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieLister</span><span class="params">(MovieFinder finder)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.finder = finder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="setter方法注入"><a href="#setter方法注入" class="headerlink" title="setter方法注入"></a>setter方法注入</h2><p>增加一个setter方法来传入创建好的MovieFinder对象，同样可以避免在MovieFinder中hard init这个对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span></span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinder</span><span class="params">(MovieFinder finder)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.finder = finder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="接口注入"><a href="#接口注入" class="headerlink" title="接口注入"></a>接口注入</h2><p>接口注入使用接口来提供setter方法，其实现方法如下<br>首先创建一个注入使用的接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InjectFinder</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span>；</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后我们让MovieLister实现这个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> <span class="keyword">implements</span> <span class="title">InjectFinder</span></span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.finder = finder;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后我们需要根据不同的框架创建被依赖的MovieFinder的实现。</p>
<h1 id="Java中的注解依赖注入"><a href="#Java中的注解依赖注入" class="headerlink" title="Java中的注解依赖注入"></a>Java中的注解依赖注入</h1><p>在java中，使用注解进行依赖注入是最常用的。通过在字段的声明前添加@Inject注解进行标记，来实现依赖对象的自动注入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Inject</span> Father father</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span></span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>神奇的@Inject注解，一个注解就自动注入了？ 实质上，我们还需要使用依赖注入框架，进行一些配置。比如Dagger。</p>
<p>参考：</p>
<ol>
<li><a href="https://martinfowler.com/articles/injection.html" target="_blank" rel="external">Inversion of Control Containers and the Dependency Injection pattern</a></li>
<li><a href="https://github.com/android-cn/blog/tree/master/java/dependency-injection" target="_blank" rel="external">依赖注入</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;先来一段看似比较装逼的介绍。在软件工程领域，依赖注入（Dependency Injection）是用于实现控制反转（Inversion of Control）的最常见的方式之一。本文主要介绍依赖注入原理和常见的实现方式&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>MVC，MVP，MVVM 架构分析</title>
    <link href="http://yoursite.com/2017/03/10/MVC-MVP-MVVM/"/>
    <id>http://yoursite.com/2017/03/10/MVC-MVP-MVVM/</id>
    <published>2017-03-10T01:55:48.000Z</published>
    <updated>2017-03-28T03:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> MVC,MVP,MVVM 作为 Android 开发中耳熟能详的三个框架，一直处半懵逼的状态，最近分析了一些谷歌官方给出的samples代码，记录下自己的理解，轻喷~</p>
</blockquote>
<a id="more"></a>
<h1 id="MVC-MVP-MVVM"><a href="#MVC-MVP-MVVM" class="headerlink" title="MVC,MVP,MVVM"></a>MVC,MVP,MVVM</h1><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>Model View Controller,软件中最常见的一种框架，Controller 层负责操作 Model 数据，并且返回给 View 层进行展示。</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/oanqhsxxmpa79b49rjc8fqry/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-08%2014.15.04.png" alt="MVC 架构图"></p>
<p>从上图看出，用户通过 view 层发出指令到 controller 层，controller 通知 model 层更新数据，model 完成后直接显示在 view 层上。</p>
<p>既然是 Android 猿，那我们从分析下 MVC模型在 Android 中的提现：</p>
<ul>
<li>View : layout.xml </li>
<li>Model: 各种 JavaBean</li>
<li>Controller : Activity，Fragment 等等</li>
</ul>
<p>我们来分析一个场景：点击按钮下载文件<br>按钮是卸载xml里面的，属于view层的<br>网络请求，数据解析相关代码写在其他类里，比如 netHelper ，属于model层。<br>view 和 model 通过button.setOnClickListener()关联其来，其卸载activity中，对应于 controller 层。</p>
<p>好像很清晰，看起来没毛病的样子~开始搞事情。。。<br>如果数据回来需要在view层进行展示，控制某些控件的隐藏/显示，xml文件就无能为力了，我们只能将代码写在 activity 中。activity 就开始找不到自己的归属了，我是谁？ view or controller？<br>如果一个逻辑复杂的页面，维护起来简直是噩梦。</p>
<p>当然从上图也可以看到Model层和View层并没有隔离开，这是一个重要的缺陷。违背了程序的低耦合原则。</p>
<h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>MVP 作为 MVC 的演化，解决了不少 MVC 的问题。对于 android 来说，MVP 的 model 和 MVC 是一样的，而 activity 和 fragment 不再是 controller 层，而是纯粹的 view 层，所有关于用户事件的转发全部交由 presenter 层处理。<br><img src="http://static.zybuluo.com/LeoPoldCrossing/wkn35fa4inl0j9j4gr9gkrgm/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-09%2009.28.48.png" alt="MVP 架构示例图"></p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>看图说话~我们来分析一下，MVP架构是如何解决 MVC 面对的问题：</p>
<ul>
<li><p>view 层和 model 层完全解耦。<br>Presenter 充当桥梁，view 层发出的事件传递到 presenter 层，由P层操作model，获取数据后通知 view 层更新UI。</p>
</li>
<li><p>activity 和 fragment 臃肿的问题。<br>activity 和 fragment 属于 view 层，仅仅是数据回调后更新 UI。在activity中和fragment中没有任何与model相关的逻辑代码，而是将这部分代码放到presenter层中，通过接口的形式将 view 层需要的数据返回。</p>
</li>
<li><p>便于测试。<br>比如如果我们需要测试获取数据功能，只需要实现对应的接口，看presenter是否调用了相应的方法。也可以在presenter中制造假数据，分发给view ，用来测试布局是否正确。</p>
</li>
<li><p>逻辑清晰，耦合性低，可维护性提高</p>
</li>
</ul>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ul>
<li>接口过多，一定程度影响我们的编码效率和代码可读性</li>
<li>逻辑比较复杂的页面，Activity 代码还是会比较多，当然要比MVC要好的多，而且逻辑清晰</li>
<li>Presenter 层比较臃肿</li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li>使用 Fragment 作为 view 层，而 activity 则是一个用于创建 view(fragment)和 presenter 的控制器。</li>
<li>根据业务需求抽取基类，定义接口，公共的逻辑尽量抽取，减少代码量。</li>
</ul>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>MVVM 最早是由微软提出，先上图：<br><img src="http://static.zybuluo.com/LeoPoldCrossing/032tt769o9u7x2kd45oijzrp/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-09%2018.03.19.png" alt="MVVM 架构图"><br>从 MVVM 架构图分析，MVVM 和 MVP 的区别貌似不大，presenter 换成了 viewmodel层，还有一点就是 view 层和 viewModel 层是binding的关系。viewmodel层的数据发生变化时，view层会相应的更新UI。</p>
<h3 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h3><p><a href="https://leopoldcrossing.github.io/2017/02/17/DataBinding%E4%BB%8B%E7%BB%8D/" target="_blank" rel="external">DataBinding框架</a><br>Android 平台 MVVM 的目前相当火爆，谷歌欧巴的DataBinding框架功不可没。它可以让我们轻松的实现MVVM。看了网上很多的文章，都说DataBinding就是ViewModel层，我有点不同的看法，在这里提出来，大家讨论一下。</p>
<ul>
<li><p>众多博文的观点： Android 中 MVVM 就是 Databinding 框架的运用。Android Data Binding中的 ViewModel是根据layout自动生成的Binding类，比如 activity_main.xml ,生成的Binding类就是ActivityMainBinding。</p>
</li>
<li><p>不同观点：ViewModel 是可以进行 binding 的数据模型，Binding 类是View 和 ViewModel 之间的桥梁。ViewModel层数据对象三种形式：</p>
</li>
</ul>
<ol>
<li>继承BaseObservable </li>
<li>Observable Fields</li>
<li>Observable Collections<br>这样定义的数据对象发生改变时，同步更新UI。<br>DataBinding 框架通过<code>setContentView(int  resourceId
)</code> 和<code>setXXX()</code> 方法完成View和ViewModel的绑定。</li>
</ol>
<h2 id="小结：理论知识讲完了，我们总结一下"><a href="#小结：理论知识讲完了，我们总结一下" class="headerlink" title="小结：理论知识讲完了，我们总结一下"></a>小结：理论知识讲完了，我们总结一下</h2><ul>
<li>了解区分 MVC，MVP，MVVM</li>
<li>初步了解这三种模式在Android中的使用。</li>
<li>DataBinding 在 MVVM 模式中的职责</li>
</ul>
<p>其实，真正的最佳实践都是人想出来的，我们并不一定要死磕一种模式。see一下谷歌大大实现的架构。</p>
<h1 id="Android-官方架构分析"><a href="#Android-官方架构分析" class="headerlink" title="Android 官方架构分析"></a>Android 官方架构分析</h1><h2 id="Android-architecture介绍"><a href="#Android-architecture介绍" class="headerlink" title="Android - architecture介绍"></a>Android - architecture介绍</h2><p><a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">项目地址:android-architecture</a><br>Android框架提供了很大的灵活性去创建一个APP。这种灵活性很有价值，但是也让app有很多类，不一致的命名和不规范的框架结构。导致测试，维护，扩展困难。<br>Android Architecture 演示了帮助解决或避免这些问题的常用方案，该项目用不同的架构实现了同一个APP。当然这些samples仅仅是作为参考，在我们创建自己的app时，还是根据需求选择最合适的。</p>
<h3 id="稳定的samples"><a href="#稳定的samples" class="headerlink" title="稳定的samples"></a>稳定的samples</h3><p><img src="http://static.zybuluo.com/LeoPoldCrossing/k6uhs2m0fx4ocf9ks4qer2hn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-10%2015.00.21.png" alt="屏幕快照 2017-03-10 15.00.21.png-98.7kB"></p>
<h3 id="正在开发的samples"><a href="#正在开发的samples" class="headerlink" title="正在开发的samples"></a>正在开发的samples</h3><p><img src="http://static.zybuluo.com/LeoPoldCrossing/fe3cf56gby1dqt2ai4nr4g0b/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-10%2015.00.41.png" alt="屏幕快照 2017-03-10 15.00.41.png-47.6kB"></p>
<p>废话不多说了，下面选择两个我想要在项目中使用的两个架构进行分析：<br><code>todo-mvp</code>和<code>todo-mvp-databinding</code></p>
<h2 id="TODO-MVP架构分析"><a href="#TODO-MVP架构分析" class="headerlink" title="TODO-MVP架构分析"></a>TODO-MVP架构分析</h2><p>todo-mvp 是基础的MVP架构，没有使用其他的任何类库。</p>
<h3 id="app设计"><a href="#app设计" class="headerlink" title="app设计"></a>app设计</h3><p>该示例项目的代码组织方式完全按照功能组织</p>
<ul>
<li>Tasks - 管理tasks列表</li>
<li>TaskDetail - 查看task详情，并提供删除功能</li>
<li>AddEditTask - 增加和编辑 tasks</li>
<li>Statistics - 查看最近的日程 </li>
</ul>
<p>每一个功能内部分为xActivity,xContract,xFragment,xPresenter四个类文件。</p>
<ul>
<li>Activity 类，用于创建Fragment 和 Presenter</li>
<li>Contract 类，这个与之前见到的mvp实现都不同，该类用于统一管理 view 和 presenter 的所有接口，使得 view 和 presenter 中的功能非常清晰。</li>
<li>Fragment类，View 层 ，实现 view 接口</li>
<li>Presenter类，Contract类中相应 Presenter 接口的实现类</li>
</ul>
<p>结构图如下：<br><img src="http://static.zybuluo.com/LeoPoldCrossing/65hqqxllygeeef2okibi9mfc/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-10%2015.29.23.png" alt="屏幕快照 2017-03-10 15.29.23.png-25.1kB"></p>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h4><p>我们先来看两个Base接口类， BasePresenter 和 BaseView<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BasePresenter中含有方法start(),该方法的作用是presenter开始获取数据并调用 view 中的方法更新UI。其调用时机是在 Fragment 类的 onResume() 方法中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BaseView 中含有方法 setPresenter，该方法作用是将presenter示例传入 view 中，调用时机是 Presenter 实现类的构造函数中。</p>
<h4 id="契约类"><a href="#契约类" class="headerlink" title="契约类"></a>契约类</h4><p>之前说过契约类，是与之前所见的MVP实现不同，也是我感觉很优雅的地方。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">view 和 presenter 的职责很明了，增删改都很方便</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskDetailContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setLoadingIndicator</span><span class="params">(<span class="keyword">boolean</span> active)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showMissingTask</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">editTask</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">deleteTask</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">completeTask</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">activateTask</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Activity-的作用"><a href="#Activity-的作用" class="headerlink" title="Activity 的作用"></a>Activity 的作用</h3><p>Activity 在项目中是一个控制者，负责创建 view 及 presenter 实例，并将二者进行关联。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">TaskDetailFragment taskDetailFragment = (TaskDetailFragment) getSupportFragmentManager()</div><div class="line">                .findFragmentById(R.id.contentFrame);</div><div class="line"></div><div class="line">        if (taskDetailFragment == null) &#123;</div><div class="line">            taskDetailFragment = TaskDetailFragment.newInstance(taskId);</div><div class="line"></div><div class="line">            ActivityUtils.addFragmentToActivity(getSupportFragmentManager(),</div><div class="line">                    taskDetailFragment, R.id.contentFrame);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Create the presenter</div><div class="line">        new TaskDetailPresenter(</div><div class="line">                taskId,</div><div class="line">                Injection.provideTasksRepository(getApplicationContext()),</div><div class="line">                taskDetailFragment);</div></pre></td></tr></table></figure></p>
<h3 id="MVP-的实现与组织"><a href="#MVP-的实现与组织" class="headerlink" title="MVP 的实现与组织"></a>MVP 的实现与组织</h3><ul>
<li><p>Presenter 创建时将 Fragment 作为参数传入构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TasksPresenter</span><span class="params">(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView)</span> </span>&#123;</div><div class="line">        mTasksRepository = checkNotNull(tasksRepository, <span class="string">"tasksRepository cannot be null"</span>);</div><div class="line">        mTasksView = checkNotNull(tasksView, <span class="string">"tasksView cannot be null!"</span>);</div><div class="line">        <span class="comment">// view 调用setPresenter方法，注入 presenter 示例</span></div><div class="line">        mTasksView.setPresenter(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Fragment onResume() 方法中调用 presenter.start()方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class TaskDetailFragment extends Fragment implements TaskDetailContract.View &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onResume() &#123;</div><div class="line">        super.onResume();</div><div class="line">        mPresenter.start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void setPresenter(@NonNull TaskDetailContract.Presenter presenter) &#123;</div><div class="line">        mPresenter = checkNotNull(presenter);</div><div class="line">    &#125;</div><div class="line">    ...</div></pre></td></tr></table></figure>
</li>
</ul>
<p>分析代码得出view 和 presenter 相互持有，并且通过构造函数或set方法进行依赖注入。view 处理用户与界面的交互，presenter与model层交互，处理数据回调的逻辑判断，如果需要更新UI，直接调用view的方法，实现了 view 和 presenter 的各司其职。</p>
<h3 id="Model-层设计"><a href="#Model-层设计" class="headerlink" title="Model 层设计"></a>Model 层设计</h3><p>Model 最大的特点就是被赋予了获取数据的职责。与我们平常Model只定义Bean对象不同，todo-mvp中，数据的获取，存储，数据状态变化都是model层的任务。Presenter 只需要调用该层的方法并传入回调。</p>
<p>总结：MVP遵循类单一职责的编程原则，但是代码量相对增加，而且view层的代码依然略显臃肿，xml文件作为View层的能力依然很弱，UI的更新依然需要咋Fragment中处理。</p>
<h3 id="MVVM-与-MVP-相结合架构分析"><a href="#MVVM-与-MVP-相结合架构分析" class="headerlink" title="MVVM 与 MVP 相结合架构分析"></a>MVVM 与 MVP 相结合架构分析</h3><p>该架构基于 todo-mvp 示例并且使用了 DataBinding 库来展示数据和绑定事件。<br>它并不是严格的遵守 MVVM 模型 或者 MVP 模型，它同时使用了 ViewModel 和 Presenter 。</p>
<h4 id="app-设计"><a href="#app-设计" class="headerlink" title="app 设计"></a>app 设计</h4><p>目录结构与todo-mvp一致。只是多了一个ViewModel。Statistics 和 tasks 模块实现ViewModel的方式并不一样，我们来逐个分析。</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/72rwqh88tal6nq3okqgx23uu/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-11%2013.14.33.png" alt="屏幕快照 2017-03-11 13.14.33.png-31.5kB"></p>
<h4 id="Statistics-模块"><a href="#Statistics-模块" class="headerlink" title="Statistics 模块"></a>Statistics 模块</h4><p>Statistics 模块<br>主要类：Activity ,Fragment ,ViewModel,Presenter</p>
<ul>
<li><p>StatisticsActivity ： 创建 Fragment，ViewModel ， Presenter对象，管理注入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">StatisticsFragment statisticsFragment = (StatisticsFragment) getSupportFragmentManager()</div><div class="line">    .findFragmentById(R.id.contentFrame);</div><div class="line">    <span class="keyword">if</span> (statisticsFragment == <span class="keyword">null</span>) &#123;</div><div class="line">        statisticsFragment = StatisticsFragment.newInstance();</div><div class="line">    ActivityUtils.addFragmentToActivity(getSupportFragmentManager(),</div><div class="line">                    statisticsFragment, R.id.contentFrame);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">StatisticsViewModel statisticsViewModel = <span class="keyword">new</span> StatisticsViewModel(getApplicationContext());</div><div class="line"></div><div class="line"><span class="comment">// 注入viewModel，用于binding至xml文件</span></div><div class="line">statisticsFragment.setViewModel(statisticsViewModel);</div><div class="line"></div><div class="line"><span class="comment">// viewmodel 实现 view， 构造方法注入到presenter</span></div><div class="line">StatisticsPresenter statisticsPresenter = <span class="keyword">new</span> StatisticsPresenter(</div><div class="line">        Injection.provideTasksRepository(getApplicationContext()), statisticsViewModel);</div><div class="line"></div><div class="line"><span class="comment">// Fragment 注入 presenter。</span></div><div class="line">statisticsFragment.setPresenter(statisticsPresenter);</div></pre></td></tr></table></figure>
</li>
<li><p>StatisticsFragment ： 调用presenter的方法获取数据，绑定 viewmodel 至xml </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(@NonNull StatisticsPresenter presenter)</span></span>&#123;</div><div class="line">    mPresenter = checkNotNull(presenter)</div><div class="line">&#125;</div><div class="line"></div><div class="line">mViewDataBinding.setStats(mStatisticsViewModel)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stats"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.example.android.architecture.blueprints.todoapp.statistics.StatisticsViewModel"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>StatisticsViewModel ： 提供get set方法，binding 到 xml 文件，自动更新UI</p>
</li>
<li><p>StatisticsPresenter ： 与Model 层交互，获取数据后传递给viewmodel，更新UI</p>
</li>
</ul>
<h4 id="Tasks模块"><a href="#Tasks模块" class="headerlink" title="Tasks模块"></a>Tasks模块</h4><p>Tasks 模块 MVP 结构的组织与实现与todo-mvp一致。<br>主要类： TasksActivity,TasksFragment,TasksPresenter,TasksItemActionHandler,TasksViewModel。</p>
<ul>
<li><p>TasksActivity ：管理，创建对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">TasksFragment tasksFragment =</div><div class="line">            (TasksFragment) getSupportFragmentManager().findFragmentById(R.id.contentFrame);</div><div class="line">    if (tasksFragment == null) &#123;</div><div class="line">        // Create the fragment</div><div class="line">        tasksFragment = TasksFragment.newInstance();</div><div class="line">        ActivityUtils.addFragmentToActivity(</div><div class="line">                getSupportFragmentManager(), tasksFragment, R.id.contentFrame);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Create the presenter</div><div class="line">    mTasksPresenter = new TasksPresenter(Injection.provideTasksRepository(</div><div class="line">            getApplicationContext()), tasksFragment);</div><div class="line">    </div><div class="line">    // 创建时注入Presenter，是为了方法的重用。</div><div class="line">    TasksViewModel tasksViewModel =</div><div class="line">            new TasksViewModel(getApplicationContext(), mTasksPresenter);</div><div class="line">    // 注入viewModel，通过Binding类与xml文件关联</div><div class="line">    tasksFragment.setViewModel(tasksViewModel);</div></pre></td></tr></table></figure>
</li>
<li><p>TasksFragment : View 层，持有ViewModel 和 Presenter。将ViewModel绑定至xml文件，根据数据自动更新UI，调用Presenter的方法获取或更新数据，处理用户和组件的交互。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TasksFragBinding tasksFragBinding = TasksFragBinding.inflate(inflater, container, false);</div><div class="line">// 绑定viewmodel 和 xml文件，自动更新UI。</div><div class="line">tasksFragBinding.setTasks(mTasksViewModel);</div><div class="line">// 将presenter与xml绑定，作为事件处理类，重用方法</div><div class="line">tasksFragBinding.setActionHandler(mPresenter);</div></pre></td></tr></table></figure>
</li>
<li><p>TasksPresenter : 和 todo-mvp 的presenter 没什么区别，获取数据，然后调用view的方法，更新UI。</p>
</li>
<li><p>TasksViewModel : 继承BaseObservable，在与Xml文件绑定后，内容发生改变时刻自动更新UI。<br>注意 <code>@Bindable</code> 注解和 <code>notifyPropertyChanged()</code>的使用; </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">public class TasksViewModel extends BaseObservable &#123;</div><div class="line"></div><div class="line">    int mTaskListSize = 0;</div><div class="line"></div><div class="line">    private final TasksContract.Presenter mPresenter;</div><div class="line"></div><div class="line">    private Context mContext;</div><div class="line"></div><div class="line">    public TasksViewModel(Context context, TasksContract.Presenter presenter) &#123;</div><div class="line">        mContext = context;</div><div class="line">        mPresenter = presenter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public String getCurrentFilteringLabel() &#123;</div><div class="line">        switch (mPresenter.getFiltering()) &#123;</div><div class="line">            case ALL_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.label_all);</div><div class="line">            case ACTIVE_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.label_active);</div><div class="line">            case COMPLETED_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.label_completed);</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public String getNoTasksLabel() &#123;</div><div class="line">        switch (mPresenter.getFiltering()) &#123;</div><div class="line">            case ALL_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.no_tasks_all);</div><div class="line">            case ACTIVE_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.no_tasks_active);</div><div class="line">            case COMPLETED_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.no_tasks_completed);</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public Drawable getNoTaskIconRes() &#123;</div><div class="line">        switch (mPresenter.getFiltering()) &#123;</div><div class="line">            case ALL_TASKS:</div><div class="line">                return mContext.getResources().getDrawable(R.drawable.ic_assignment_turned_in_24dp);</div><div class="line">            case ACTIVE_TASKS:</div><div class="line">                return mContext.getResources().getDrawable(R.drawable.ic_check_circle_24dp);</div><div class="line">            case COMPLETED_TASKS:</div><div class="line">                return mContext.getResources().getDrawable(R.drawable.ic_verified_user_24dp);</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public boolean getTasksAddViewVisible() &#123;</div><div class="line">        return mPresenter.getFiltering() == ALL_TASKS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public boolean isNotEmpty() &#123;</div><div class="line">        return mTaskListSize &gt; 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTaskListSize(int taskListSize) &#123;</div><div class="line">        mTaskListSize = taskListSize;</div><div class="line">        notifyPropertyChanged(BR.noTaskIconRes);</div><div class="line">        notifyPropertyChanged(BR.noTasksLabel);</div><div class="line">        notifyPropertyChanged(BR.currentFilteringLabel);</div><div class="line">        notifyPropertyChanged(BR.notEmpty);</div><div class="line">        notifyPropertyChanged(BR.tasksAddViewVisible);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>TasksItemActionHandler : 绑定至xml文件，通过set方法注入，传入Presenter，可以重用方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class TasksItemActionHandler &#123;</div><div class="line"></div><div class="line">    private TasksContract.Presenter mListener;</div><div class="line"></div><div class="line">    public TasksItemActionHandler(TasksContract.Presenter listener) &#123;</div><div class="line">        mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Called by the Data Binding library when the checkbox is toggled.</div><div class="line">     */</div><div class="line">    public void completeChanged(Task task, boolean isChecked) &#123;</div><div class="line">        if (isChecked) &#123;</div><div class="line">            mListener.completeTask(task);</div><div class="line">        &#125; else &#123;</div><div class="line">            mListener.activateTask(task);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Called by the Data Binding library when the row is clicked.</div><div class="line">     */</div><div class="line">    public void taskClicked(Task task) &#123;</div><div class="line">        mListener.openTaskDetails(task);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>总结：该架构节省去了findViewById的苦力活，通过Binding库和ViewModel层增强了XMl的功能。<br>相比MVP，view层中的代码减少，UI展式改变只需改变ViewModel层。<br>项目MVVM，业务逻辑代码放在了Presenter中，明确了各层的职责。<br>这也是我比较倾向在项目中使用的架构。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>作为程序猿，纸上来的终觉浅，既然觉得浅了，咱们就去玩一些深的，自己去实现以下MVC，MVP，MVVM。实践出真知，真正的理解这三种架构。敬请期待~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; MVC,MVP,MVVM 作为 Android 开发中耳熟能详的三个框架，一直处半懵逼的状态，最近分析了一些谷歌官方给出的samples代码，记录下自己的理解，轻喷~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="架构分析" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>DataBinding- Say Goodye to FindViewById</title>
    <link href="http://yoursite.com/2017/02/17/DataBinding%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2017/02/17/DataBinding介绍/</id>
    <published>2017-02-17T01:55:48.000Z</published>
    <updated>2017-02-22T09:11:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DataBinding介绍"><a href="#DataBinding介绍" class="headerlink" title="DataBinding介绍"></a>DataBinding介绍</h1><p>Data binding 在2015年7月发布的Android Studio v1.3.0 版本上引入，在2016年4月Android Studio v2.0.0 上正式支持。目前为止，Data Binding 已经支持双向绑定了。</p>
<p>Databinding 是一个实现数据和UI绑定的框架，是一个实现 MVVM 模式的工具，有了 Data Binding，在Android中也可以很方便的实现MVVM开发模式。</p>
<p>Data Binding 是一个support库，最低支持到Android 2.1（API Level 7+）。</p>
<a id="more"></a>
<p>Data Binding 之前，我们不可避免地要编写大量的毫无营养的代码，如 findViewById()、setText()，setVisibility()，setEnabled() 或 setOnClickListener() 等，通过 Data Binding , 我们可以通过声明式布局以精简的代码来绑定应用程序逻辑和布局，这样就不用编写大量的毫无营养的代码了。</p>
<p>文中的示例代码地址<a href="https://github.com/LeoPoldCrossing/DataBindingSamples" target="_blank" rel="external">DataBindingSamples</a></p>
<hr>
<h1 id="DataBinding简单使用示例"><a href="#DataBinding简单使用示例" class="headerlink" title="DataBinding简单使用示例"></a>DataBinding简单使用示例</h1><h2 id="DataBinding环境"><a href="#DataBinding环境" class="headerlink" title="DataBinding环境"></a>DataBinding环境</h2><p>App Module - build.gradle中开启dataBinding<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">    ...</div><div class="line">    dataBinding&#123;</div><div class="line">        enable = true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="修改Layout文件"><a href="#修改Layout文件" class="headerlink" title="修改Layout文件"></a>修改Layout文件</h2><p>使用dataBingding需要修改Layout文件，根标签不再是线性布局，相对布局等，而是使用layout标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">        xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;</div><div class="line">        &lt;!-- 原根节点 --&gt;</div><div class="line">        &lt;LinearLayout&gt;</div><div class="line">        ...</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure></p>
<h2 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h2><p>就是一个Model，就不贴代码了</p>
<h2 id="UI绑定"><a href="#UI绑定" class="headerlink" title="UI绑定"></a>UI绑定</h2><ul>
<li>修改布局文件,定义variable</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;layout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    &gt;</div><div class="line">    &lt;data&gt;</div><div class="line">    </div><div class="line">        &lt;variable</div><div class="line">            name=&quot;user&quot;</div><div class="line">            type=&quot;com.example.databindingsamples.model.User&quot; /&gt;</div><div class="line">        # 也可以写成</div><div class="line">        &lt;import type=&quot;com.example.databindingsamples.model.User&quot; /&gt;</div><div class="line">        &lt;variable name=&quot;user&quot; type=&quot;User&quot; /&gt;</div><div class="line">        </div><div class="line">    &lt;/data&gt;</div><div class="line">...</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">            ...</div><div class="line">            # 使用 variable</div><div class="line">            android:text=&quot;@&#123;user.firstName&#125;&quot;</div><div class="line">            ...</div><div class="line">            /&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            ...</div><div class="line">            android:text=&quot;@&#123;user.lastName&#125;&quot;</div><div class="line">            ... /&gt;</div><div class="line">         &lt;TextView</div><div class="line">            ...</div><div class="line">            android:visibility=&quot;@&#123;!user.adult ? View.VISIBLE:View.GONE&#125;&quot;</div><div class="line">            ... /&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>绑定 variable<br>修改<code>onCreate</code>方法 使用<code>DataBingdingUtil.setContentView</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    ActivityBasicBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_basic);</div><div class="line">    User user = new User(&quot;leo&quot;, &quot;wang&quot;, 20);</div><div class="line">    binding.setUser(user);</div><div class="line">    # 或者使用setVariable()</div><div class="line">    binding.setVariable(BR.user,user)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ActivityBasicBinding</code>类是自动生成的，所有的<code>set</code>方法也是根据<code>variable</code>名称生成的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 类名生成</div><div class="line">activity_basic.xml -&gt; ActivityBasicBinding</div><div class="line"># set方法生成</div><div class="line">user -&gt; setUser(User user)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h3 id="创建代理类"><a href="#创建代理类" class="headerlink" title="创建代理类"></a>创建代理类</h3><p>先来创建一个事件的处理类，并在<code>layout</code>文件中声明。<br>知道大家都是好奇宝宝，先忍会哈~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class EventHandler &#123;</div><div class="line">    public void onDisplayNameClick(View view) &#123;</div><div class="line">        Toast.makeText(view.getContext(), &quot;DisplayName : &quot; + user.getDisplayName(), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onFirstNameClick(User user) &#123;</div><div class="line">        Toast.makeText(BasicActivity.this, &quot;FirstName : &quot; + user.getFirstName(), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onLastNameClick(View view, User user) &#123;</div><div class="line">        Toast.makeText(BasicActivity.this, &quot;LastName : &quot; + user.getLastName(), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onAgeClick(View view) &#123;</div><div class="line">        if (user.getAge() &gt; 18) &#123;</div><div class="line">            user.setAge(16);</div><div class="line">        &#125; else &#123;</div><div class="line">            user.setAge(28);</div><div class="line">        &#125;</div><div class="line">        binding.setUser(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Method-Reference"><a href="#Method-Reference" class="headerlink" title="Method Reference"></a>Method Reference</h3><p>事件绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:onClick=&quot;@&#123;handler.onDisplayNameClick&#125;&quot;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Tip:引用的方法参数必须和事件回调参数一致<br>比如 android:onClick , 引用的方法参数必须为（View view）</p>
</blockquote>
<h3 id="Listener-Binding"><a href="#Listener-Binding" class="headerlink" title="Listener Binding"></a>Listener Binding</h3><p>监听器绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:onClick=&quot;@&#123;()-&gt; handler.onFirstNameClick(user)&#125;&quot;</div><div class="line"></div><div class="line">android:onClick=&quot;@&#123;(view)-&gt; handler.onLastNameClick(view,user)&#125;&quot;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Tip: 可自定义传递参数</p>
</blockquote>
<h3 id="绑定-handler"><a href="#绑定-handler" class="headerlink" title="绑定 handler"></a>绑定 handler</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">binding.setHandler(new EventHandler());)</div></pre></td></tr></table></figure>
<h1 id="布局细节"><a href="#布局细节" class="headerlink" title="布局细节"></a>布局细节</h1><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h2><ul>
<li>Java代码中一样在xml文件中 import class <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;imports type=&quot;android.view.View&quot;/&gt;</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:visibility=&quot;@&#123;user.isAdult?View.VISIBLE:View.GONE&#125;&quot;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>类型别名<br>如果在data节点导入两个同名类，使用<code>alias</code>属性，给类赋一个别名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;import type=&quot;com.example.home.data.User&quot; /&gt;</div><div class="line">&lt;import type=&quot;com.examle.detail.data.User&quot; alias=&quot;DetailUser&quot; /&gt;</div><div class="line">&lt;variable name=&quot;detailUser&quot; type=&quot;DetailUser&quot; /&gt;</div><div class="line">&lt;variable name=&quot;user&quot; type=&quot;User&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>表达式使用导入的类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;data&gt;</div><div class="line">    &lt;import type=&quot;com.example.User&quot;/&gt;</div><div class="line">    &lt;import type=&quot;java.util.List&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;user&quot; type=&quot;User&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;userList&quot; type=&quot;List&amp;lt;User&amp;gt&quot;/&gt;</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>静态字段和方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">     &lt;import type=&quot;com.example.databindingsamples.utils.MyStringUtils&quot; alias=&quot;StringUtil&quot;/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">…</div><div class="line">&lt;TextView</div><div class="line">   android:text=&quot;@&#123;MyStringUtils.capitalize(user.lastName)&#125;&quot;</div><div class="line">   android:layout_width=&quot;wrap_content&quot;</div><div class="line">   android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p><code>data</code> 标签下可以定义任意数量的 <code>variable</code> 标签，每一个<code>variable</code>标签都描述一个可以在binding表达式中使用的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import type=&quot;android.graphics.drawable.Drawable&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;image&quot; type=&quot;Drawable&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;note&quot; type=&quot;String&quot;/&gt;</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure></p>
<p>变量类型会在编译时检查，所以如果一个变量实现了了Observable 或者 是一个 Observable 集合，它会被反射调用。</p>
<p>如果变量声明的是一个未实现的Observable基类或者接口，该变量不会被观察，也就是变量的改动不会改变UI。</p>
<p>binding 类自动生成会为每一个变量自动生成 getter 和 setter 方法。在 setter 方法没有调用之前，他们都被设置为默认值：Object 设置为 null ， int 设置为 0 ， boolean 设置为 false 等等。。。</p>
<h2 id="Binding类自定义"><a href="#Binding类自定义" class="headerlink" title="Binding类自定义"></a>Binding类自定义</h2><ul>
<li><p>自定义类名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 生成的binding类位于databinding包下</div><div class="line">&lt;!--&lt;data class=&quot;ContactBinding&quot;&gt;--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义类名，并修改生成路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--&lt;data class=&quot;.ContactBinding&quot;&gt;--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义类名和生成路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;data class=&quot;com.example.databindingsamples.ContactBinding&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h2><p>在使用应用命名空间的布局中，变量可以传递到任何 include 布局中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Root添加命名空间</div><div class="line">xmlns:bind=&quot;http://schemas.android.com/apk/res-auto</div><div class="line"># 绑定数据</div><div class="line"></div><div class="line">&lt;include</div><div class="line">    android:id=&quot;@+id/layout_user&quot;</div><div class="line">    layout=&quot;@layout/include_user&quot;</div><div class="line">    bind:user=&quot;@&#123;user&#125;&quot; /&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Tip：</p>
<ol>
<li>需要注意的是<code>user</code>变量必须在 include 的布局中声明。</li>
<li>如果在非根节点的 ViewGroup 中使用 include 会导致 crash</li>
</ol>
</blockquote>
<h2 id="ViewStubs"><a href="#ViewStubs" class="headerlink" title="ViewStubs"></a>ViewStubs</h2><blockquote>
<p>ViewStub 是一种不可见的，0尺寸在运行时懒加载的View。当其设置为visible或者调用了inflate()方法时，它会被加载完成的view或者views替换掉。因此，ViewStub 在 setVisibility(int) 或者 inflate() 方法被调用后在 hierarchy 中就不存在了。加载后的 view 会被添加到Viewstub的父容器中，并且参数为ViewStub的布局参数。 </p>
</blockquote>
<p>因为 ViewStub 会被移除，且 Binding 类中的 View 全部都是 final 修饰，所以 Binding 类中使用 ViewStubProxy 来代替 ViewStub， 开发者可以通过 ViewStubProxy 来获取 viewStub 或者 viewstub 填充后的 view。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.viewstub = new android.databinding.ViewStubProxy((android.view.ViewStub) bindings[1]);</div></pre></td></tr></table></figure></p>
<p>inflate 一个新的 layout 时，会为新的 layout 创建一个新 binding 对象。因此，ViewStubProxy 必须监听 ViewStub 的 ViewStub.OnInflateListener，并及时建立 binding。由于 ViewStub 只能有一个 OnInflateListener，你可以将你自己的 listener 设置在 ViewStubProxy 上，在 binding 建立之后， listener 就会被触发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">binding.viewStub.setOnInflateListener(new ViewStub.OnInflateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onInflate(ViewStub stub, View inflated) &#123;</div><div class="line">                ViewStubBinding viewStubBinding = DataBindingUtil.bind(inflated);</div><div class="line">                Contact contact = new Contact(&quot;Messi&quot;, &quot;122134567&quot;, &quot;2345@gmail.com&quot;);</div><div class="line">                viewStubBinding.setContact(contact);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><h2 id="Common-Features"><a href="#Common-Features" class="headerlink" title="Common Features"></a>Common Features</h2><ul>
<li>数学计算 <code>+ - * %</code></li>
<li>字符串链接 <code>+</code> </li>
<li>逻辑 <code>|| &amp;&amp;</code></li>
<li>二进制 <code>&amp; | ^</code></li>
<li>一元 <code>+ - ! ~</code></li>
<li>位移 <code>&gt;&gt; &gt;&gt;&gt; &lt;&lt; &lt;&lt;&lt;</code></li>
<li>比较 <code>&gt; &lt; &gt;= &lt;= ==</code></li>
<li>instance of</li>
<li>Grouping()</li>
<li>字面量 <code>字符 字符串 数字 null</code></li>
<li>类型转换</li>
<li>方法调用 使用<code>.</code>或者 <code>::</code></li>
<li>Field 访问 </li>
<li>Array 访问</li>
<li>三元运算符<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Examples:</div><div class="line">android:text=&quot;@&#123;String.valueOf(index + 1)&#125;&quot;</div><div class="line">android:visibility=&quot;@&#123;age&lt;13?View.GONE:View.VISIBLE&#125;&quot;</div><div class="line">android:transitionName=&apos;@&#123;&quot;image_&quot; + id&#125;&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="缺失的操作符"><a href="#缺失的操作符" class="headerlink" title="缺失的操作符"></a>缺失的操作符</h2><ul>
<li><code>this</code></li>
<li><code>super</code></li>
<li><code>new</code> </li>
<li>显示泛型调用<code>&lt;T&gt;</code></li>
<li>缺省 无法访问 this,super,new，显示泛型调用</li>
</ul>
<h2 id="Null-合并运算符"><a href="#Null-合并运算符" class="headerlink" title="Null 合并运算符"></a>Null 合并运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:text=&apos;@&#123;user.displayName ?? &quot;displayName is null&quot;&#125;&apos;</div><div class="line">等同于</div><div class="line">android:text=&apos;@&#123;user.displayName != null ? user.displayName : &quot;displayName is null&quot;&#125;&apos;</div></pre></td></tr></table></figure>
<h2 id="属性引用"><a href="#属性引用" class="headerlink" title="属性引用"></a>属性引用</h2><p>JavaBean 引用，当表达式引用了一个类内的属性时，他会尝试直接调用域，getter，还有ObservableFields<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=&quot;@&#123;user.firstName&#125;&quot;</div></pre></td></tr></table></figure></p>
<h2 id="避免-NullPointerException"><a href="#避免-NullPointerException" class="headerlink" title="避免 NullPointerException"></a>避免 NullPointerException</h2><p>自动生成的 data binding 代码会自动检查和避免 NullPointerException.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@&#123;user.name&#125;</div><div class="line">如果 user 为 null，则 user.name 赋予默认值 null</div><div class="line">@&#123;user.age&#125; </div><div class="line">如果 user 为 null，则 user.age 赋予默认值 0</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 分析ActivityMainBinding 源码，看到有对user是否为null的判断</div><div class="line">if ((dirtyFlags &amp; 0x6L) != 0) &#123;</div><div class="line">    if (user != null) &#123;</div><div class="line">        // read user.firstName</div><div class="line">        firstNameUser = user.getFirstName();</div><div class="line">        // read user.lastName</div><div class="line">        lastNameUser = user.getLastName();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><p>通用的容器类，数组，lists，sparse lists 和 map，可以用[]操作符来存取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import type=&quot;android.util.SparseArray&quot;/&gt;</div><div class="line">    &lt;import type=&quot;java.util.Map&quot;/&gt;</div><div class="line">    &lt;import type=&quot;java.util.List&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;list&quot; type= &quot;List&amp;lt;String&amp;gt;&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;sparse&quot; type=&quot;SparseArray&amp;lt;String&amp;gt;&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;map&quot; type=&quot;Map&amp;lt;String,String&amp;gt;&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;index type=&quot;int&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;key&quot; type=&quot;String&quot;/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">...</div><div class="line">android:text=&quot;@&#123;list[index]&#125;&quot;</div><div class="line">...</div><div class="line">android:text=&quot;@&#123;sparse[index]&#125;&quot;</div><div class="line">...</div><div class="line">android:text=&quot;@&#123;map[key]&#125;&quot;</div></pre></td></tr></table></figure></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>使用单引号将属性值括起来，就可以在表达式中使用双引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=&apos;@&#123;map[&quot;firstName&quot;]&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>也可以用双引号将属性值括起来，然后字符串使用&amp;<code>quot；</code>或者反引号`来调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:text=&quot;@&#123;map[&amp;quot;firstName&amp;quot;]&#125;&quot;</div><div class="line">android:text=&quot;@&#123;map[`firstName`]&#125;&quot;</div></pre></td></tr></table></figure></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>普通的语法在表达式中访问资源 <a href="http://blog.csdn.net/feelang/article/details/46342699" target="_blank" rel="external"><strong>官方教程的坑</strong></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">android:padding=@&#123;large? (int)@dimen/largePadding: (int)@dimen/smallPadding&#125;</div><div class="line"></div><div class="line">android:background=&quot;@&#123;large? @color/red:@color/green&#125;&quot;</div><div class="line"></div><div class="line">android:text=&quot;@&#123;@string/nameFormat(firstName,lastName)&#125;&quot;</div><div class="line"></div><div class="line">android:text=&quot;@&#123;@plurals/banana(bananaCount,bananaCount)&#125;&quot;</div></pre></td></tr></table></figure></p>
<p>需要显示声明的资源<br><img src="http://static.zybuluo.com/LeoPoldCrossing/we3idy2ri20tt8de1i4rj3am/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-13%2018.14.05.png" alt="屏幕快照 2017-02-13 18.14.05.png-32.8kB"></p>
<h1 id="数据对象-1"><a href="#数据对象-1" class="headerlink" title="数据对象"></a>数据对象</h1><p>DataBinding 让我决定引入到项目中的原因是它具备<strong>数据改变，UI随之更新</strong>的能力。<br>Data Binding 为我们提供了三种数据变动通知机制：<code>Observable Objects，Observable fields，Observable collections</code>。</p>
<p>Come on！ Baby~ 让我们一起看一下这三种机制的神奇之处。</p>
<h2 id="Observable-Objects"><a href="#Observable-Objects" class="headerlink" title="Observable Objects"></a>Observable Objects</h2><p>我们只需要修改Model类，数据改变后，更新UI的事情由Binding完成，再也不用费时费力的去写<code>binding.setXXX</code>~so cool！<br><code>@Bindable</code>在编译时会在BR类内生成一个元素。BR类会在生成在 module package下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class ObservableUser extends BaseObservable &#123;</div><div class="line">    private String name;</div><div class="line">    private long idNumber;</div><div class="line">    private int age;</div><div class="line"></div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public long getIdNumber() &#123;</div><div class="line">        return idNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setIdNumber(long idNumber) &#123;</div><div class="line">        this.idNumber = idNumber;</div><div class="line">        notifyPropertyChanged(BR.idNumber);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">        notifyPropertyChanged(BR.name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getAge() &#123;</div><div class="line">        return age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAge(int age) &#123;</div><div class="line">        this.age = age;</div><div class="line">        notifyChange();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Observable-Fields"><a href="#Observable-Fields" class="headerlink" title="Observable Fields"></a>Observable Fields</h2><p>如果我们的Model类里面只有少量的 Field 或者 想要节省时间，可以使用<code>Observable Field</code>及其派生的 <code>ObservableBoolean</code>,<code>ObservableByte</code>,<code>ObservableChar</code>,<code>ObservableShort</code>,<code>ObservableInt</code>,<code>ObservableLong</code>,<code>ObservableFloat</code>,<code>ObservableDouble</code>,<code>ObservableParcelable</code>。<br>ObaservableField自包含obsevable对象，并且只有一个Field。</p>
<ul>
<li><p>Step 1 Model 定义 ObservableField</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public final ObservableField&lt;String&gt; name = new ObservableField&lt;String&gt;();</div><div class="line">public final ObservableLong NO = new ObservableLong();</div><div class="line">public final ObservableInt age = new ObservableInt();</div></pre></td></tr></table></figure>
</li>
<li><p>Step 2 Field Value 的set和get</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">observableFieldUser.name.set(&quot;James&quot;);</div><div class="line">observableFieldUser.NO.set(23);</div><div class="line">observableFieldUser.age.set(31);</div><div class="line"></div><div class="line">observableFieldUser.name.get();</div><div class="line">observableFieldUser.age.get();</div><div class="line">observableFieldUser.NO.get();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Observable-Collections"><a href="#Observable-Collections" class="headerlink" title="Observable Collections"></a>Observable Collections</h2><h3 id="ObservableMap"><a href="#ObservableMap" class="headerlink" title="ObservableMap"></a>ObservableMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 创建</div><div class="line">private ObservableMap&lt;String, Object&gt; observableArrayMap = new ObservableArrayMap&lt;&gt;();</div><div class="line"></div><div class="line"># 数据</div><div class="line">observableArrayMap.put(&quot;system&quot;, &quot;Android&quot;);</div><div class="line">observableArrayMap.put(&quot;brand&quot;, &quot;三星&quot;);</div><div class="line">observableArrayMap.put(&quot;version&quot;, &quot;6.0.1&quot;);</div><div class="line"></div><div class="line"># 使用</div><div class="line">&lt;import type=&quot;android.databinding.ObservableMap&quot;/&gt;</div><div class="line"></div><div class="line">&lt;variable</div><div class="line">    name=&quot;map&quot;</div><div class="line">    type=&quot;ObservableMap&amp;lt;String,Object&amp;gt;&quot;/&gt;</div><div class="line"></div><div class="line">android:text=&apos;@&#123;@string/mapFormatString(map[&quot;system&quot;],map[`brand`],map[&quot;version&quot;])&#125;&apos;</div></pre></td></tr></table></figure>
<h3 id="ObservableList"><a href="#ObservableList" class="headerlink" title="ObservableList"></a>ObservableList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 创建</div><div class="line">private ObservableList&lt;Object&gt; observableArrayList = new ObservableArrayList();</div><div class="line"></div><div class="line"># 数据</div><div class="line">observableArrayList.add(0, &quot;Android&quot;);</div><div class="line"></div><div class="line"># 使用</div><div class="line">&lt;import type=&quot;android.databinding.ObservableList&quot;/&gt;</div><div class="line"></div><div class="line">&lt;variable</div><div class="line">    name=&quot;list&quot;</div><div class="line">    type=&quot;ObservableList&amp;lt;Object&amp;gt;&quot; /&gt;</div><div class="line"></div><div class="line">android:text=&quot;@&#123;@string/listFormatString(list[0])&#125;&quot;</div></pre></td></tr></table></figure>
<h1 id="高级-Binding"><a href="#高级-Binding" class="headerlink" title="高级 Binding"></a>高级 Binding</h1><h2 id="Dynamic-Variables"><a href="#Dynamic-Variables" class="headerlink" title="Dynamic Variables"></a>Dynamic Variables</h2><p>以 RecyclerView 为例， Adapter 的 Databinding 需要动态生成，这时我们就需要动态创建 Binding 。</p>
<ul>
<li>在 OnCreateViewHolder 中创建 binding ，在 onBindViewHolder 中获取 binding。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public DynamicBindingViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">        ViewDataBinding viewDataBinding = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.dynamic_list_item, parent, false);</div><div class="line">        DynamicBindingViewHolder holder = new DynamicBindingViewHolder(viewDataBinding.getRoot());</div><div class="line">        holder.setBinding(viewDataBinding);</div><div class="line">        return holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        return users.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(DynamicBindingViewHolder holder, int position) &#123;</div><div class="line">        User user = users.get(position);</div><div class="line">        holder.getBinding().setVariable(BR.user, user);</div><div class="line">        holder.getBinding().executePendingBindings();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>构建Holder时直接绑定view<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public DynamicBindingViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">    View inflate = LayoutInflater.from(parent.getContext()).inflate(R.layout.dynamic_list_item, parent,false);</div><div class="line">    return new DynamicBindingViewHolder(inflate);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onBindViewHolder(DynamicBindingViewHolder holder, int position) &#123;</div><div class="line">    User user = users.get(position);</div><div class="line">    holder.bind(user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public DynamicBindingViewHolder(View itemView) &#123;</div><div class="line">    super(itemView);</div><div class="line">    binding = DataBindingUtil.bind(itemView);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void bind(User user)&#123;</div><div class="line">    binding.setUser(user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Attribute-Setters"><a href="#Attribute-Setters" class="headerlink" title="Attribute Setters"></a>Attribute Setters</h2><p>写过自定义控件的童鞋都知道，自定义属性需要在<code>attrs</code> 文件中定义 <code>declare-styleable</code>, 在java代码调用<code>set</code>方法来进行赋值的。</p>
<p>在 Databinding中，不在 <code>attrs</code> 文件中定义 <code>declare-styleable</code> ，也可以在xml文件中进行赋值，只需要对应的setter方法。</p>
<p>DataBinding 框架内置了几种调用 set 进行赋值的方式。</p>
<h3 id="Automatic-Setters"><a href="#Automatic-Setters" class="headerlink" title="Automatic Setters"></a>Automatic Setters</h3><p>属性和set方法对应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;com.example.databindingsamples.view.NameCard</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    app:object=&quot;@&#123;user&#125;&quot; /&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void setObject(User user)&#123;</div><div class="line">    firstName.setText(user.getFirstName());</div><div class="line">    lastName.setText(user.getLastName());</div><div class="line">    age.setText(user.getAge());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Rename-Attribute-Setter"><a href="#Rename-Attribute-Setter" class="headerlink" title="Rename Attribute Setter"></a>Rename Attribute Setter</h3><p>一些属性的命名与 setter 不对应。针对这些函数，可以用 BindingMethods 注解来将属性与 setter 绑定在一起。举个例子，<code>android:tint</code> 属性可以这样与 <code>setImageTintList(ColorStateList)</code>绑定，而不是 setTint:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindingMethods</span>(&#123;</div><div class="line">      <span class="meta">@BindingMethod</span>(type = <span class="string">"android.widget.ImageView"</span>,</div><div class="line">                      attribute = <span class="string">"android:tint"</span>,</div><div class="line">                      method = <span class="string">"setImageTintList"</span>),</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>Android 框架中的 setter 重命名已经在库中实现了，我们只需要关注自己的 setter。</p>
<h3 id="Custom-Attribute-Setter"><a href="#Custom-Attribute-Setter" class="headerlink" title="Custom Attribute Setter"></a>Custom Attribute Setter</h3><p>一些属性需要自定义 setter 逻辑。比如目前没有与<code>android:paddingLeft</code> 相对应的 setter，只有一个<code>setPadding(l,t,r,b)</code>函数。结合静态 binding adapter 函数与 BindingAdapter ，我们可以自定义属性 setter。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@BindingAdater(&quot;android:paddingLeft&quot;)</div><div class="line">public static void setPaddingLeft(View view,int padding)&#123;</div><div class="line">    view.setPadding(padding,</div><div class="line">                    view.getPaddingTop(),</div><div class="line">                    view.getPaddingRight(),</div><div class="line">                    view.getPaddingBotton())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Binding adapter 在其他自定义类型上也很是 very nice 的。 For example，一个 loader 可以在非主线程加载图片。 当存在冲突时，开发者创建的 binding adapter 会覆盖 Data Binding 的默认adapter。<br>我们还可以创建多个 adapters 并且传递多个参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 不需要主动调用</div><div class="line">@BindingAdapter(&#123;&quot;imageUrl,&quot;error&quot;&#125;)&#123;</div><div class="line">public static void loadImage(ImageView view, String url, Drawable error)&#123;</div><div class="line">     Glide.with(context)</div><div class="line">                .load(url)</div><div class="line">                .error(error)</div><div class="line">                .into(imageView); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>layout 文件的 ImageView 按照下面的写法，就会调用上面的adapter。<br>imageUrl 和 error 都使用，并且 imageUrl 为 String，error 为 drawable。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">app:imageUrl</span>=<span class="string">"@&#123;url&#125;"</span></div><div class="line">    <span class="attr">app:error</span>=<span class="string">"@&#123;@drawable/ic_launcher&#125;"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Tip： </p>
<ol>
<li>在匹配adapter时，自定义命名空间将被忽略</li>
<li>我们可以为 android 命名空间编写 adapter </li>
</ol>
</blockquote>
<p>事件 handler 仅可以用于只有一个抽象方法的接口或者抽象类,比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onLayoutChange"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOnLayoutChangeListener</span><span class="params">(View view, View.OnLayoutChangeListener oldValue,</span></span></div><div class="line">       View.OnLayoutChangeListener newValue) &#123;</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">        <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</div><div class="line">            view.removeOnLayoutChangeListener(oldValue);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (newValue != <span class="keyword">null</span>) &#123;</div><div class="line">            view.addOnLayoutChangeListener(newValue);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当一个 listener 有多个方法，它必须分割成多个 listener 。例如， View.OnAttachStateChangeListener 内置两个函数： <code>onViewAttachedToWindow()</code>与 <code>onViewDetachedFromWindow()</code> 。在这里必须为两个不同的属性创建不同的接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewDetachedFromWindow</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewAttachedToWindow</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为改变一个 listener 会影响到另外一个，我们必须编写三个不同的 adapter，包括修改一个属性的和修改两个属性的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onViewAttachedToWindow"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewAttachedToWindow attached)</span> </span>&#123;</div><div class="line">    setListener(view, <span class="keyword">null</span>, attached);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onViewDetachedFromWindow"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewDetachedFromWindow detached)</span> </span>&#123;</div><div class="line">    setListener(view, detached, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:onViewDetachedFromWindow"</span>, <span class="string">"android:onViewAttachedToWindow"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, <span class="keyword">final</span> OnViewDetachedFromWindow detach,</span></span></div><div class="line">        <span class="keyword">final</span> OnViewAttachedToWindow attach) &#123;</div><div class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class="line">        <span class="keyword">final</span> OnAttachStateChangeListener newListener;</div><div class="line">        <span class="keyword">if</span> (detach == <span class="keyword">null</span> &amp;&amp; attach == <span class="keyword">null</span>) &#123;</div><div class="line">            newListener = <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            newListener = <span class="keyword">new</span> OnAttachStateChangeListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (attach != <span class="keyword">null</span>) &#123;</div><div class="line">                        attach.onViewAttachedToWindow(v);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (detach != <span class="keyword">null</span>) &#123;</div><div class="line">                        detach.onViewDetachedFromWindow(v);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</div><div class="line">                newListener, R.id.onAttachStateChangeListener);</div><div class="line">        <span class="keyword">if</span> (oldListener != <span class="keyword">null</span>) &#123;</div><div class="line">            view.removeOnAttachStateChangeListener(oldListener);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (newListener != <span class="keyword">null</span>) &#123;</div><div class="line">            view.addOnAttachStateChangeListener(newListener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的例子比普通情况下复杂，因为 View 是 <code>add/remove</code>　<code>View.OnAttachStateChangeListener</code> 而不是 <code>set</code>。 <code>android.databinding.adapters.ListenerUtil</code>可以用来辅助跟踪旧的 listener 并移除它。</p>
<p>对应 <code>addOnAttachStateChangeListener(View.OnAttachStateChangeListener) )</code>支持的 api 版本，通过向 <code>OnViewDetachedFromWindow</code> 和 <code>OnViewAttachedToWindow</code> 添加 <code>@TargetApi(VERSION_CODES.HONEYCHOMB_MR1)</code> 注解，<br>Data Binding 代码生成器会知道这些 listener 只会在 Honeycomb MR1 或更新的设备上使用。</p>
<h2 id="Converters"><a href="#Converters" class="headerlink" title="Converters"></a>Converters</h2><h3 id="Object-Conversions"><a href="#Object-Conversions" class="headerlink" title="Object Conversions"></a>Object Conversions</h3><p>当 binding 表达式返回对象时，会选择一个 setter（自动 Setter，重命名 Setter，自定义 Setter），将返回对象强制转换成 setter 需要的类型。<br>下面是一个使用 ObservableMap 保存数据的例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">  <span class="attr">android:text</span>=<span class="string">'@&#123;userMap["lastName"]&#125;'</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure>
<p>在这里， userMap 会返回 Object 类型的值，而返回值会被自动转换成 setText(CharSequence) 需要的类型。当对参数类型存在疑惑时，开发者需要手动做类型转换。</p>
<h3 id="Custom-Conversions"><a href="#Custom-Conversions" class="headerlink" title="Custom Conversions"></a>Custom Conversions</h3><p>有些时候我们需要自动转换成特定的类型。比如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">View</span></span></div><div class="line">   <span class="attr">android:background</span>=<span class="string">"@&#123;isError ? @color/red : @color/white&#125;"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>在这里，背景需要的是 Drawable ，但是 color 是一个整数。这时，我们需要使用 BindingConversation 来实现类型的转换。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindingConversion</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorDrawable <span class="title">convertColorToDrawable</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ColorDrawable(color); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Android-Studio对Data-Binding的支持"><a href="#Android-Studio对Data-Binding的支持" class="headerlink" title="Android Studio对Data Binding的支持"></a>Android Studio对Data Binding的支持</h1><ul>
<li><p>Android Studio 支持 Data Binding 表现为：</p>
<ul>
<li>语法高亮</li>
<li>标记表达式语法错误</li>
<li>XML 代码补全</li>
<li>跳转到声明或快速文档 </li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：数组和泛型类型，如 Observable 类，当没有错误时可能会显示错误。</p>
</blockquote>
<ul>
<li>在预览窗口可显示 Data Binding 表达式的默认值。例如：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@&#123;user.firstName, default=FirstName&#125;"</span>/&gt;</div><div class="line">  <span class="comment">&lt;!-- TextView 的 text 默认值为 FirstName --&gt;</span></div></pre></td></tr></table></figure>
<p>如果你需要在设计阶段显示默认值，你可以使用 <code>tools</code> 属性代替默认值表达式，详见 <a href="http://tools.android.com/tips/layout-designtime-attributes" target="_blank" rel="external">设计阶段布局属性 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DataBinding介绍&quot;&gt;&lt;a href=&quot;#DataBinding介绍&quot; class=&quot;headerlink&quot; title=&quot;DataBinding介绍&quot;&gt;&lt;/a&gt;DataBinding介绍&lt;/h1&gt;&lt;p&gt;Data binding 在2015年7月发布的Android Studio v1.3.0 版本上引入，在2016年4月Android Studio v2.0.0 上正式支持。目前为止，Data Binding 已经支持双向绑定了。&lt;/p&gt;
&lt;p&gt;Databinding 是一个实现数据和UI绑定的框架，是一个实现 MVVM 模式的工具，有了 Data Binding，在Android中也可以很方便的实现MVVM开发模式。&lt;/p&gt;
&lt;p&gt;Data Binding 是一个support库，最低支持到Android 2.1（API Level 7+）。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="databingding" scheme="http://yoursite.com/tags/databingding/"/>
    
  </entry>
  
  <entry>
    <title>Blog美化、写作、部署</title>
    <link href="http://yoursite.com/2017/02/09/Blog%E7%BE%8E%E5%8C%96%E3%80%81%E5%86%99%E4%BD%9C%E3%80%81%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2017/02/09/Blog美化、写作、部署/</id>
    <published>2017-02-09T02:47:53.000Z</published>
    <updated>2017-02-20T15:39:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言：Blog搭建完成，既然是专属博客，也就是自己的一方世界，大家肯定都想让Blog有自己的个人色彩，而不必像诸如CSDN一样各种条条框框~</p>
</blockquote>
<hr>
<blockquote>
<p>内容摘要</p>
<ol>
<li>利用Hexo Theme美化Blog    </li>
<li>Hexo命令功能介绍及使用</li>
</ol>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="Blog美化"><a href="#Blog美化" class="headerlink" title="Blog美化"></a>Blog美化</h1><p>在开始美化之前，先来了解一下下_config.yml文件，在Hexo中有两份主要的配置文件，名称都为_config.yml。</p>
<ul>
<li>站点根目录下的_config.yml<br>主要用于Hexo站点的配置，我们称之为<code>站点配置文件</code></li>
<li>主题目录的_config.yml，<br>主要用于主题相关的配置，称之为<code>主题配置文件</code></li>
</ul>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><h3 id="Hexo-Theme"><a href="#Hexo-Theme" class="headerlink" title="Hexo Theme"></a><a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo Theme</a></h3><p><img src="http://static.zybuluo.com/LeoPoldCrossing/chy99uv8c2g1frc7he5efmc7/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2012.54.24.png" alt="屏幕快照 2017-02-09 12.54.24.png-639.2kB"></p>
<h3 id="选择主题，安装"><a href="#选择主题，安装" class="headerlink" title="选择主题，安装"></a>选择主题，安装</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件copy至站点没有理由的 themes 目录下，以Next主题举例：</p>
<ul>
<li><p>Step 1 点击进入主题作者的博客，点击Github<br><img src="http://static.zybuluo.com/LeoPoldCrossing/fdj97m3v6l0zn5v07imub0sz/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2014.03.29.png" alt="屏幕快照 2017-02-09 14.03.29.png-287kB"></p>
</li>
<li><p>Step 2 获取主题地址 ，使用Git checkout 代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd &lt;your hexo folder&gt;</div><div class="line"># https://github.com/iissnan/hexo-theme-next 为主题代码地址</div><div class="line"># themes/next为主题保存路径，next为主题名，可以修改</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
</li>
<li><p>Step 3 启用主题<br>修改<code>站点配置文件</code>,找到theme字段，将其值修改为next(主题名)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
</li>
</ul>
<p>OK~主题安装完成，让我来验证一下，主题是否安装成功</p>
<ul>
<li>Step 4 验证主题效果<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 终端输入命令</div><div class="line">$ hexo generate</div><div class="line">$ hexo server</div><div class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用浏览器访问<a href="http://localhost:4000，查看站点是否正确运行。" target="_blank" rel="external">http://localhost:4000，查看站点是否正确运行。</a></p>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h3><p>Scheme是Next提供的一种特性，为Next提供了多种不同的外观。</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>Scheme的切换通过<code>主题配置文件</code>的scheme字段。效果图，就不上了哈~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Schemes</div><div class="line">scheme: Muse</div><div class="line">#scheme: Mist</div><div class="line">#scheme: Pisces</div></pre></td></tr></table></figure></p>
<h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>编辑<code>站点配置文件</code>，将language设置为所需要的语言。例如简体中文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">language: zh-Hans</div></pre></td></tr></table></figure></p>
<p>Next语言对照表<br><img src="http://static.zybuluo.com/LeoPoldCrossing/r1qp2pht6wrhw0hevowoornk/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2014.43.50.png" alt="屏幕快照 2017-02-09 14.43.50.png-51.1kB"></p>
<h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>菜单设置分为三个部分</p>
<ul>
<li><p>名称和链接：在<code>主题配置文件</code>中配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#配置示例</div><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  #about: /about</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  #search: /search</div><div class="line">  #sitemap: /sitemap.xml</div><div class="line">  #commonweal: /404.html</div></pre></td></tr></table></figure>
</li>
<li><p>菜单显示文本： Hexo在生成时，使用上面配置的名称查找对应语言的翻译。这些翻译文本放置在<code>themes/${主题名}/languages/{language}.yml</code> ({language}为使用的语言)，如中文 对应的就是 zh-Hans.yml </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: 首页</div><div class="line">  archives: 归档</div><div class="line">  categories: 分类</div><div class="line">  schedule: 日程</div><div class="line">  tags: 标签</div><div class="line">  about: 关于</div><div class="line">  search: 搜索</div><div class="line">  commonweal: 公益404</div></pre></td></tr></table></figure>
</li>
<li><p>菜单图标：对应字段为 menu_icons.<code>主题配置文件</code>，注意键值得大小写需要严格匹配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">menu_icons:</div><div class="line">  # 控制图标是否显示，false为不显示</div><div class="line">  enable: true</div><div class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  schedule: calendar</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  sitemap: sitemap</div><div class="line">  commonweal: heartbeat</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h3><p>默认情况下，侧栏仅在文章页面（有目录列表时）显示，并放置于右侧位置。可以通过修改<code>主题配置文件</code>中的sidebar字段来控制侧栏的行为。</p>
<h4 id="设置侧栏位置-，修改sidebar-position的值"><a href="#设置侧栏位置-，修改sidebar-position的值" class="headerlink" title="设置侧栏位置 ，修改sidebar.position的值"></a>设置侧栏位置 ，修改sidebar.position的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sidebar:</div><div class="line">    position: left or right</div></pre></td></tr></table></figure>
<blockquote>
<p>Tips: 目前仅Pisces Scheme支持position配置，影响5.0.0及更低版本 </p>
</blockquote>
<h4 id="设置侧栏显示时机，修改sidebar-diplay的值"><a href="#设置侧栏显示时机，修改sidebar-diplay的值" class="headerlink" title="设置侧栏显示时机，修改sidebar.diplay的值"></a>设置侧栏显示时机，修改sidebar.diplay的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sidebar:</div><div class="line">    display: post(默认值)</div></pre></td></tr></table></figure>
<ul>
<li>post : 默认行为，在文章页面（有目录列表）时显示。</li>
<li>always: 在所有页面显示</li>
<li>hide: 在所有页面都隐藏（可以手动展开）</li>
<li>remove: 完全移除</li>
</ul>
<h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><h3 id="头像配置"><a href="#头像配置" class="headerlink" title="头像配置"></a>头像配置</h3><p>编辑<code>站点配置文件</code>，新增 avatar 字段，值为头像的链接地址。<br><img src="http://static.zybuluo.com/LeoPoldCrossing/ztmwwfedxp5mlnl6baurqb7k/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2018.11.06.png" alt="屏幕快照 2017-02-09 18.11.06.png-40.8kB"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 示例：</div><div class="line">avatar: /images/avatar.png</div></pre></td></tr></table></figure></p>
<h3 id="作者昵称配置"><a href="#作者昵称配置" class="headerlink" title="作者昵称配置"></a>作者昵称配置</h3><p>编辑<code>站点配置文件</code> author 字段</p>
<h3 id="站点描述"><a href="#站点描述" class="headerlink" title="站点描述"></a>站点描述</h3><p>编辑<code>站点配置文件</code> description 字段</p>
<hr>
<h1 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h1><p>根据上面的教程，页面做成自己喜欢的样子，乐呵呵的到处点~ 点到分类和标签的时候，一脸大写的懵逼。。。页面一片空白。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">分类页链接</div><div class="line">https://leopoldcrossing.github.io/categories/</div><div class="line">标签页链接</div><div class="line">https://leopoldcrossing.github.io/tags/</div><div class="line"></div><div class="line">进入 source 目录，发现么有categories和tags文件夹。</div></pre></td></tr></table></figure></p>
<p>问题分析出来，当然要解决了！！！ 是时候让 Hexo 一展身手了。在这里只列出一些常用命令。查看所有命令请移步<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">Hexo命令</a></p>
<h2 id="new-命令"><a href="#new-命令" class="headerlink" title="new 命令"></a>new 命令</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>新建命令，如果么有设置<code>layout</code>，则使用 _config.yml 文件中的 default_layout 的值， 如果 title 包含空格，请使用引号括起来。</p>
<h3 id="layout-取值"><a href="#layout-取值" class="headerlink" title="layout 取值"></a>layout 取值</h3><ul>
<li><p>post： 存储至 source/_post 目录，发布到Blog的文章</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new post &quot;filename&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>page： 存储值 source 目录，新建页面，比如标签，分类等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 新建标签页面</div><div class="line">$ hexo new page tags</div><div class="line"># 新建分类页面</div><div class="line">$ hexo new page categories</div></pre></td></tr></table></figure>
</li>
<li><p>draft： 存储至 source/_draft 目录，新建草稿</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft &quot;filename&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>草稿默认不会显示在页面中，可以通过执行下面的命令显示草稿<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --draft</div></pre></td></tr></table></figure></p>
<p>或者修改<code>站点配置文件</code> 的 <code>render_drafts</code> 参数值为true。</p>
<h2 id="generate-命令"><a href="#generate-命令" class="headerlink" title="generate 命令"></a>generate 命令</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 生成静态文件，即blog目录下的public目录</div><div class="line">$ hexo generate</div><div class="line">or </div><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 文件生成后立刻部署至网站</div><div class="line">$ hexo generate -d or -deploy</div><div class="line"># 监视文件变动</div><div class="line">$ hexo generate -w or -watch</div></pre></td></tr></table></figure>
<h2 id="publish-命令"><a href="#publish-命令" class="headerlink" title="publish 命令"></a>publish 命令</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 发布草稿，即将_draft目录下的文件移动到_posts目录</div><div class="line">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>
<h2 id="server-命令"><a href="#server-命令" class="headerlink" title="server 命令"></a>server 命令</h2><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 启动服务器，默认情况下，访问网址为： http://localhost:4000/。</div><div class="line">$ hexo server</div><div class="line">or </div><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<h3 id="可选参数-1"><a href="#可选参数-1" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 重设端口</div><div class="line">$ hexo server -p or --port</div><div class="line"># 只使用静态文件</div><div class="line">$ hexo server -s or --static</div><div class="line"># 启动日志记录，使用覆盖记录格式</div><div class="line">$ hexo server -l or --log</div></pre></td></tr></table></figure>
<h2 id="deploy命令"><a href="#deploy命令" class="headerlink" title="deploy命令"></a>deploy命令</h2><h3 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 部署generate命令生成的静态文件至blog</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>###　可选参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">＃部署之前生成静态文件</div><div class="line">＄ hexo deploy -g or --generate</div></pre></td></tr></table></figure></p>
<h2 id="clean-命令"><a href="#clean-命令" class="headerlink" title="clean 命令"></a>clean 命令</h2><h3 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 清除缓存文件(db.json)和已生成的静态文件(public)</div><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</p>
<hr>
<h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><h2 id="标签和分类的正确打开姿势"><a href="#标签和分类的正确打开姿势" class="headerlink" title="标签和分类的正确打开姿势"></a>标签和分类的正确打开姿势</h2><ul>
<li><p>修改tags和categories目录下的index.md文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 标签</div><div class="line">date: 2017-02-09 22:53:01</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div><div class="line"></div><div class="line">---</div><div class="line">title: 分类</div><div class="line">date: 2017-02-09 22:53:11</div><div class="line">type: &quot;categories&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
<li><p>MarkDown 编辑文章添加标签和分类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo + GitHub Pages 搭建专属博客</div><div class="line">date: 2017-02-08</div><div class="line">tag:</div><div class="line">    - Hexo</div><div class="line">categories:</div><div class="line">    - 教程</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h2><ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next主题使用文档</a></li>
</ul>
<hr>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><blockquote>
<p>用了两天的时间来搭建Blog和整理教程，在添加多说评论系统时，因为多说服务器的异常，本猿还没成功添加。。。后期会补上。Blog搭建，美化，部署可以暂告一段落，后面我会尽快的整理MarkDown的语法及Git的使用。。。给Blog的搭建画上一个圆满的句号~ </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：Blog搭建完成，既然是专属博客，也就是自己的一方世界，大家肯定都想让Blog有自己的个人色彩，而不必像诸如CSDN一样各种条条框框~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;内容摘要&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用Hexo Theme美化Blog    &lt;/li&gt;
&lt;li&gt;Hexo命令功能介绍及使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages 搭建专属博客</title>
    <link href="http://yoursite.com/2017/02/08/Hexo-Github-Pages-%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/02/08/Hexo-Github-Pages-搭建专属博客/</id>
    <published>2017-02-07T16:00:00.000Z</published>
    <updated>2017-02-09T14:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言：2017年伊始，先给自己定了一个小目标，将Blog迁移到Hexo。本文是我2017年的开始，也是我在Hexo的开端，Mark一下！</p>
</blockquote>
<hr>
<a id="more"></a>
<blockquote>
<p>摘要：本文的核心是介绍如何利用Github Pages 和 Hexo搭建自己的Blog，至于Git的使用，页面的美化，Hexo的命令等，敬请期待。。。别扔鸡蛋</p>
</blockquote>
<hr>
<h1 id="Hexo-GitHub-GithubPages-介绍"><a href="#Hexo-GitHub-GithubPages-介绍" class="headerlink" title="Hexo GitHub GithubPages 介绍"></a>Hexo GitHub GithubPages 介绍</h1><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo是一个快速、简洁且高效的博客框架，Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内即可利用靓丽的主题生成静态网页。</p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>不知道Github的程序猿，不是一只好猿 ~ Github是一个面向开源及私有软件项目的托管平台，仅支持Git作为唯一的版本库格式进行托管。</p>
<h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p>Github Pages可以理解为用户编写的、托管在github上的静态网页，你只需将你的改动提交到Github，就可以实现更改你的网页。</p>
<hr>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Node-js-点击有惊喜"><a href="#Node-js-点击有惊喜" class="headerlink" title="Node.js 点击有惊喜"></a>Node.js <a href="https://nodejs.org/en/download/" target="_blank" rel="external">点击有惊喜</a></h2><p>选择对应的安装包下载，安装我就不啰嗦了，以下命令验证安装是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">$ npm -v</div></pre></td></tr></table></figure>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></h2><ul>
<li>Window下载直接安装即可<a href="https://git-scm.com/download/win" target="_blank" rel="external">点我下载</a></li>
<li><p>Mac建议使用HomeBrew安装Git。</p>
<ul>
<li><p>安装HomeBrew，终端运行下面命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>安装Git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install git</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Hexo-1"><a href="#Hexo-1" class="headerlink" title="Hexo"></a><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></h2><p>安装命令：<br><code>$ npm install -g hexo-cli</code></p>
<hr>
<h1 id="Hexo初始化-建站"><a href="#Hexo初始化-建站" class="headerlink" title="Hexo初始化(建站)"></a>Hexo初始化(建站)</h1><h2 id="初始化Blog文件夹"><a href="#初始化Blog文件夹" class="headerlink" title="初始化Blog文件夹"></a>初始化Blog文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml    配置文件</div><div class="line">├── package.json   应用程序信息</div><div class="line">├── scaffolds      模板文件夹 draft.md post.md page.md    </div><div class="line">├── source         资源文件夹</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes         主题</div></pre></td></tr></table></figure>
<h2 id="Blog配置"><a href="#Blog配置" class="headerlink" title="Blog配置"></a>Blog配置</h2><p>打开_config.yml文件，懵逼了~眼花缭乱。。。挑几个常用的说一下，详解移步<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo 站点配置</a><br><img src="http://static.zybuluo.com/LeoPoldCrossing/27kshpgxiptltk7p06s1cwpr/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2023.03.22.png" alt="屏幕快照 2017-02-08 23.03.22.png-179.7kB"></p>
<h2 id="本地查看Blog效果"><a href="#本地查看Blog效果" class="headerlink" title="本地查看Blog效果"></a>本地查看Blog效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#生成静态文件</div><div class="line">$ hexo generate</div><div class="line">#启动服务器</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<hr>
<h1 id="部署Blog至Github-Pages"><a href="#部署Blog至Github-Pages" class="headerlink" title="部署Blog至Github Pages"></a>部署Blog至Github Pages</h1><h2 id="注册GitHub账户"><a href="#注册GitHub账户" class="headerlink" title="注册GitHub账户"></a><a href="https://github.com/" target="_blank" rel="external">注册GitHub账户</a></h2><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ul>
<li><p>点击New Repository<br><img src="http://static.zybuluo.com/LeoPoldCrossing/yuxp9w6e6t7zzy8pci09p13l/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2021.58.51.png" alt="屏幕快照 2017-02-08 21.58.51.png-12.7kB"></p>
</li>
<li><p>Create a new repository<br><img src="http://static.zybuluo.com/LeoPoldCrossing/4yn5l9oi90843vutpj3ng88i/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2022.01.23.png" alt="屏幕快照 2017-02-08 22.01.23.png-85.7kB"></p>
</li>
</ul>
<h2 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h2><p>Git本地仓库和远程仓库之间的传输协议主要使用ssh协议，所以我们需要设置ssh </p>
<ul>
<li>Step 1 查看是否存在SSH密钥<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.ssh;ls</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果id_rsa.pub和id_rsa文件存在，则证明ssh存在，直接进行Step 3操作</p>
<ul>
<li><p>Step 2 创建ssh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 将根据提供的Email地址生成一对密钥</div><div class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div><div class="line"># 回车则创建默认的ssh，文件名为id_rsa 和 id_rsa.pub</div><div class="line"></div><div class="line"># 下面的命令可以自定义文件名</div><div class="line">$ cat ~/.ssh/&lt;ssh file name&gt;.pub</div></pre></td></tr></table></figure>
</li>
<li><p>Step 3 添加SSH key 到 Github 账户</p>
<ol>
<li><p>添加公钥到Github<br><img src="http://static.zybuluo.com/LeoPoldCrossing/nw1zvm0lfvlhxfr0b0kcy4q7/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2022.14.09.png" alt="屏幕快照 2017-02-08 22.14.09.png-88.6kB"></p>
</li>
<li><p>左侧工具栏点击SSH and GPG keys<br>title 随意填，Key 将id_rsa.pub中的内容copy的这里</p>
</li>
<li>验证链接<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    $ ssh -T git@github.com</div><div class="line">Hi LeoPoldCrossing! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div><div class="line">    # bingo! SSH配置完成</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>Step 4 绑定Git 和 Github</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;your github username&quot;</div><div class="line">$ git config --global user.email &quot;your github email&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="关联Hexo和GitHub"><a href="#关联Hexo和GitHub" class="headerlink" title="关联Hexo和GitHub"></a>关联Hexo和GitHub</h2><ul>
<li><p>Step 1 Copy仓库地址<br><img src="http://static.zybuluo.com/LeoPoldCrossing/tjkk9gavd3p1ynowzwwzv9bk/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2022.35.10.png" alt="屏幕快照 2017-02-08 22.35.10.png-106.9kB"></p>
</li>
<li><p>Step 2 修改_config.yml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/LeoPoldCrossing/LeoPoldCrossing.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>Step 3 在博客目录下执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">or </div><div class="line">$ hexo g</div><div class="line">------------华丽的分割线---------</div><div class="line">$ hexo deploy</div><div class="line">or </div><div class="line">$ hexo d![blog-main.png-368.1kB][6]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>根据提示输入github账号和密码，然后见证劳动成果的时刻<br><strong>浏览器打开 username.github.io(我的是LeoPoldCrossing.github.io)</strong>，效果图如下：<br><img src="http://static.zybuluo.com/LeoPoldCrossing/t6cpsoeyr86jbc4r4fvmbhpj/blog-main.png" alt="blog-main.png-368.1kB"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：2017年伊始，先给自己定了一个小目标，将Blog迁移到Hexo。本文是我2017年的开始，也是我在Hexo的开端，Mark一下！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
