<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-30T05:00:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welcome to Beijing！</title>
    <link href="http://yoursite.com/2017/03/30/Welcome-to-Beijing%EF%BC%81/"/>
    <id>http://yoursite.com/2017/03/30/Welcome-to-Beijing！/</id>
    <published>2017-03-30T04:07:48.000Z</published>
    <updated>2017-03-30T05:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，欢迎来北京吸霾！不废话，直奔主题。</p>
<h1 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h1><p>鉴于各位4月1日比较辛苦，所以4月2日选择古北水镇，10点集合，可以睡个懒觉。4月3日 天漠，柳沟，永宁古城 ，早7点30集合。4月4日，戒指~戒指~戒指，西单逛逛逛，买买买！</p>
<a id="more"></a>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/1cc7ep2a4pr9rx0t6ke5rv31/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-30%2012.55.06.png" alt="屏幕快照 2017-03-30 12.55.06.png-210.9kB"></p>
<h1 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h1><p><strong>北京幸福城酒店</strong><br>一定要幸福~哈哈<br><strong>地址</strong><br>北京市东城区东直门外大街察慈小区一幢<br><strong>入住</strong><br>入住时间04-01，退房时间04-04<br><strong>酒店截图</strong><br><img src="http://static.zybuluo.com/LeoPoldCrossing/vbus57ly3nfuh7v6wgaof0u3/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-30%2011.29.01.png" alt="屏幕快照 2017-03-30 11.29.01.png-348.8kB"><br><img src="http://static.zybuluo.com/LeoPoldCrossing/4pcr41j6a56ux7hwhuj6qt9v/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-30%2011.29.51.png" alt="屏幕快照 2017-03-30 11.29.51.png-296.9kB"></p>
<p>#天气</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/js5bpls1scafjyow5wpwt6vl/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-30%2011.32.34.png" alt="屏幕快照 2017-03-30 11.32.34.png-117.9kB"></p>
<h1 id="游玩详情"><a href="#游玩详情" class="headerlink" title="游玩详情"></a>游玩详情</h1><h2 id="Day1-古北水镇"><a href="#Day1-古北水镇" class="headerlink" title="Day1 古北水镇"></a>Day1 古北水镇</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MzE0MTYwMQ==&amp;mid=2651740138&amp;idx=5&amp;sn=4bb0d138ce0458096ca6b8e471dafc0c&amp;chksm=bd6171e48a16f8f24c3b598c726911d9575cfb4852a55f51ba3ffdda4260bf1e703ee037b3f0&amp;mpshare=1&amp;scene=1&amp;srcid=0330BgR9bElmOeZLbQzEfAEU&amp;key=606f6e65d5dedf6f6eb8bd8c8c9b007fdfa6fa0e84a8562f53b14c13d16fb2159093d025ee4b7864ea216ae6f2e8d731b30cb18e4905fc460b82a9da838916af34251818ebecd96bdf87caa5d58fb152&amp;ascene=0&amp;uin=MjA0NTMzNDM1&amp;devicetype=iMac%20MacBookPro11,5%20OSX%20OSX%2010.12%20build%2816A323%29&amp;version=12010210&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=oZjFDbDGhytuEhMeDe4%2bsIAWH3erApNATSvVnHOuPpg=" target="_blank" rel="external">点击有惊喜</a></p>
<p>行程安排（供参考）<br>10：00<br>　　　　地铁2号线东直门站C口出，东方银座门口集合(找潮尚队旗）</p>
<p>12：00<br>　　　　到达古北水镇，民风淳朴，自由结伴解决午餐午餐<br>　　　　古北口古镇，欣赏江南水乡，小桥流水（进去自由活动）<br>　　　　景区里有很多免费表演，皮影戏，舞狮子，京剧等等可免费观看<br>　　　　景区里有各种展馆，如染坊，酒坊，镖局，均可免费参观</p>
<p>13：30<br>　　　　自由结伴去爬司马台长城，就在景区里面 门票自理</p>
<p>18：00<br>　　　　夜景开始亮灯夜幕降临，当古朴、典雅、北方民国时期的古镇闪现在星空之下。<br>　　　　泛光夜景超凡脱俗，堪称国内首屈一指的美景。</p>
<p>19：30<br>　　　　集合返京 请大家准时</p>
<p>22：00<br>　　　　结束行程，东直门解散，各回各家。
　　　　</p>
<h2 id="Day2-天漠"><a href="#Day2-天漠" class="headerlink" title="Day2 天漠"></a>Day2 天漠</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MzE0MTYwMQ==&amp;mid=2651740111&amp;idx=3&amp;sn=397bd19ad71fb6deddd369993a8d1c35&amp;chksm=bd6171c18a16f8d74b33f53ac226e4842e1b5627305583b19d0beda5b7d9cc35dc74686ca8f9&amp;mpshare=1&amp;scene=1&amp;srcid=0330IjBblBpY4udqDmao4j04&amp;key=ed43990176ad5f45e1fa08663614c0825b3f13b6ab76837378f469320cebbf90fd0dfd6a502449c9c6da68686cb7e9273bf05b8cd495a250ab408a1c8d4843deabb0f32608a63d9829a39b045c20271b&amp;ascene=0&amp;uin=MjA0NTMzNDM1&amp;devicetype=iMac%20MacBookPro11,5%20OSX%20OSX%2010.12%20build%2816A323%29&amp;version=12010210&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=oZjFDbDGhytuEhMeDe4%2bsIAWH3erApNATSvVnHOuPpg=" target="_blank" rel="external">点击有惊喜</a></p>
<p>行程安排（供参考）</p>
<p>07：30<br>　　　　东直门集合，人齐后出发，请大家准时。<br>09：30<br>　　　　怀来【龙门飞甲拍摄地】天漠，徒步沙漠，拍片 看官厅水库的风车群。。<br>12：00<br>　　　　离开天漠，前往柳沟村。<br>13：30<br>　　　　柳沟豆腐宴，饭后村里闲逛。<br>15：00<br>　　　　前往永宁古城，<br>16：00<br>　　　　集合返程。<br>18：30<br>　　　　回到东直门。</p>
<h1 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h1><p>服装：休闲活动，休闲即可，第二天最好是防风的！万一来了沙尘暴呢。。。</p>
<p>装备：墨镜、太阳镜，帽子</p>
<p>生活：防晒霜</p>
<p>药品：创可贴、消炎药，晕车药，胃药等。</p>
<p>设备：照相机，摄像机，数码伴侣，手机，以上电器的充电器。</p>
<p>食品：一路走一路吃</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>中午饭没吃，写了这个，略显仓促。为了迁就我，你们跑来北京吸雾霾，甚是惶恐！ 拖了社会主义后腿，我向毛爷爷，习大大表示忏悔！哈哈~吃饭去了，祝各位北京之行愉快，你们懂得！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，欢迎来北京吸霾！不废话，直奔主题。&lt;/p&gt;
&lt;h1 id=&quot;时间安排&quot;&gt;&lt;a href=&quot;#时间安排&quot; class=&quot;headerlink&quot; title=&quot;时间安排&quot;&gt;&lt;/a&gt;时间安排&lt;/h1&gt;&lt;p&gt;鉴于各位4月1日比较辛苦，所以4月2日选择古北水镇，10点集合，可以睡个懒觉。4月3日 天漠，柳沟，永宁古城 ，早7点30集合。4月4日，戒指~戒指~戒指，西单逛逛逛，买买买！&lt;/p&gt;
    
    </summary>
    
      <category term="忏悔" scheme="http://yoursite.com/categories/%E5%BF%8F%E6%82%94/"/>
    
    
      <category term="诗和远方" scheme="http://yoursite.com/tags/%E8%AF%97%E5%92%8C%E8%BF%9C%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入框架 -- Dagger2 基础</title>
    <link href="http://yoursite.com/2017/03/30/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A1%86%E6%9E%B6-Dagger2-%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/03/30/依赖注入框架-Dagger2-基础/</id>
    <published>2017-03-30T03:25:48.000Z</published>
    <updated>2017-03-30T04:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>dagger2 是解决Android或着Java中依赖注入的一个类库（DI类库）。最近看了一些开源的项目都在使用dagger2，而且有很多对其是甚是推崇，我也蠢蠢欲动。。。在学习dagger2的过程中，我遇到了一下的困惑：</p>
<ul>
<li>dagger2 中的Inject，Component，Module，Provides等等都是什么鬼？有什么作用</li>
<li>dagger2 到底有什么魔力，让大家都推崇备至</li>
<li>如何在项目中更好的使用dagger2 ?</li>
</ul>
<p>在具体的学习过程中，看了好多的博客，有时候感觉挺简单，就那么回事吧，但是真正使用的时候，一脸懵逼了。Component应该怎么用？Module应该放些神马？Scope怎么起到作用域控制？。。。一瞬间怀疑人生。本文将自己对dagger2的理解与大家分享一下，希望能对大家有所帮助。</p>
<a id="more"></a>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>Inject，Component，Module，Provides他们是什么？ 怎么去理解？各自有什么作用？主要讲解抽象的概念，代码的剖析，后期实践中再说~ 下面请看黑板</p>
<h1 id="小科普"><a href="#小科普" class="headerlink" title="小科普"></a>小科普</h1><ul>
<li><p><a href="http://codethink.me/2015/08/01/dependency-injection-theory/" target="_blank" rel="external">依赖注入（Dependency Injection 简称DI)</a></p>
</li>
<li><p><a href="http://baike.baidu.com/item/Java%20%E6%B3%A8%E8%A7%A3?fr=aladdin" target="_blank" rel="external">注解（Annotation）</a></p>
</li>
</ul>
<p>Dagger2 就是通过注解实现依赖注入的一种技术手段。</p>
<h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><p>Dagger2 注入框架最重要的就是注解的使用，那么我们先来逐个分析这些东东。</p>
<h2 id="Inject注解"><a href="#Inject注解" class="headerlink" title="@Inject注解"></a>@Inject注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B b;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B()&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@Inject 注解用来标注目标类依赖的实例以以及被依赖类的构造函数。这样，目标类中依赖的实例与被依赖类的构造函数之间有了一种的联系，茫茫大海中，如何找到相互关联的两个 @Inject注解？</p>
<h2 id="Component-注解"><a href="#Component-注解" class="headerlink" title="@Component 注解"></a>@Component 注解</h2><p>@Component 是连接目标类依赖的实例和被依赖类构造方法的桥梁，@Component标注的类是接口或者抽象类。既然说它是桥梁，我们来分析一下，它是如何工作的。</p>
<ul>
<li>Component类持有目标类的实例。</li>
<li>Component查找目标类中用@Inject注解标注的属性，然后查找该属性对应的用@Inject标注的构造函数。</li>
<li>初始化该属性的实例，并进行赋值。</li>
</ul>
<p>Component 就像是一个注入器，将目标类依赖的实例注入到目标类中。</p>
<blockquote>
<p>Tip：Dagger依赖注入的流程</p>
<ol>
<li>@Inject 标注目标类中的依赖类</li>
<li>@Inject 标注被依赖类的构造函数</li>
<li>若依赖类还有依赖类，重复 step1 step2</li>
<li>调用 Component 的 injectXXX(Object) 方法开始依赖注入。（injectXXX 方法名称是官方推荐。）</li>
</ol>
</blockquote>
<h2 id="Module-注解"><a href="#Module-注解" class="headerlink" title="@Module 注解"></a>@Module 注解</h2><p>新坑来啦！！！项目中会使用很多的第三方类库，对于这些类库的依赖，我们没有办法去修改，不能将@Inject加入到这些类中。这可如何是好。。。</p>
<p>@Module 应运而生，我们可以将第三方类库封装入Module中，来对第三方库进行封装，当然@Module的功能不止封装第三方库，它的应用场景主要有以下三个：</p>
<ul>
<li>接口（Interface）是没有构造方法的</li>
<li>第三方库提供的类，构造方法不能被注解</li>
<li>有些类需要灵活选择初始化配置，而不是使用单一的构造方法</li>
</ul>
<p>Module 其实是一个简单工厂模式，Module里面的方法基本都是创建类示例的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Activity mActivity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityModule</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mActivity = activity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@ActivityScope</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mActivity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Module 和 Component 又是如何关联起来呢？ </p>
<h2 id="Component的新任务"><a href="#Component的新任务" class="headerlink" title="Component的新任务"></a>Component的新任务</h2><p>Component 是注入器，它一段连接目标类，另一端链接被依赖类。之前说到Module类是一个提供类实例的类，所以Component的新职责就是将Module提供的被依赖类示例注入到目标类中。（Component中的modules属性可以把Module加入Component，modules可以加入多个Module）。</p>
<p>引入新问题，Modules 中创建的各种类实例如何注入到目标类中，如何与目标类中@Inject标注的依赖产生关联。</p>
<h2 id="Provides注解"><a href="#Provides注解" class="headerlink" title="@Provides注解"></a>@Provides注解</h2><p>Module 中创建类实例方法用Provides进行标注，Component 在搜索到目标类中用 @Inject 标注的属性后，Component就会去 Module 中去查找用 Provides 标注的对应的创建类实例方法，实现依赖注入。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Inject，Component，Module，Provides 是dagger2中最基础最核心的知识点。</p>
<ul>
<li>@Inject 用来标注目标类的依赖和被依赖类的构造函数</li>
<li>@Component 是一个桥梁，一端是目标类，一端是目标类所依赖的实例。负责依赖注入，同时管理 Module。</li>
<li>Module 和 Provides  Module是一个简单工厂模式，主要包含创建类示例的方法，这些方法用Provides来标注。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;dagger2 是解决Android或着Java中依赖注入的一个类库（DI类库）。最近看了一些开源的项目都在使用dagger2，而且有很多对其是甚是推崇，我也蠢蠢欲动。。。在学习dagger2的过程中，我遇到了一下的困惑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dagger2 中的Inject，Component，Module，Provides等等都是什么鬼？有什么作用&lt;/li&gt;
&lt;li&gt;dagger2 到底有什么魔力，让大家都推崇备至&lt;/li&gt;
&lt;li&gt;如何在项目中更好的使用dagger2 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在具体的学习过程中，看了好多的博客，有时候感觉挺简单，就那么回事吧，但是真正使用的时候，一脸懵逼了。Component应该怎么用？Module应该放些神马？Scope怎么起到作用域控制？。。。一瞬间怀疑人生。本文将自己对dagger2的理解与大家分享一下，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger2" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/Dagger2/"/>
    
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入</title>
    <link href="http://yoursite.com/2017/03/28/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2017/03/28/依赖注入/</id>
    <published>2017-03-28T03:25:48.000Z</published>
    <updated>2017-03-28T06:31:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先来一段看似比较装逼的介绍。在软件工程领域，依赖注入（Dependency Injection）是用于实现控制反转（Inversion of Control）的最常见的方式之一。本文主要介绍依赖注入原理和常见的实现方式</p>
<a id="more"></a>
<h1 id="依赖注入的作用"><a href="#依赖注入的作用" class="headerlink" title="依赖注入的作用"></a>依赖注入的作用</h1><p>控制反转用于解耦，解的究竟是什么？<br>引用一下 Martin Flower在介绍注入时使用的部分代码说明这个问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieFinder finder；</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieLister</span><span class="params">()</span></span>&#123;</div><div class="line">        finder = <span class="keyword">new</span> MovieFinderImpl();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> Movie[] moviesDirectedBy(String arg)&#123;</div><div class="line">        List allMovies = finder.findAll();</div><div class="line">        <span class="keyword">for</span>(Iterator it = allMovies.iterator(); it.hasNext();)&#123;</div><div class="line">            Movie movie = (Movie)it.next();</div><div class="line">            <span class="keyword">if</span>(!movie.getDirector().equals(arg)) it.remove();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (Movie[]) allMovies.toArray(<span class="keyword">new</span> Movie[allMovies.size()]);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MovieFinder</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>脑补一下这段代码的功能：</p>
<ul>
<li>MovieLister的类来提供需要的电影列表，依赖于MovieFinder对象</li>
<li>movieDirectedBy方法根据导演名来筛选电影</li>
<li>MovieFinder接口的实现类MovieFinderImpl负责与数据库交互，搜索电影</li>
</ul>
<p>目前看来，我们完美的实现了功能！然而，我们都晓得，需求是无时无刻不在改变的~😭，现在我们需要将finder的实现改变（比如增加一个参数）。那我们就需要修改多个类。</p>
<p>这就是依赖注入需要处理的耦合。这种在MovieLister中创建MovieFinderImpl的方式，是的MovieLister不仅仅依赖MovieFinder接口，还依赖于MovieFinderImpl这个实现。这种在一个类中，直接创建另一个累的对象的代码，我们称之为hard init , 它是有毒的：</p>
<ul>
<li>修改实现时，我们需要修改new Object的代码</li>
<li>不便于测试，上文中的MovieLister无法单独被测试，其行为和MovieFinderImpl紧紧耦合在一起。</li>
</ul>
<h1 id="依赖注入的实现方式"><a href="#依赖注入的实现方式" class="headerlink" title="依赖注入的实现方式"></a>依赖注入的实现方式</h1><p>其实我们在平常的工作过程中，会经常使用依赖注入，只不过很少注意（反正我是。。。），也不太注意使用依赖注入进行解耦。我们在这里介绍一下依赖注入实现的三种方式。</p>
<h2 id="构造函数注入（Contructor-Injection）"><a href="#构造函数注入（Contructor-Injection）" class="headerlink" title="构造函数注入（Contructor Injection）"></a>构造函数注入（Contructor Injection）</h2><p>在类的外面创建对象，然后通过构造方法传入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造函数注入，MovieLister类就只依赖于我们定义的MovieFinder接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieFinder finder;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieLister</span><span class="params">(MovieFinder finder)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.finder = finder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="setter方法注入"><a href="#setter方法注入" class="headerlink" title="setter方法注入"></a>setter方法注入</h2><p>增加一个setter方法来传入创建好的MovieFinder对象，同样可以避免在MovieFinder中hard init这个对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span></span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinder</span><span class="params">(MovieFinder finder)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.finder = finder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="接口注入"><a href="#接口注入" class="headerlink" title="接口注入"></a>接口注入</h2><p>接口注入使用接口来提供setter方法，其实现方法如下<br>首先创建一个注入使用的接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InjectFinder</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span>；</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后我们让MovieLister实现这个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> <span class="keyword">implements</span> <span class="title">InjectFinder</span></span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.finder = finder;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后我们需要根据不同的框架创建被依赖的MovieFinder的实现。</p>
<h1 id="Java中的注解依赖注入"><a href="#Java中的注解依赖注入" class="headerlink" title="Java中的注解依赖注入"></a>Java中的注解依赖注入</h1><p>在java中，使用注解进行依赖注入是最常用的。通过在字段的声明前添加@Inject注解进行标记，来实现依赖对象的自动注入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Inject</span> Father father</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span></span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>神奇的@Inject注解，一个注解就自动注入了？ 实质上，我们还需要使用依赖注入框架，进行一些配置。比如Dagger。</p>
<p>参考：</p>
<ol>
<li><a href="https://martinfowler.com/articles/injection.html" target="_blank" rel="external">Inversion of Control Containers and the Dependency Injection pattern</a></li>
<li><a href="https://github.com/android-cn/blog/tree/master/java/dependency-injection" target="_blank" rel="external">依赖注入</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;先来一段看似比较装逼的介绍。在软件工程领域，依赖注入（Dependency Injection）是用于实现控制反转（Inversion of Control）的最常见的方式之一。本文主要介绍依赖注入原理和常见的实现方式&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>MVC，MVP，MVVM 架构分析</title>
    <link href="http://yoursite.com/2017/03/10/MVC-MVP-MVVM/"/>
    <id>http://yoursite.com/2017/03/10/MVC-MVP-MVVM/</id>
    <published>2017-03-10T01:55:48.000Z</published>
    <updated>2017-03-28T03:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> MVC,MVP,MVVM 作为 Android 开发中耳熟能详的三个框架，一直处半懵逼的状态，最近分析了一些谷歌官方给出的samples代码，记录下自己的理解，轻喷~</p>
</blockquote>
<a id="more"></a>
<h1 id="MVC-MVP-MVVM"><a href="#MVC-MVP-MVVM" class="headerlink" title="MVC,MVP,MVVM"></a>MVC,MVP,MVVM</h1><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>Model View Controller,软件中最常见的一种框架，Controller 层负责操作 Model 数据，并且返回给 View 层进行展示。</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/oanqhsxxmpa79b49rjc8fqry/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-08%2014.15.04.png" alt="MVC 架构图"></p>
<p>从上图看出，用户通过 view 层发出指令到 controller 层，controller 通知 model 层更新数据，model 完成后直接显示在 view 层上。</p>
<p>既然是 Android 猿，那我们从分析下 MVC模型在 Android 中的提现：</p>
<ul>
<li>View : layout.xml </li>
<li>Model: 各种 JavaBean</li>
<li>Controller : Activity，Fragment 等等</li>
</ul>
<p>我们来分析一个场景：点击按钮下载文件<br>按钮是卸载xml里面的，属于view层的<br>网络请求，数据解析相关代码写在其他类里，比如 netHelper ，属于model层。<br>view 和 model 通过button.setOnClickListener()关联其来，其卸载activity中，对应于 controller 层。</p>
<p>好像很清晰，看起来没毛病的样子~开始搞事情。。。<br>如果数据回来需要在view层进行展示，控制某些控件的隐藏/显示，xml文件就无能为力了，我们只能将代码写在 activity 中。activity 就开始找不到自己的归属了，我是谁？ view or controller？<br>如果一个逻辑复杂的页面，维护起来简直是噩梦。</p>
<p>当然从上图也可以看到Model层和View层并没有隔离开，这是一个重要的缺陷。违背了程序的低耦合原则。</p>
<h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>MVP 作为 MVC 的演化，解决了不少 MVC 的问题。对于 android 来说，MVP 的 model 和 MVC 是一样的，而 activity 和 fragment 不再是 controller 层，而是纯粹的 view 层，所有关于用户事件的转发全部交由 presenter 层处理。<br><img src="http://static.zybuluo.com/LeoPoldCrossing/wkn35fa4inl0j9j4gr9gkrgm/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-09%2009.28.48.png" alt="MVP 架构示例图"></p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>看图说话~我们来分析一下，MVP架构是如何解决 MVC 面对的问题：</p>
<ul>
<li><p>view 层和 model 层完全解耦。<br>Presenter 充当桥梁，view 层发出的事件传递到 presenter 层，由P层操作model，获取数据后通知 view 层更新UI。</p>
</li>
<li><p>activity 和 fragment 臃肿的问题。<br>activity 和 fragment 属于 view 层，仅仅是数据回调后更新 UI。在activity中和fragment中没有任何与model相关的逻辑代码，而是将这部分代码放到presenter层中，通过接口的形式将 view 层需要的数据返回。</p>
</li>
<li><p>便于测试。<br>比如如果我们需要测试获取数据功能，只需要实现对应的接口，看presenter是否调用了相应的方法。也可以在presenter中制造假数据，分发给view ，用来测试布局是否正确。</p>
</li>
<li><p>逻辑清晰，耦合性低，可维护性提高</p>
</li>
</ul>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ul>
<li>接口过多，一定程度影响我们的编码效率和代码可读性</li>
<li>逻辑比较复杂的页面，Activity 代码还是会比较多，当然要比MVC要好的多，而且逻辑清晰</li>
<li>Presenter 层比较臃肿</li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li>使用 Fragment 作为 view 层，而 activity 则是一个用于创建 view(fragment)和 presenter 的控制器。</li>
<li>根据业务需求抽取基类，定义接口，公共的逻辑尽量抽取，减少代码量。</li>
</ul>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>MVVM 最早是由微软提出，先上图：<br><img src="http://static.zybuluo.com/LeoPoldCrossing/032tt769o9u7x2kd45oijzrp/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-09%2018.03.19.png" alt="MVVM 架构图"><br>从 MVVM 架构图分析，MVVM 和 MVP 的区别貌似不大，presenter 换成了 viewmodel层，还有一点就是 view 层和 viewModel 层是binding的关系。viewmodel层的数据发生变化时，view层会相应的更新UI。</p>
<h3 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h3><p><a href="https://leopoldcrossing.github.io/2017/02/17/DataBinding%E4%BB%8B%E7%BB%8D/" target="_blank" rel="external">DataBinding框架</a><br>Android 平台 MVVM 的目前相当火爆，谷歌欧巴的DataBinding框架功不可没。它可以让我们轻松的实现MVVM。看了网上很多的文章，都说DataBinding就是ViewModel层，我有点不同的看法，在这里提出来，大家讨论一下。</p>
<ul>
<li><p>众多博文的观点： Android 中 MVVM 就是 Databinding 框架的运用。Android Data Binding中的 ViewModel是根据layout自动生成的Binding类，比如 activity_main.xml ,生成的Binding类就是ActivityMainBinding。</p>
</li>
<li><p>不同观点：ViewModel 是可以进行 binding 的数据模型，Binding 类是View 和 ViewModel 之间的桥梁。ViewModel层数据对象三种形式：</p>
</li>
</ul>
<ol>
<li>继承BaseObservable </li>
<li>Observable Fields</li>
<li>Observable Collections<br>这样定义的数据对象发生改变时，同步更新UI。<br>DataBinding 框架通过<code>setContentView(int  resourceId
)</code> 和<code>setXXX()</code> 方法完成View和ViewModel的绑定。</li>
</ol>
<h2 id="小结：理论知识讲完了，我们总结一下"><a href="#小结：理论知识讲完了，我们总结一下" class="headerlink" title="小结：理论知识讲完了，我们总结一下"></a>小结：理论知识讲完了，我们总结一下</h2><ul>
<li>了解区分 MVC，MVP，MVVM</li>
<li>初步了解这三种模式在Android中的使用。</li>
<li>DataBinding 在 MVVM 模式中的职责</li>
</ul>
<p>其实，真正的最佳实践都是人想出来的，我们并不一定要死磕一种模式。see一下谷歌大大实现的架构。</p>
<h1 id="Android-官方架构分析"><a href="#Android-官方架构分析" class="headerlink" title="Android 官方架构分析"></a>Android 官方架构分析</h1><h2 id="Android-architecture介绍"><a href="#Android-architecture介绍" class="headerlink" title="Android - architecture介绍"></a>Android - architecture介绍</h2><p><a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">项目地址:android-architecture</a><br>Android框架提供了很大的灵活性去创建一个APP。这种灵活性很有价值，但是也让app有很多类，不一致的命名和不规范的框架结构。导致测试，维护，扩展困难。<br>Android Architecture 演示了帮助解决或避免这些问题的常用方案，该项目用不同的架构实现了同一个APP。当然这些samples仅仅是作为参考，在我们创建自己的app时，还是根据需求选择最合适的。</p>
<h3 id="稳定的samples"><a href="#稳定的samples" class="headerlink" title="稳定的samples"></a>稳定的samples</h3><p><img src="http://static.zybuluo.com/LeoPoldCrossing/k6uhs2m0fx4ocf9ks4qer2hn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-10%2015.00.21.png" alt="屏幕快照 2017-03-10 15.00.21.png-98.7kB"></p>
<h3 id="正在开发的samples"><a href="#正在开发的samples" class="headerlink" title="正在开发的samples"></a>正在开发的samples</h3><p><img src="http://static.zybuluo.com/LeoPoldCrossing/fe3cf56gby1dqt2ai4nr4g0b/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-10%2015.00.41.png" alt="屏幕快照 2017-03-10 15.00.41.png-47.6kB"></p>
<p>废话不多说了，下面选择两个我想要在项目中使用的两个架构进行分析：<br><code>todo-mvp</code>和<code>todo-mvp-databinding</code></p>
<h2 id="TODO-MVP架构分析"><a href="#TODO-MVP架构分析" class="headerlink" title="TODO-MVP架构分析"></a>TODO-MVP架构分析</h2><p>todo-mvp 是基础的MVP架构，没有使用其他的任何类库。</p>
<h3 id="app设计"><a href="#app设计" class="headerlink" title="app设计"></a>app设计</h3><p>该示例项目的代码组织方式完全按照功能组织</p>
<ul>
<li>Tasks - 管理tasks列表</li>
<li>TaskDetail - 查看task详情，并提供删除功能</li>
<li>AddEditTask - 增加和编辑 tasks</li>
<li>Statistics - 查看最近的日程 </li>
</ul>
<p>每一个功能内部分为xActivity,xContract,xFragment,xPresenter四个类文件。</p>
<ul>
<li>Activity 类，用于创建Fragment 和 Presenter</li>
<li>Contract 类，这个与之前见到的mvp实现都不同，该类用于统一管理 view 和 presenter 的所有接口，使得 view 和 presenter 中的功能非常清晰。</li>
<li>Fragment类，View 层 ，实现 view 接口</li>
<li>Presenter类，Contract类中相应 Presenter 接口的实现类</li>
</ul>
<p>结构图如下：<br><img src="http://static.zybuluo.com/LeoPoldCrossing/65hqqxllygeeef2okibi9mfc/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-10%2015.29.23.png" alt="屏幕快照 2017-03-10 15.29.23.png-25.1kB"></p>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h4><p>我们先来看两个Base接口类， BasePresenter 和 BaseView<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BasePresenter中含有方法start(),该方法的作用是presenter开始获取数据并调用 view 中的方法更新UI。其调用时机是在 Fragment 类的 onResume() 方法中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BaseView 中含有方法 setPresenter，该方法作用是将presenter示例传入 view 中，调用时机是 Presenter 实现类的构造函数中。</p>
<h4 id="契约类"><a href="#契约类" class="headerlink" title="契约类"></a>契约类</h4><p>之前说过契约类，是与之前所见的MVP实现不同，也是我感觉很优雅的地方。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">view 和 presenter 的职责很明了，增删改都很方便</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskDetailContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setLoadingIndicator</span><span class="params">(<span class="keyword">boolean</span> active)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showMissingTask</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">editTask</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">deleteTask</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">completeTask</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">activateTask</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Activity-的作用"><a href="#Activity-的作用" class="headerlink" title="Activity 的作用"></a>Activity 的作用</h3><p>Activity 在项目中是一个控制者，负责创建 view 及 presenter 实例，并将二者进行关联。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">TaskDetailFragment taskDetailFragment = (TaskDetailFragment) getSupportFragmentManager()</div><div class="line">                .findFragmentById(R.id.contentFrame);</div><div class="line"></div><div class="line">        if (taskDetailFragment == null) &#123;</div><div class="line">            taskDetailFragment = TaskDetailFragment.newInstance(taskId);</div><div class="line"></div><div class="line">            ActivityUtils.addFragmentToActivity(getSupportFragmentManager(),</div><div class="line">                    taskDetailFragment, R.id.contentFrame);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Create the presenter</div><div class="line">        new TaskDetailPresenter(</div><div class="line">                taskId,</div><div class="line">                Injection.provideTasksRepository(getApplicationContext()),</div><div class="line">                taskDetailFragment);</div></pre></td></tr></table></figure></p>
<h3 id="MVP-的实现与组织"><a href="#MVP-的实现与组织" class="headerlink" title="MVP 的实现与组织"></a>MVP 的实现与组织</h3><ul>
<li><p>Presenter 创建时将 Fragment 作为参数传入构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TasksPresenter</span><span class="params">(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView)</span> </span>&#123;</div><div class="line">        mTasksRepository = checkNotNull(tasksRepository, <span class="string">"tasksRepository cannot be null"</span>);</div><div class="line">        mTasksView = checkNotNull(tasksView, <span class="string">"tasksView cannot be null!"</span>);</div><div class="line">        <span class="comment">// view 调用setPresenter方法，注入 presenter 示例</span></div><div class="line">        mTasksView.setPresenter(<span class="keyword">this</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Fragment onResume() 方法中调用 presenter.start()方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class TaskDetailFragment extends Fragment implements TaskDetailContract.View &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onResume() &#123;</div><div class="line">        super.onResume();</div><div class="line">        mPresenter.start();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void setPresenter(@NonNull TaskDetailContract.Presenter presenter) &#123;</div><div class="line">        mPresenter = checkNotNull(presenter);</div><div class="line">    &#125;</div><div class="line">    ...</div></pre></td></tr></table></figure>
</li>
</ul>
<p>分析代码得出view 和 presenter 相互持有，并且通过构造函数或set方法进行依赖注入。view 处理用户与界面的交互，presenter与model层交互，处理数据回调的逻辑判断，如果需要更新UI，直接调用view的方法，实现了 view 和 presenter 的各司其职。</p>
<h3 id="Model-层设计"><a href="#Model-层设计" class="headerlink" title="Model 层设计"></a>Model 层设计</h3><p>Model 最大的特点就是被赋予了获取数据的职责。与我们平常Model只定义Bean对象不同，todo-mvp中，数据的获取，存储，数据状态变化都是model层的任务。Presenter 只需要调用该层的方法并传入回调。</p>
<p>总结：MVP遵循类单一职责的编程原则，但是代码量相对增加，而且view层的代码依然略显臃肿，xml文件作为View层的能力依然很弱，UI的更新依然需要咋Fragment中处理。</p>
<h3 id="MVVM-与-MVP-相结合架构分析"><a href="#MVVM-与-MVP-相结合架构分析" class="headerlink" title="MVVM 与 MVP 相结合架构分析"></a>MVVM 与 MVP 相结合架构分析</h3><p>该架构基于 todo-mvp 示例并且使用了 DataBinding 库来展示数据和绑定事件。<br>它并不是严格的遵守 MVVM 模型 或者 MVP 模型，它同时使用了 ViewModel 和 Presenter 。</p>
<h4 id="app-设计"><a href="#app-设计" class="headerlink" title="app 设计"></a>app 设计</h4><p>目录结构与todo-mvp一致。只是多了一个ViewModel。Statistics 和 tasks 模块实现ViewModel的方式并不一样，我们来逐个分析。</p>
<p><img src="http://static.zybuluo.com/LeoPoldCrossing/72rwqh88tal6nq3okqgx23uu/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-11%2013.14.33.png" alt="屏幕快照 2017-03-11 13.14.33.png-31.5kB"></p>
<h4 id="Statistics-模块"><a href="#Statistics-模块" class="headerlink" title="Statistics 模块"></a>Statistics 模块</h4><p>Statistics 模块<br>主要类：Activity ,Fragment ,ViewModel,Presenter</p>
<ul>
<li><p>StatisticsActivity ： 创建 Fragment，ViewModel ， Presenter对象，管理注入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">StatisticsFragment statisticsFragment = (StatisticsFragment) getSupportFragmentManager()</div><div class="line">    .findFragmentById(R.id.contentFrame);</div><div class="line">    <span class="keyword">if</span> (statisticsFragment == <span class="keyword">null</span>) &#123;</div><div class="line">        statisticsFragment = StatisticsFragment.newInstance();</div><div class="line">    ActivityUtils.addFragmentToActivity(getSupportFragmentManager(),</div><div class="line">                    statisticsFragment, R.id.contentFrame);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">StatisticsViewModel statisticsViewModel = <span class="keyword">new</span> StatisticsViewModel(getApplicationContext());</div><div class="line"></div><div class="line"><span class="comment">// 注入viewModel，用于binding至xml文件</span></div><div class="line">statisticsFragment.setViewModel(statisticsViewModel);</div><div class="line"></div><div class="line"><span class="comment">// viewmodel 实现 view， 构造方法注入到presenter</span></div><div class="line">StatisticsPresenter statisticsPresenter = <span class="keyword">new</span> StatisticsPresenter(</div><div class="line">        Injection.provideTasksRepository(getApplicationContext()), statisticsViewModel);</div><div class="line"></div><div class="line"><span class="comment">// Fragment 注入 presenter。</span></div><div class="line">statisticsFragment.setPresenter(statisticsPresenter);</div></pre></td></tr></table></figure>
</li>
<li><p>StatisticsFragment ： 调用presenter的方法获取数据，绑定 viewmodel 至xml </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(@NonNull StatisticsPresenter presenter)</span></span>&#123;</div><div class="line">    mPresenter = checkNotNull(presenter)</div><div class="line">&#125;</div><div class="line"></div><div class="line">mViewDataBinding.setStats(mStatisticsViewModel)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"stats"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"com.example.android.architecture.blueprints.todoapp.statistics.StatisticsViewModel"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>StatisticsViewModel ： 提供get set方法，binding 到 xml 文件，自动更新UI</p>
</li>
<li><p>StatisticsPresenter ： 与Model 层交互，获取数据后传递给viewmodel，更新UI</p>
</li>
</ul>
<h4 id="Tasks模块"><a href="#Tasks模块" class="headerlink" title="Tasks模块"></a>Tasks模块</h4><p>Tasks 模块 MVP 结构的组织与实现与todo-mvp一致。<br>主要类： TasksActivity,TasksFragment,TasksPresenter,TasksItemActionHandler,TasksViewModel。</p>
<ul>
<li><p>TasksActivity ：管理，创建对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">TasksFragment tasksFragment =</div><div class="line">            (TasksFragment) getSupportFragmentManager().findFragmentById(R.id.contentFrame);</div><div class="line">    if (tasksFragment == null) &#123;</div><div class="line">        // Create the fragment</div><div class="line">        tasksFragment = TasksFragment.newInstance();</div><div class="line">        ActivityUtils.addFragmentToActivity(</div><div class="line">                getSupportFragmentManager(), tasksFragment, R.id.contentFrame);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Create the presenter</div><div class="line">    mTasksPresenter = new TasksPresenter(Injection.provideTasksRepository(</div><div class="line">            getApplicationContext()), tasksFragment);</div><div class="line">    </div><div class="line">    // 创建时注入Presenter，是为了方法的重用。</div><div class="line">    TasksViewModel tasksViewModel =</div><div class="line">            new TasksViewModel(getApplicationContext(), mTasksPresenter);</div><div class="line">    // 注入viewModel，通过Binding类与xml文件关联</div><div class="line">    tasksFragment.setViewModel(tasksViewModel);</div></pre></td></tr></table></figure>
</li>
<li><p>TasksFragment : View 层，持有ViewModel 和 Presenter。将ViewModel绑定至xml文件，根据数据自动更新UI，调用Presenter的方法获取或更新数据，处理用户和组件的交互。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TasksFragBinding tasksFragBinding = TasksFragBinding.inflate(inflater, container, false);</div><div class="line">// 绑定viewmodel 和 xml文件，自动更新UI。</div><div class="line">tasksFragBinding.setTasks(mTasksViewModel);</div><div class="line">// 将presenter与xml绑定，作为事件处理类，重用方法</div><div class="line">tasksFragBinding.setActionHandler(mPresenter);</div></pre></td></tr></table></figure>
</li>
<li><p>TasksPresenter : 和 todo-mvp 的presenter 没什么区别，获取数据，然后调用view的方法，更新UI。</p>
</li>
<li><p>TasksViewModel : 继承BaseObservable，在与Xml文件绑定后，内容发生改变时刻自动更新UI。<br>注意 <code>@Bindable</code> 注解和 <code>notifyPropertyChanged()</code>的使用; </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">public class TasksViewModel extends BaseObservable &#123;</div><div class="line"></div><div class="line">    int mTaskListSize = 0;</div><div class="line"></div><div class="line">    private final TasksContract.Presenter mPresenter;</div><div class="line"></div><div class="line">    private Context mContext;</div><div class="line"></div><div class="line">    public TasksViewModel(Context context, TasksContract.Presenter presenter) &#123;</div><div class="line">        mContext = context;</div><div class="line">        mPresenter = presenter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public String getCurrentFilteringLabel() &#123;</div><div class="line">        switch (mPresenter.getFiltering()) &#123;</div><div class="line">            case ALL_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.label_all);</div><div class="line">            case ACTIVE_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.label_active);</div><div class="line">            case COMPLETED_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.label_completed);</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public String getNoTasksLabel() &#123;</div><div class="line">        switch (mPresenter.getFiltering()) &#123;</div><div class="line">            case ALL_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.no_tasks_all);</div><div class="line">            case ACTIVE_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.no_tasks_active);</div><div class="line">            case COMPLETED_TASKS:</div><div class="line">                return mContext.getResources().getString(R.string.no_tasks_completed);</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public Drawable getNoTaskIconRes() &#123;</div><div class="line">        switch (mPresenter.getFiltering()) &#123;</div><div class="line">            case ALL_TASKS:</div><div class="line">                return mContext.getResources().getDrawable(R.drawable.ic_assignment_turned_in_24dp);</div><div class="line">            case ACTIVE_TASKS:</div><div class="line">                return mContext.getResources().getDrawable(R.drawable.ic_check_circle_24dp);</div><div class="line">            case COMPLETED_TASKS:</div><div class="line">                return mContext.getResources().getDrawable(R.drawable.ic_verified_user_24dp);</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public boolean getTasksAddViewVisible() &#123;</div><div class="line">        return mPresenter.getFiltering() == ALL_TASKS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public boolean isNotEmpty() &#123;</div><div class="line">        return mTaskListSize &gt; 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTaskListSize(int taskListSize) &#123;</div><div class="line">        mTaskListSize = taskListSize;</div><div class="line">        notifyPropertyChanged(BR.noTaskIconRes);</div><div class="line">        notifyPropertyChanged(BR.noTasksLabel);</div><div class="line">        notifyPropertyChanged(BR.currentFilteringLabel);</div><div class="line">        notifyPropertyChanged(BR.notEmpty);</div><div class="line">        notifyPropertyChanged(BR.tasksAddViewVisible);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>TasksItemActionHandler : 绑定至xml文件，通过set方法注入，传入Presenter，可以重用方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class TasksItemActionHandler &#123;</div><div class="line"></div><div class="line">    private TasksContract.Presenter mListener;</div><div class="line"></div><div class="line">    public TasksItemActionHandler(TasksContract.Presenter listener) &#123;</div><div class="line">        mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Called by the Data Binding library when the checkbox is toggled.</div><div class="line">     */</div><div class="line">    public void completeChanged(Task task, boolean isChecked) &#123;</div><div class="line">        if (isChecked) &#123;</div><div class="line">            mListener.completeTask(task);</div><div class="line">        &#125; else &#123;</div><div class="line">            mListener.activateTask(task);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Called by the Data Binding library when the row is clicked.</div><div class="line">     */</div><div class="line">    public void taskClicked(Task task) &#123;</div><div class="line">        mListener.openTaskDetails(task);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>总结：该架构节省去了findViewById的苦力活，通过Binding库和ViewModel层增强了XMl的功能。<br>相比MVP，view层中的代码减少，UI展式改变只需改变ViewModel层。<br>项目MVVM，业务逻辑代码放在了Presenter中，明确了各层的职责。<br>这也是我比较倾向在项目中使用的架构。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>作为程序猿，纸上来的终觉浅，既然觉得浅了，咱们就去玩一些深的，自己去实现以下MVC，MVP，MVVM。实践出真知，真正的理解这三种架构。敬请期待~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; MVC,MVP,MVVM 作为 Android 开发中耳熟能详的三个框架，一直处半懵逼的状态，最近分析了一些谷歌官方给出的samples代码，记录下自己的理解，轻喷~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="架构分析" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>DataBinding- Say Goodye to FindViewById</title>
    <link href="http://yoursite.com/2017/02/17/DataBinding%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2017/02/17/DataBinding介绍/</id>
    <published>2017-02-17T01:55:48.000Z</published>
    <updated>2017-02-22T09:11:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DataBinding介绍"><a href="#DataBinding介绍" class="headerlink" title="DataBinding介绍"></a>DataBinding介绍</h1><p>Data binding 在2015年7月发布的Android Studio v1.3.0 版本上引入，在2016年4月Android Studio v2.0.0 上正式支持。目前为止，Data Binding 已经支持双向绑定了。</p>
<p>Databinding 是一个实现数据和UI绑定的框架，是一个实现 MVVM 模式的工具，有了 Data Binding，在Android中也可以很方便的实现MVVM开发模式。</p>
<p>Data Binding 是一个support库，最低支持到Android 2.1（API Level 7+）。</p>
<a id="more"></a>
<p>Data Binding 之前，我们不可避免地要编写大量的毫无营养的代码，如 findViewById()、setText()，setVisibility()，setEnabled() 或 setOnClickListener() 等，通过 Data Binding , 我们可以通过声明式布局以精简的代码来绑定应用程序逻辑和布局，这样就不用编写大量的毫无营养的代码了。</p>
<p>文中的示例代码地址<a href="https://github.com/LeoPoldCrossing/DataBindingSamples" target="_blank" rel="external">DataBindingSamples</a></p>
<hr>
<h1 id="DataBinding简单使用示例"><a href="#DataBinding简单使用示例" class="headerlink" title="DataBinding简单使用示例"></a>DataBinding简单使用示例</h1><h2 id="DataBinding环境"><a href="#DataBinding环境" class="headerlink" title="DataBinding环境"></a>DataBinding环境</h2><p>App Module - build.gradle中开启dataBinding<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">    ...</div><div class="line">    dataBinding&#123;</div><div class="line">        enable = true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="修改Layout文件"><a href="#修改Layout文件" class="headerlink" title="修改Layout文件"></a>修改Layout文件</h2><p>使用dataBingding需要修改Layout文件，根标签不再是线性布局，相对布局等，而是使用layout标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">        xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;</div><div class="line">        &lt;!-- 原根节点 --&gt;</div><div class="line">        &lt;LinearLayout&gt;</div><div class="line">        ...</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure></p>
<h2 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h2><p>就是一个Model，就不贴代码了</p>
<h2 id="UI绑定"><a href="#UI绑定" class="headerlink" title="UI绑定"></a>UI绑定</h2><ul>
<li>修改布局文件,定义variable</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;layout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    &gt;</div><div class="line">    &lt;data&gt;</div><div class="line">    </div><div class="line">        &lt;variable</div><div class="line">            name=&quot;user&quot;</div><div class="line">            type=&quot;com.example.databindingsamples.model.User&quot; /&gt;</div><div class="line">        # 也可以写成</div><div class="line">        &lt;import type=&quot;com.example.databindingsamples.model.User&quot; /&gt;</div><div class="line">        &lt;variable name=&quot;user&quot; type=&quot;User&quot; /&gt;</div><div class="line">        </div><div class="line">    &lt;/data&gt;</div><div class="line">...</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">            ...</div><div class="line">            # 使用 variable</div><div class="line">            android:text=&quot;@&#123;user.firstName&#125;&quot;</div><div class="line">            ...</div><div class="line">            /&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            ...</div><div class="line">            android:text=&quot;@&#123;user.lastName&#125;&quot;</div><div class="line">            ... /&gt;</div><div class="line">         &lt;TextView</div><div class="line">            ...</div><div class="line">            android:visibility=&quot;@&#123;!user.adult ? View.VISIBLE:View.GONE&#125;&quot;</div><div class="line">            ... /&gt;</div><div class="line">&lt;/layout&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>绑定 variable<br>修改<code>onCreate</code>方法 使用<code>DataBingdingUtil.setContentView</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    ActivityBasicBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_basic);</div><div class="line">    User user = new User(&quot;leo&quot;, &quot;wang&quot;, 20);</div><div class="line">    binding.setUser(user);</div><div class="line">    # 或者使用setVariable()</div><div class="line">    binding.setVariable(BR.user,user)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ActivityBasicBinding</code>类是自动生成的，所有的<code>set</code>方法也是根据<code>variable</code>名称生成的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 类名生成</div><div class="line">activity_basic.xml -&gt; ActivityBasicBinding</div><div class="line"># set方法生成</div><div class="line">user -&gt; setUser(User user)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h3 id="创建代理类"><a href="#创建代理类" class="headerlink" title="创建代理类"></a>创建代理类</h3><p>先来创建一个事件的处理类，并在<code>layout</code>文件中声明。<br>知道大家都是好奇宝宝，先忍会哈~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class EventHandler &#123;</div><div class="line">    public void onDisplayNameClick(View view) &#123;</div><div class="line">        Toast.makeText(view.getContext(), &quot;DisplayName : &quot; + user.getDisplayName(), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onFirstNameClick(User user) &#123;</div><div class="line">        Toast.makeText(BasicActivity.this, &quot;FirstName : &quot; + user.getFirstName(), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onLastNameClick(View view, User user) &#123;</div><div class="line">        Toast.makeText(BasicActivity.this, &quot;LastName : &quot; + user.getLastName(), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onAgeClick(View view) &#123;</div><div class="line">        if (user.getAge() &gt; 18) &#123;</div><div class="line">            user.setAge(16);</div><div class="line">        &#125; else &#123;</div><div class="line">            user.setAge(28);</div><div class="line">        &#125;</div><div class="line">        binding.setUser(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Method-Reference"><a href="#Method-Reference" class="headerlink" title="Method Reference"></a>Method Reference</h3><p>事件绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:onClick=&quot;@&#123;handler.onDisplayNameClick&#125;&quot;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Tip:引用的方法参数必须和事件回调参数一致<br>比如 android:onClick , 引用的方法参数必须为（View view）</p>
</blockquote>
<h3 id="Listener-Binding"><a href="#Listener-Binding" class="headerlink" title="Listener Binding"></a>Listener Binding</h3><p>监听器绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:onClick=&quot;@&#123;()-&gt; handler.onFirstNameClick(user)&#125;&quot;</div><div class="line"></div><div class="line">android:onClick=&quot;@&#123;(view)-&gt; handler.onLastNameClick(view,user)&#125;&quot;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Tip: 可自定义传递参数</p>
</blockquote>
<h3 id="绑定-handler"><a href="#绑定-handler" class="headerlink" title="绑定 handler"></a>绑定 handler</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">binding.setHandler(new EventHandler());)</div></pre></td></tr></table></figure>
<h1 id="布局细节"><a href="#布局细节" class="headerlink" title="布局细节"></a>布局细节</h1><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h2><ul>
<li>Java代码中一样在xml文件中 import class <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;imports type=&quot;android.view.View&quot;/&gt;</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:visibility=&quot;@&#123;user.isAdult?View.VISIBLE:View.GONE&#125;&quot;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>类型别名<br>如果在data节点导入两个同名类，使用<code>alias</code>属性，给类赋一个别名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;import type=&quot;com.example.home.data.User&quot; /&gt;</div><div class="line">&lt;import type=&quot;com.examle.detail.data.User&quot; alias=&quot;DetailUser&quot; /&gt;</div><div class="line">&lt;variable name=&quot;detailUser&quot; type=&quot;DetailUser&quot; /&gt;</div><div class="line">&lt;variable name=&quot;user&quot; type=&quot;User&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>表达式使用导入的类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;data&gt;</div><div class="line">    &lt;import type=&quot;com.example.User&quot;/&gt;</div><div class="line">    &lt;import type=&quot;java.util.List&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;user&quot; type=&quot;User&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;userList&quot; type=&quot;List&amp;lt;User&amp;gt&quot;/&gt;</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>静态字段和方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">     &lt;import type=&quot;com.example.databindingsamples.utils.MyStringUtils&quot; alias=&quot;StringUtil&quot;/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">…</div><div class="line">&lt;TextView</div><div class="line">   android:text=&quot;@&#123;MyStringUtils.capitalize(user.lastName)&#125;&quot;</div><div class="line">   android:layout_width=&quot;wrap_content&quot;</div><div class="line">   android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p><code>data</code> 标签下可以定义任意数量的 <code>variable</code> 标签，每一个<code>variable</code>标签都描述一个可以在binding表达式中使用的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import type=&quot;android.graphics.drawable.Drawable&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;image&quot; type=&quot;Drawable&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;note&quot; type=&quot;String&quot;/&gt;</div><div class="line">&lt;/data&gt;</div></pre></td></tr></table></figure></p>
<p>变量类型会在编译时检查，所以如果一个变量实现了了Observable 或者 是一个 Observable 集合，它会被反射调用。</p>
<p>如果变量声明的是一个未实现的Observable基类或者接口，该变量不会被观察，也就是变量的改动不会改变UI。</p>
<p>binding 类自动生成会为每一个变量自动生成 getter 和 setter 方法。在 setter 方法没有调用之前，他们都被设置为默认值：Object 设置为 null ， int 设置为 0 ， boolean 设置为 false 等等。。。</p>
<h2 id="Binding类自定义"><a href="#Binding类自定义" class="headerlink" title="Binding类自定义"></a>Binding类自定义</h2><ul>
<li><p>自定义类名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 生成的binding类位于databinding包下</div><div class="line">&lt;!--&lt;data class=&quot;ContactBinding&quot;&gt;--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义类名，并修改生成路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!--&lt;data class=&quot;.ContactBinding&quot;&gt;--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义类名和生成路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;data class=&quot;com.example.databindingsamples.ContactBinding&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h2><p>在使用应用命名空间的布局中，变量可以传递到任何 include 布局中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Root添加命名空间</div><div class="line">xmlns:bind=&quot;http://schemas.android.com/apk/res-auto</div><div class="line"># 绑定数据</div><div class="line"></div><div class="line">&lt;include</div><div class="line">    android:id=&quot;@+id/layout_user&quot;</div><div class="line">    layout=&quot;@layout/include_user&quot;</div><div class="line">    bind:user=&quot;@&#123;user&#125;&quot; /&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Tip：</p>
<ol>
<li>需要注意的是<code>user</code>变量必须在 include 的布局中声明。</li>
<li>如果在非根节点的 ViewGroup 中使用 include 会导致 crash</li>
</ol>
</blockquote>
<h2 id="ViewStubs"><a href="#ViewStubs" class="headerlink" title="ViewStubs"></a>ViewStubs</h2><blockquote>
<p>ViewStub 是一种不可见的，0尺寸在运行时懒加载的View。当其设置为visible或者调用了inflate()方法时，它会被加载完成的view或者views替换掉。因此，ViewStub 在 setVisibility(int) 或者 inflate() 方法被调用后在 hierarchy 中就不存在了。加载后的 view 会被添加到Viewstub的父容器中，并且参数为ViewStub的布局参数。 </p>
</blockquote>
<p>因为 ViewStub 会被移除，且 Binding 类中的 View 全部都是 final 修饰，所以 Binding 类中使用 ViewStubProxy 来代替 ViewStub， 开发者可以通过 ViewStubProxy 来获取 viewStub 或者 viewstub 填充后的 view。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.viewstub = new android.databinding.ViewStubProxy((android.view.ViewStub) bindings[1]);</div></pre></td></tr></table></figure></p>
<p>inflate 一个新的 layout 时，会为新的 layout 创建一个新 binding 对象。因此，ViewStubProxy 必须监听 ViewStub 的 ViewStub.OnInflateListener，并及时建立 binding。由于 ViewStub 只能有一个 OnInflateListener，你可以将你自己的 listener 设置在 ViewStubProxy 上，在 binding 建立之后， listener 就会被触发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">binding.viewStub.setOnInflateListener(new ViewStub.OnInflateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onInflate(ViewStub stub, View inflated) &#123;</div><div class="line">                ViewStubBinding viewStubBinding = DataBindingUtil.bind(inflated);</div><div class="line">                Contact contact = new Contact(&quot;Messi&quot;, &quot;122134567&quot;, &quot;2345@gmail.com&quot;);</div><div class="line">                viewStubBinding.setContact(contact);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><h2 id="Common-Features"><a href="#Common-Features" class="headerlink" title="Common Features"></a>Common Features</h2><ul>
<li>数学计算 <code>+ - * %</code></li>
<li>字符串链接 <code>+</code> </li>
<li>逻辑 <code>|| &amp;&amp;</code></li>
<li>二进制 <code>&amp; | ^</code></li>
<li>一元 <code>+ - ! ~</code></li>
<li>位移 <code>&gt;&gt; &gt;&gt;&gt; &lt;&lt; &lt;&lt;&lt;</code></li>
<li>比较 <code>&gt; &lt; &gt;= &lt;= ==</code></li>
<li>instance of</li>
<li>Grouping()</li>
<li>字面量 <code>字符 字符串 数字 null</code></li>
<li>类型转换</li>
<li>方法调用 使用<code>.</code>或者 <code>::</code></li>
<li>Field 访问 </li>
<li>Array 访问</li>
<li>三元运算符<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Examples:</div><div class="line">android:text=&quot;@&#123;String.valueOf(index + 1)&#125;&quot;</div><div class="line">android:visibility=&quot;@&#123;age&lt;13?View.GONE:View.VISIBLE&#125;&quot;</div><div class="line">android:transitionName=&apos;@&#123;&quot;image_&quot; + id&#125;&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="缺失的操作符"><a href="#缺失的操作符" class="headerlink" title="缺失的操作符"></a>缺失的操作符</h2><ul>
<li><code>this</code></li>
<li><code>super</code></li>
<li><code>new</code> </li>
<li>显示泛型调用<code>&lt;T&gt;</code></li>
<li>缺省 无法访问 this,super,new，显示泛型调用</li>
</ul>
<h2 id="Null-合并运算符"><a href="#Null-合并运算符" class="headerlink" title="Null 合并运算符"></a>Null 合并运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:text=&apos;@&#123;user.displayName ?? &quot;displayName is null&quot;&#125;&apos;</div><div class="line">等同于</div><div class="line">android:text=&apos;@&#123;user.displayName != null ? user.displayName : &quot;displayName is null&quot;&#125;&apos;</div></pre></td></tr></table></figure>
<h2 id="属性引用"><a href="#属性引用" class="headerlink" title="属性引用"></a>属性引用</h2><p>JavaBean 引用，当表达式引用了一个类内的属性时，他会尝试直接调用域，getter，还有ObservableFields<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=&quot;@&#123;user.firstName&#125;&quot;</div></pre></td></tr></table></figure></p>
<h2 id="避免-NullPointerException"><a href="#避免-NullPointerException" class="headerlink" title="避免 NullPointerException"></a>避免 NullPointerException</h2><p>自动生成的 data binding 代码会自动检查和避免 NullPointerException.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@&#123;user.name&#125;</div><div class="line">如果 user 为 null，则 user.name 赋予默认值 null</div><div class="line">@&#123;user.age&#125; </div><div class="line">如果 user 为 null，则 user.age 赋予默认值 0</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 分析ActivityMainBinding 源码，看到有对user是否为null的判断</div><div class="line">if ((dirtyFlags &amp; 0x6L) != 0) &#123;</div><div class="line">    if (user != null) &#123;</div><div class="line">        // read user.firstName</div><div class="line">        firstNameUser = user.getFirstName();</div><div class="line">        // read user.lastName</div><div class="line">        lastNameUser = user.getLastName();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><p>通用的容器类，数组，lists，sparse lists 和 map，可以用[]操作符来存取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;data&gt;</div><div class="line">    &lt;import type=&quot;android.util.SparseArray&quot;/&gt;</div><div class="line">    &lt;import type=&quot;java.util.Map&quot;/&gt;</div><div class="line">    &lt;import type=&quot;java.util.List&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;list&quot; type= &quot;List&amp;lt;String&amp;gt;&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;sparse&quot; type=&quot;SparseArray&amp;lt;String&amp;gt;&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;map&quot; type=&quot;Map&amp;lt;String,String&amp;gt;&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;index type=&quot;int&quot;/&gt;</div><div class="line">    &lt;variable name=&quot;key&quot; type=&quot;String&quot;/&gt;</div><div class="line">&lt;/data&gt;</div><div class="line">...</div><div class="line">android:text=&quot;@&#123;list[index]&#125;&quot;</div><div class="line">...</div><div class="line">android:text=&quot;@&#123;sparse[index]&#125;&quot;</div><div class="line">...</div><div class="line">android:text=&quot;@&#123;map[key]&#125;&quot;</div></pre></td></tr></table></figure></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>使用单引号将属性值括起来，就可以在表达式中使用双引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:text=&apos;@&#123;map[&quot;firstName&quot;]&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>也可以用双引号将属性值括起来，然后字符串使用&amp;<code>quot；</code>或者反引号`来调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:text=&quot;@&#123;map[&amp;quot;firstName&amp;quot;]&#125;&quot;</div><div class="line">android:text=&quot;@&#123;map[`firstName`]&#125;&quot;</div></pre></td></tr></table></figure></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>普通的语法在表达式中访问资源 <a href="http://blog.csdn.net/feelang/article/details/46342699" target="_blank" rel="external"><strong>官方教程的坑</strong></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">android:padding=@&#123;large? (int)@dimen/largePadding: (int)@dimen/smallPadding&#125;</div><div class="line"></div><div class="line">android:background=&quot;@&#123;large? @color/red:@color/green&#125;&quot;</div><div class="line"></div><div class="line">android:text=&quot;@&#123;@string/nameFormat(firstName,lastName)&#125;&quot;</div><div class="line"></div><div class="line">android:text=&quot;@&#123;@plurals/banana(bananaCount,bananaCount)&#125;&quot;</div></pre></td></tr></table></figure></p>
<p>需要显示声明的资源<br><img src="http://static.zybuluo.com/LeoPoldCrossing/we3idy2ri20tt8de1i4rj3am/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-13%2018.14.05.png" alt="屏幕快照 2017-02-13 18.14.05.png-32.8kB"></p>
<h1 id="数据对象-1"><a href="#数据对象-1" class="headerlink" title="数据对象"></a>数据对象</h1><p>DataBinding 让我决定引入到项目中的原因是它具备<strong>数据改变，UI随之更新</strong>的能力。<br>Data Binding 为我们提供了三种数据变动通知机制：<code>Observable Objects，Observable fields，Observable collections</code>。</p>
<p>Come on！ Baby~ 让我们一起看一下这三种机制的神奇之处。</p>
<h2 id="Observable-Objects"><a href="#Observable-Objects" class="headerlink" title="Observable Objects"></a>Observable Objects</h2><p>我们只需要修改Model类，数据改变后，更新UI的事情由Binding完成，再也不用费时费力的去写<code>binding.setXXX</code>~so cool！<br><code>@Bindable</code>在编译时会在BR类内生成一个元素。BR类会在生成在 module package下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class ObservableUser extends BaseObservable &#123;</div><div class="line">    private String name;</div><div class="line">    private long idNumber;</div><div class="line">    private int age;</div><div class="line"></div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public long getIdNumber() &#123;</div><div class="line">        return idNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setIdNumber(long idNumber) &#123;</div><div class="line">        this.idNumber = idNumber;</div><div class="line">        notifyPropertyChanged(BR.idNumber);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bindable</div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">        notifyPropertyChanged(BR.name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getAge() &#123;</div><div class="line">        return age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAge(int age) &#123;</div><div class="line">        this.age = age;</div><div class="line">        notifyChange();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Observable-Fields"><a href="#Observable-Fields" class="headerlink" title="Observable Fields"></a>Observable Fields</h2><p>如果我们的Model类里面只有少量的 Field 或者 想要节省时间，可以使用<code>Observable Field</code>及其派生的 <code>ObservableBoolean</code>,<code>ObservableByte</code>,<code>ObservableChar</code>,<code>ObservableShort</code>,<code>ObservableInt</code>,<code>ObservableLong</code>,<code>ObservableFloat</code>,<code>ObservableDouble</code>,<code>ObservableParcelable</code>。<br>ObaservableField自包含obsevable对象，并且只有一个Field。</p>
<ul>
<li><p>Step 1 Model 定义 ObservableField</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public final ObservableField&lt;String&gt; name = new ObservableField&lt;String&gt;();</div><div class="line">public final ObservableLong NO = new ObservableLong();</div><div class="line">public final ObservableInt age = new ObservableInt();</div></pre></td></tr></table></figure>
</li>
<li><p>Step 2 Field Value 的set和get</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">observableFieldUser.name.set(&quot;James&quot;);</div><div class="line">observableFieldUser.NO.set(23);</div><div class="line">observableFieldUser.age.set(31);</div><div class="line"></div><div class="line">observableFieldUser.name.get();</div><div class="line">observableFieldUser.age.get();</div><div class="line">observableFieldUser.NO.get();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Observable-Collections"><a href="#Observable-Collections" class="headerlink" title="Observable Collections"></a>Observable Collections</h2><h3 id="ObservableMap"><a href="#ObservableMap" class="headerlink" title="ObservableMap"></a>ObservableMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 创建</div><div class="line">private ObservableMap&lt;String, Object&gt; observableArrayMap = new ObservableArrayMap&lt;&gt;();</div><div class="line"></div><div class="line"># 数据</div><div class="line">observableArrayMap.put(&quot;system&quot;, &quot;Android&quot;);</div><div class="line">observableArrayMap.put(&quot;brand&quot;, &quot;三星&quot;);</div><div class="line">observableArrayMap.put(&quot;version&quot;, &quot;6.0.1&quot;);</div><div class="line"></div><div class="line"># 使用</div><div class="line">&lt;import type=&quot;android.databinding.ObservableMap&quot;/&gt;</div><div class="line"></div><div class="line">&lt;variable</div><div class="line">    name=&quot;map&quot;</div><div class="line">    type=&quot;ObservableMap&amp;lt;String,Object&amp;gt;&quot;/&gt;</div><div class="line"></div><div class="line">android:text=&apos;@&#123;@string/mapFormatString(map[&quot;system&quot;],map[`brand`],map[&quot;version&quot;])&#125;&apos;</div></pre></td></tr></table></figure>
<h3 id="ObservableList"><a href="#ObservableList" class="headerlink" title="ObservableList"></a>ObservableList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 创建</div><div class="line">private ObservableList&lt;Object&gt; observableArrayList = new ObservableArrayList();</div><div class="line"></div><div class="line"># 数据</div><div class="line">observableArrayList.add(0, &quot;Android&quot;);</div><div class="line"></div><div class="line"># 使用</div><div class="line">&lt;import type=&quot;android.databinding.ObservableList&quot;/&gt;</div><div class="line"></div><div class="line">&lt;variable</div><div class="line">    name=&quot;list&quot;</div><div class="line">    type=&quot;ObservableList&amp;lt;Object&amp;gt;&quot; /&gt;</div><div class="line"></div><div class="line">android:text=&quot;@&#123;@string/listFormatString(list[0])&#125;&quot;</div></pre></td></tr></table></figure>
<h1 id="高级-Binding"><a href="#高级-Binding" class="headerlink" title="高级 Binding"></a>高级 Binding</h1><h2 id="Dynamic-Variables"><a href="#Dynamic-Variables" class="headerlink" title="Dynamic Variables"></a>Dynamic Variables</h2><p>以 RecyclerView 为例， Adapter 的 Databinding 需要动态生成，这时我们就需要动态创建 Binding 。</p>
<ul>
<li>在 OnCreateViewHolder 中创建 binding ，在 onBindViewHolder 中获取 binding。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public DynamicBindingViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">        ViewDataBinding viewDataBinding = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.dynamic_list_item, parent, false);</div><div class="line">        DynamicBindingViewHolder holder = new DynamicBindingViewHolder(viewDataBinding.getRoot());</div><div class="line">        holder.setBinding(viewDataBinding);</div><div class="line">        return holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        return users.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(DynamicBindingViewHolder holder, int position) &#123;</div><div class="line">        User user = users.get(position);</div><div class="line">        holder.getBinding().setVariable(BR.user, user);</div><div class="line">        holder.getBinding().executePendingBindings();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>构建Holder时直接绑定view<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public DynamicBindingViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">    View inflate = LayoutInflater.from(parent.getContext()).inflate(R.layout.dynamic_list_item, parent,false);</div><div class="line">    return new DynamicBindingViewHolder(inflate);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onBindViewHolder(DynamicBindingViewHolder holder, int position) &#123;</div><div class="line">    User user = users.get(position);</div><div class="line">    holder.bind(user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public DynamicBindingViewHolder(View itemView) &#123;</div><div class="line">    super(itemView);</div><div class="line">    binding = DataBindingUtil.bind(itemView);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void bind(User user)&#123;</div><div class="line">    binding.setUser(user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Attribute-Setters"><a href="#Attribute-Setters" class="headerlink" title="Attribute Setters"></a>Attribute Setters</h2><p>写过自定义控件的童鞋都知道，自定义属性需要在<code>attrs</code> 文件中定义 <code>declare-styleable</code>, 在java代码调用<code>set</code>方法来进行赋值的。</p>
<p>在 Databinding中，不在 <code>attrs</code> 文件中定义 <code>declare-styleable</code> ，也可以在xml文件中进行赋值，只需要对应的setter方法。</p>
<p>DataBinding 框架内置了几种调用 set 进行赋值的方式。</p>
<h3 id="Automatic-Setters"><a href="#Automatic-Setters" class="headerlink" title="Automatic Setters"></a>Automatic Setters</h3><p>属性和set方法对应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;com.example.databindingsamples.view.NameCard</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    app:object=&quot;@&#123;user&#125;&quot; /&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void setObject(User user)&#123;</div><div class="line">    firstName.setText(user.getFirstName());</div><div class="line">    lastName.setText(user.getLastName());</div><div class="line">    age.setText(user.getAge());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Rename-Attribute-Setter"><a href="#Rename-Attribute-Setter" class="headerlink" title="Rename Attribute Setter"></a>Rename Attribute Setter</h3><p>一些属性的命名与 setter 不对应。针对这些函数，可以用 BindingMethods 注解来将属性与 setter 绑定在一起。举个例子，<code>android:tint</code> 属性可以这样与 <code>setImageTintList(ColorStateList)</code>绑定，而不是 setTint:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindingMethods</span>(&#123;</div><div class="line">      <span class="meta">@BindingMethod</span>(type = <span class="string">"android.widget.ImageView"</span>,</div><div class="line">                      attribute = <span class="string">"android:tint"</span>,</div><div class="line">                      method = <span class="string">"setImageTintList"</span>),</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>Android 框架中的 setter 重命名已经在库中实现了，我们只需要关注自己的 setter。</p>
<h3 id="Custom-Attribute-Setter"><a href="#Custom-Attribute-Setter" class="headerlink" title="Custom Attribute Setter"></a>Custom Attribute Setter</h3><p>一些属性需要自定义 setter 逻辑。比如目前没有与<code>android:paddingLeft</code> 相对应的 setter，只有一个<code>setPadding(l,t,r,b)</code>函数。结合静态 binding adapter 函数与 BindingAdapter ，我们可以自定义属性 setter。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@BindingAdater(&quot;android:paddingLeft&quot;)</div><div class="line">public static void setPaddingLeft(View view,int padding)&#123;</div><div class="line">    view.setPadding(padding,</div><div class="line">                    view.getPaddingTop(),</div><div class="line">                    view.getPaddingRight(),</div><div class="line">                    view.getPaddingBotton())</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Binding adapter 在其他自定义类型上也很是 very nice 的。 For example，一个 loader 可以在非主线程加载图片。 当存在冲突时，开发者创建的 binding adapter 会覆盖 Data Binding 的默认adapter。<br>我们还可以创建多个 adapters 并且传递多个参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 不需要主动调用</div><div class="line">@BindingAdapter(&#123;&quot;imageUrl,&quot;error&quot;&#125;)&#123;</div><div class="line">public static void loadImage(ImageView view, String url, Drawable error)&#123;</div><div class="line">     Glide.with(context)</div><div class="line">                .load(url)</div><div class="line">                .error(error)</div><div class="line">                .into(imageView); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>layout 文件的 ImageView 按照下面的写法，就会调用上面的adapter。<br>imageUrl 和 error 都使用，并且 imageUrl 为 String，error 为 drawable。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">app:imageUrl</span>=<span class="string">"@&#123;url&#125;"</span></div><div class="line">    <span class="attr">app:error</span>=<span class="string">"@&#123;@drawable/ic_launcher&#125;"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Tip： </p>
<ol>
<li>在匹配adapter时，自定义命名空间将被忽略</li>
<li>我们可以为 android 命名空间编写 adapter </li>
</ol>
</blockquote>
<p>事件 handler 仅可以用于只有一个抽象方法的接口或者抽象类,比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onLayoutChange"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOnLayoutChangeListener</span><span class="params">(View view, View.OnLayoutChangeListener oldValue,</span></span></div><div class="line">       View.OnLayoutChangeListener newValue) &#123;</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">        <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</div><div class="line">            view.removeOnLayoutChangeListener(oldValue);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (newValue != <span class="keyword">null</span>) &#123;</div><div class="line">            view.addOnLayoutChangeListener(newValue);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当一个 listener 有多个方法，它必须分割成多个 listener 。例如， View.OnAttachStateChangeListener 内置两个函数： <code>onViewAttachedToWindow()</code>与 <code>onViewDetachedFromWindow()</code> 。在这里必须为两个不同的属性创建不同的接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewDetachedFromWindow</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewAttachedToWindow</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为改变一个 listener 会影响到另外一个，我们必须编写三个不同的 adapter，包括修改一个属性的和修改两个属性的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onViewAttachedToWindow"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewAttachedToWindow attached)</span> </span>&#123;</div><div class="line">    setListener(view, <span class="keyword">null</span>, attached);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onViewDetachedFromWindow"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewDetachedFromWindow detached)</span> </span>&#123;</div><div class="line">    setListener(view, detached, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:onViewDetachedFromWindow"</span>, <span class="string">"android:onViewAttachedToWindow"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, <span class="keyword">final</span> OnViewDetachedFromWindow detach,</span></span></div><div class="line">        <span class="keyword">final</span> OnViewAttachedToWindow attach) &#123;</div><div class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class="line">        <span class="keyword">final</span> OnAttachStateChangeListener newListener;</div><div class="line">        <span class="keyword">if</span> (detach == <span class="keyword">null</span> &amp;&amp; attach == <span class="keyword">null</span>) &#123;</div><div class="line">            newListener = <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            newListener = <span class="keyword">new</span> OnAttachStateChangeListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (attach != <span class="keyword">null</span>) &#123;</div><div class="line">                        attach.onViewAttachedToWindow(v);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (detach != <span class="keyword">null</span>) &#123;</div><div class="line">                        detach.onViewDetachedFromWindow(v);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</div><div class="line">                newListener, R.id.onAttachStateChangeListener);</div><div class="line">        <span class="keyword">if</span> (oldListener != <span class="keyword">null</span>) &#123;</div><div class="line">            view.removeOnAttachStateChangeListener(oldListener);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (newListener != <span class="keyword">null</span>) &#123;</div><div class="line">            view.addOnAttachStateChangeListener(newListener);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的例子比普通情况下复杂，因为 View 是 <code>add/remove</code>　<code>View.OnAttachStateChangeListener</code> 而不是 <code>set</code>。 <code>android.databinding.adapters.ListenerUtil</code>可以用来辅助跟踪旧的 listener 并移除它。</p>
<p>对应 <code>addOnAttachStateChangeListener(View.OnAttachStateChangeListener) )</code>支持的 api 版本，通过向 <code>OnViewDetachedFromWindow</code> 和 <code>OnViewAttachedToWindow</code> 添加 <code>@TargetApi(VERSION_CODES.HONEYCHOMB_MR1)</code> 注解，<br>Data Binding 代码生成器会知道这些 listener 只会在 Honeycomb MR1 或更新的设备上使用。</p>
<h2 id="Converters"><a href="#Converters" class="headerlink" title="Converters"></a>Converters</h2><h3 id="Object-Conversions"><a href="#Object-Conversions" class="headerlink" title="Object Conversions"></a>Object Conversions</h3><p>当 binding 表达式返回对象时，会选择一个 setter（自动 Setter，重命名 Setter，自定义 Setter），将返回对象强制转换成 setter 需要的类型。<br>下面是一个使用 ObservableMap 保存数据的例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">  <span class="attr">android:text</span>=<span class="string">'@&#123;userMap["lastName"]&#125;'</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure>
<p>在这里， userMap 会返回 Object 类型的值，而返回值会被自动转换成 setText(CharSequence) 需要的类型。当对参数类型存在疑惑时，开发者需要手动做类型转换。</p>
<h3 id="Custom-Conversions"><a href="#Custom-Conversions" class="headerlink" title="Custom Conversions"></a>Custom Conversions</h3><p>有些时候我们需要自动转换成特定的类型。比如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">View</span></span></div><div class="line">   <span class="attr">android:background</span>=<span class="string">"@&#123;isError ? @color/red : @color/white&#125;"</span></div><div class="line">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>在这里，背景需要的是 Drawable ，但是 color 是一个整数。这时，我们需要使用 BindingConversation 来实现类型的转换。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindingConversion</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorDrawable <span class="title">convertColorToDrawable</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ColorDrawable(color); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Android-Studio对Data-Binding的支持"><a href="#Android-Studio对Data-Binding的支持" class="headerlink" title="Android Studio对Data Binding的支持"></a>Android Studio对Data Binding的支持</h1><ul>
<li><p>Android Studio 支持 Data Binding 表现为：</p>
<ul>
<li>语法高亮</li>
<li>标记表达式语法错误</li>
<li>XML 代码补全</li>
<li>跳转到声明或快速文档 </li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：数组和泛型类型，如 Observable 类，当没有错误时可能会显示错误。</p>
</blockquote>
<ul>
<li>在预览窗口可显示 Data Binding 表达式的默认值。例如：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@&#123;user.firstName, default=FirstName&#125;"</span>/&gt;</div><div class="line">  <span class="comment">&lt;!-- TextView 的 text 默认值为 FirstName --&gt;</span></div></pre></td></tr></table></figure>
<p>如果你需要在设计阶段显示默认值，你可以使用 <code>tools</code> 属性代替默认值表达式，详见 <a href="http://tools.android.com/tips/layout-designtime-attributes" target="_blank" rel="external">设计阶段布局属性 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DataBinding介绍&quot;&gt;&lt;a href=&quot;#DataBinding介绍&quot; class=&quot;headerlink&quot; title=&quot;DataBinding介绍&quot;&gt;&lt;/a&gt;DataBinding介绍&lt;/h1&gt;&lt;p&gt;Data binding 在2015年7月发布的Android Studio v1.3.0 版本上引入，在2016年4月Android Studio v2.0.0 上正式支持。目前为止，Data Binding 已经支持双向绑定了。&lt;/p&gt;
&lt;p&gt;Databinding 是一个实现数据和UI绑定的框架，是一个实现 MVVM 模式的工具，有了 Data Binding，在Android中也可以很方便的实现MVVM开发模式。&lt;/p&gt;
&lt;p&gt;Data Binding 是一个support库，最低支持到Android 2.1（API Level 7+）。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="databingding" scheme="http://yoursite.com/tags/databingding/"/>
    
  </entry>
  
  <entry>
    <title>Blog美化、写作、部署</title>
    <link href="http://yoursite.com/2017/02/09/Blog%E7%BE%8E%E5%8C%96%E3%80%81%E5%86%99%E4%BD%9C%E3%80%81%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2017/02/09/Blog美化、写作、部署/</id>
    <published>2017-02-09T02:47:53.000Z</published>
    <updated>2017-02-20T15:39:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言：Blog搭建完成，既然是专属博客，也就是自己的一方世界，大家肯定都想让Blog有自己的个人色彩，而不必像诸如CSDN一样各种条条框框~</p>
</blockquote>
<hr>
<blockquote>
<p>内容摘要</p>
<ol>
<li>利用Hexo Theme美化Blog    </li>
<li>Hexo命令功能介绍及使用</li>
</ol>
</blockquote>
<hr>
<a id="more"></a>
<h1 id="Blog美化"><a href="#Blog美化" class="headerlink" title="Blog美化"></a>Blog美化</h1><p>在开始美化之前，先来了解一下下_config.yml文件，在Hexo中有两份主要的配置文件，名称都为_config.yml。</p>
<ul>
<li>站点根目录下的_config.yml<br>主要用于Hexo站点的配置，我们称之为<code>站点配置文件</code></li>
<li>主题目录的_config.yml，<br>主要用于主题相关的配置，称之为<code>主题配置文件</code></li>
</ul>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><h3 id="Hexo-Theme"><a href="#Hexo-Theme" class="headerlink" title="Hexo Theme"></a><a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo Theme</a></h3><p><img src="http://static.zybuluo.com/LeoPoldCrossing/chy99uv8c2g1frc7he5efmc7/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2012.54.24.png" alt="屏幕快照 2017-02-09 12.54.24.png-639.2kB"></p>
<h3 id="选择主题，安装"><a href="#选择主题，安装" class="headerlink" title="选择主题，安装"></a>选择主题，安装</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件copy至站点没有理由的 themes 目录下，以Next主题举例：</p>
<ul>
<li><p>Step 1 点击进入主题作者的博客，点击Github<br><img src="http://static.zybuluo.com/LeoPoldCrossing/fdj97m3v6l0zn5v07imub0sz/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2014.03.29.png" alt="屏幕快照 2017-02-09 14.03.29.png-287kB"></p>
</li>
<li><p>Step 2 获取主题地址 ，使用Git checkout 代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd &lt;your hexo folder&gt;</div><div class="line"># https://github.com/iissnan/hexo-theme-next 为主题代码地址</div><div class="line"># themes/next为主题保存路径，next为主题名，可以修改</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
</li>
<li><p>Step 3 启用主题<br>修改<code>站点配置文件</code>,找到theme字段，将其值修改为next(主题名)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
</li>
</ul>
<p>OK~主题安装完成，让我来验证一下，主题是否安装成功</p>
<ul>
<li>Step 4 验证主题效果<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 终端输入命令</div><div class="line">$ hexo generate</div><div class="line">$ hexo server</div><div class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用浏览器访问<a href="http://localhost:4000，查看站点是否正确运行。" target="_blank" rel="external">http://localhost:4000，查看站点是否正确运行。</a></p>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h3><p>Scheme是Next提供的一种特性，为Next提供了多种不同的外观。</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>Scheme的切换通过<code>主题配置文件</code>的scheme字段。效果图，就不上了哈~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Schemes</div><div class="line">scheme: Muse</div><div class="line">#scheme: Mist</div><div class="line">#scheme: Pisces</div></pre></td></tr></table></figure></p>
<h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>编辑<code>站点配置文件</code>，将language设置为所需要的语言。例如简体中文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">language: zh-Hans</div></pre></td></tr></table></figure></p>
<p>Next语言对照表<br><img src="http://static.zybuluo.com/LeoPoldCrossing/r1qp2pht6wrhw0hevowoornk/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2014.43.50.png" alt="屏幕快照 2017-02-09 14.43.50.png-51.1kB"></p>
<h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>菜单设置分为三个部分</p>
<ul>
<li><p>名称和链接：在<code>主题配置文件</code>中配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#配置示例</div><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  #about: /about</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  #search: /search</div><div class="line">  #sitemap: /sitemap.xml</div><div class="line">  #commonweal: /404.html</div></pre></td></tr></table></figure>
</li>
<li><p>菜单显示文本： Hexo在生成时，使用上面配置的名称查找对应语言的翻译。这些翻译文本放置在<code>themes/${主题名}/languages/{language}.yml</code> ({language}为使用的语言)，如中文 对应的就是 zh-Hans.yml </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: 首页</div><div class="line">  archives: 归档</div><div class="line">  categories: 分类</div><div class="line">  schedule: 日程</div><div class="line">  tags: 标签</div><div class="line">  about: 关于</div><div class="line">  search: 搜索</div><div class="line">  commonweal: 公益404</div></pre></td></tr></table></figure>
</li>
<li><p>菜单图标：对应字段为 menu_icons.<code>主题配置文件</code>，注意键值得大小写需要严格匹配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">menu_icons:</div><div class="line">  # 控制图标是否显示，false为不显示</div><div class="line">  enable: true</div><div class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  schedule: calendar</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  sitemap: sitemap</div><div class="line">  commonweal: heartbeat</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h3><p>默认情况下，侧栏仅在文章页面（有目录列表时）显示，并放置于右侧位置。可以通过修改<code>主题配置文件</code>中的sidebar字段来控制侧栏的行为。</p>
<h4 id="设置侧栏位置-，修改sidebar-position的值"><a href="#设置侧栏位置-，修改sidebar-position的值" class="headerlink" title="设置侧栏位置 ，修改sidebar.position的值"></a>设置侧栏位置 ，修改sidebar.position的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sidebar:</div><div class="line">    position: left or right</div></pre></td></tr></table></figure>
<blockquote>
<p>Tips: 目前仅Pisces Scheme支持position配置，影响5.0.0及更低版本 </p>
</blockquote>
<h4 id="设置侧栏显示时机，修改sidebar-diplay的值"><a href="#设置侧栏显示时机，修改sidebar-diplay的值" class="headerlink" title="设置侧栏显示时机，修改sidebar.diplay的值"></a>设置侧栏显示时机，修改sidebar.diplay的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sidebar:</div><div class="line">    display: post(默认值)</div></pre></td></tr></table></figure>
<ul>
<li>post : 默认行为，在文章页面（有目录列表）时显示。</li>
<li>always: 在所有页面显示</li>
<li>hide: 在所有页面都隐藏（可以手动展开）</li>
<li>remove: 完全移除</li>
</ul>
<h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><h3 id="头像配置"><a href="#头像配置" class="headerlink" title="头像配置"></a>头像配置</h3><p>编辑<code>站点配置文件</code>，新增 avatar 字段，值为头像的链接地址。<br><img src="http://static.zybuluo.com/LeoPoldCrossing/ztmwwfedxp5mlnl6baurqb7k/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2018.11.06.png" alt="屏幕快照 2017-02-09 18.11.06.png-40.8kB"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 示例：</div><div class="line">avatar: /images/avatar.png</div></pre></td></tr></table></figure></p>
<h3 id="作者昵称配置"><a href="#作者昵称配置" class="headerlink" title="作者昵称配置"></a>作者昵称配置</h3><p>编辑<code>站点配置文件</code> author 字段</p>
<h3 id="站点描述"><a href="#站点描述" class="headerlink" title="站点描述"></a>站点描述</h3><p>编辑<code>站点配置文件</code> description 字段</p>
<hr>
<h1 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h1><p>根据上面的教程，页面做成自己喜欢的样子，乐呵呵的到处点~ 点到分类和标签的时候，一脸大写的懵逼。。。页面一片空白。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">分类页链接</div><div class="line">https://leopoldcrossing.github.io/categories/</div><div class="line">标签页链接</div><div class="line">https://leopoldcrossing.github.io/tags/</div><div class="line"></div><div class="line">进入 source 目录，发现么有categories和tags文件夹。</div></pre></td></tr></table></figure></p>
<p>问题分析出来，当然要解决了！！！ 是时候让 Hexo 一展身手了。在这里只列出一些常用命令。查看所有命令请移步<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">Hexo命令</a></p>
<h2 id="new-命令"><a href="#new-命令" class="headerlink" title="new 命令"></a>new 命令</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>新建命令，如果么有设置<code>layout</code>，则使用 _config.yml 文件中的 default_layout 的值， 如果 title 包含空格，请使用引号括起来。</p>
<h3 id="layout-取值"><a href="#layout-取值" class="headerlink" title="layout 取值"></a>layout 取值</h3><ul>
<li><p>post： 存储至 source/_post 目录，发布到Blog的文章</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new post &quot;filename&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>page： 存储值 source 目录，新建页面，比如标签，分类等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 新建标签页面</div><div class="line">$ hexo new page tags</div><div class="line"># 新建分类页面</div><div class="line">$ hexo new page categories</div></pre></td></tr></table></figure>
</li>
<li><p>draft： 存储至 source/_draft 目录，新建草稿</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft &quot;filename&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>草稿默认不会显示在页面中，可以通过执行下面的命令显示草稿<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --draft</div></pre></td></tr></table></figure></p>
<p>或者修改<code>站点配置文件</code> 的 <code>render_drafts</code> 参数值为true。</p>
<h2 id="generate-命令"><a href="#generate-命令" class="headerlink" title="generate 命令"></a>generate 命令</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 生成静态文件，即blog目录下的public目录</div><div class="line">$ hexo generate</div><div class="line">or </div><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 文件生成后立刻部署至网站</div><div class="line">$ hexo generate -d or -deploy</div><div class="line"># 监视文件变动</div><div class="line">$ hexo generate -w or -watch</div></pre></td></tr></table></figure>
<h2 id="publish-命令"><a href="#publish-命令" class="headerlink" title="publish 命令"></a>publish 命令</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 发布草稿，即将_draft目录下的文件移动到_posts目录</div><div class="line">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>
<h2 id="server-命令"><a href="#server-命令" class="headerlink" title="server 命令"></a>server 命令</h2><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 启动服务器，默认情况下，访问网址为： http://localhost:4000/。</div><div class="line">$ hexo server</div><div class="line">or </div><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<h3 id="可选参数-1"><a href="#可选参数-1" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 重设端口</div><div class="line">$ hexo server -p or --port</div><div class="line"># 只使用静态文件</div><div class="line">$ hexo server -s or --static</div><div class="line"># 启动日志记录，使用覆盖记录格式</div><div class="line">$ hexo server -l or --log</div></pre></td></tr></table></figure>
<h2 id="deploy命令"><a href="#deploy命令" class="headerlink" title="deploy命令"></a>deploy命令</h2><h3 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 部署generate命令生成的静态文件至blog</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>###　可选参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">＃部署之前生成静态文件</div><div class="line">＄ hexo deploy -g or --generate</div></pre></td></tr></table></figure></p>
<h2 id="clean-命令"><a href="#clean-命令" class="headerlink" title="clean 命令"></a>clean 命令</h2><h3 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 清除缓存文件(db.json)和已生成的静态文件(public)</div><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</p>
<hr>
<h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><h2 id="标签和分类的正确打开姿势"><a href="#标签和分类的正确打开姿势" class="headerlink" title="标签和分类的正确打开姿势"></a>标签和分类的正确打开姿势</h2><ul>
<li><p>修改tags和categories目录下的index.md文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 标签</div><div class="line">date: 2017-02-09 22:53:01</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div><div class="line"></div><div class="line">---</div><div class="line">title: 分类</div><div class="line">date: 2017-02-09 22:53:11</div><div class="line">type: &quot;categories&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
<li><p>MarkDown 编辑文章添加标签和分类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo + GitHub Pages 搭建专属博客</div><div class="line">date: 2017-02-08</div><div class="line">tag:</div><div class="line">    - Hexo</div><div class="line">categories:</div><div class="line">    - 教程</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h2><ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next主题使用文档</a></li>
</ul>
<hr>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><blockquote>
<p>用了两天的时间来搭建Blog和整理教程，在添加多说评论系统时，因为多说服务器的异常，本猿还没成功添加。。。后期会补上。Blog搭建，美化，部署可以暂告一段落，后面我会尽快的整理MarkDown的语法及Git的使用。。。给Blog的搭建画上一个圆满的句号~ </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：Blog搭建完成，既然是专属博客，也就是自己的一方世界，大家肯定都想让Blog有自己的个人色彩，而不必像诸如CSDN一样各种条条框框~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;内容摘要&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用Hexo Theme美化Blog    &lt;/li&gt;
&lt;li&gt;Hexo命令功能介绍及使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages 搭建专属博客</title>
    <link href="http://yoursite.com/2017/02/08/Hexo-Github-Pages-%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/02/08/Hexo-Github-Pages-搭建专属博客/</id>
    <published>2017-02-07T16:00:00.000Z</published>
    <updated>2017-02-09T14:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言：2017年伊始，先给自己定了一个小目标，将Blog迁移到Hexo。本文是我2017年的开始，也是我在Hexo的开端，Mark一下！</p>
</blockquote>
<hr>
<a id="more"></a>
<blockquote>
<p>摘要：本文的核心是介绍如何利用Github Pages 和 Hexo搭建自己的Blog，至于Git的使用，页面的美化，Hexo的命令等，敬请期待。。。别扔鸡蛋</p>
</blockquote>
<hr>
<h1 id="Hexo-GitHub-GithubPages-介绍"><a href="#Hexo-GitHub-GithubPages-介绍" class="headerlink" title="Hexo GitHub GithubPages 介绍"></a>Hexo GitHub GithubPages 介绍</h1><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo是一个快速、简洁且高效的博客框架，Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内即可利用靓丽的主题生成静态网页。</p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>不知道Github的程序猿，不是一只好猿 ~ Github是一个面向开源及私有软件项目的托管平台，仅支持Git作为唯一的版本库格式进行托管。</p>
<h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p>Github Pages可以理解为用户编写的、托管在github上的静态网页，你只需将你的改动提交到Github，就可以实现更改你的网页。</p>
<hr>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="Node-js-点击有惊喜"><a href="#Node-js-点击有惊喜" class="headerlink" title="Node.js 点击有惊喜"></a>Node.js <a href="https://nodejs.org/en/download/" target="_blank" rel="external">点击有惊喜</a></h2><p>选择对应的安装包下载，安装我就不啰嗦了，以下命令验证安装是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">$ npm -v</div></pre></td></tr></table></figure>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></h2><ul>
<li>Window下载直接安装即可<a href="https://git-scm.com/download/win" target="_blank" rel="external">点我下载</a></li>
<li><p>Mac建议使用HomeBrew安装Git。</p>
<ul>
<li><p>安装HomeBrew，终端运行下面命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>安装Git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install git</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Hexo-1"><a href="#Hexo-1" class="headerlink" title="Hexo"></a><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></h2><p>安装命令：<br><code>$ npm install -g hexo-cli</code></p>
<hr>
<h1 id="Hexo初始化-建站"><a href="#Hexo初始化-建站" class="headerlink" title="Hexo初始化(建站)"></a>Hexo初始化(建站)</h1><h2 id="初始化Blog文件夹"><a href="#初始化Blog文件夹" class="headerlink" title="初始化Blog文件夹"></a>初始化Blog文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml    配置文件</div><div class="line">├── package.json   应用程序信息</div><div class="line">├── scaffolds      模板文件夹 draft.md post.md page.md    </div><div class="line">├── source         资源文件夹</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes         主题</div></pre></td></tr></table></figure>
<h2 id="Blog配置"><a href="#Blog配置" class="headerlink" title="Blog配置"></a>Blog配置</h2><p>打开_config.yml文件，懵逼了~眼花缭乱。。。挑几个常用的说一下，详解移步<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo 站点配置</a><br><img src="http://static.zybuluo.com/LeoPoldCrossing/27kshpgxiptltk7p06s1cwpr/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2023.03.22.png" alt="屏幕快照 2017-02-08 23.03.22.png-179.7kB"></p>
<h2 id="本地查看Blog效果"><a href="#本地查看Blog效果" class="headerlink" title="本地查看Blog效果"></a>本地查看Blog效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#生成静态文件</div><div class="line">$ hexo generate</div><div class="line">#启动服务器</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<hr>
<h1 id="部署Blog至Github-Pages"><a href="#部署Blog至Github-Pages" class="headerlink" title="部署Blog至Github Pages"></a>部署Blog至Github Pages</h1><h2 id="注册GitHub账户"><a href="#注册GitHub账户" class="headerlink" title="注册GitHub账户"></a><a href="https://github.com/" target="_blank" rel="external">注册GitHub账户</a></h2><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ul>
<li><p>点击New Repository<br><img src="http://static.zybuluo.com/LeoPoldCrossing/yuxp9w6e6t7zzy8pci09p13l/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2021.58.51.png" alt="屏幕快照 2017-02-08 21.58.51.png-12.7kB"></p>
</li>
<li><p>Create a new repository<br><img src="http://static.zybuluo.com/LeoPoldCrossing/4yn5l9oi90843vutpj3ng88i/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2022.01.23.png" alt="屏幕快照 2017-02-08 22.01.23.png-85.7kB"></p>
</li>
</ul>
<h2 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h2><p>Git本地仓库和远程仓库之间的传输协议主要使用ssh协议，所以我们需要设置ssh </p>
<ul>
<li>Step 1 查看是否存在SSH密钥<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.ssh;ls</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果id_rsa.pub和id_rsa文件存在，则证明ssh存在，直接进行Step 3操作</p>
<ul>
<li><p>Step 2 创建ssh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 将根据提供的Email地址生成一对密钥</div><div class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div><div class="line"># 回车则创建默认的ssh，文件名为id_rsa 和 id_rsa.pub</div><div class="line"></div><div class="line"># 下面的命令可以自定义文件名</div><div class="line">$ cat ~/.ssh/&lt;ssh file name&gt;.pub</div></pre></td></tr></table></figure>
</li>
<li><p>Step 3 添加SSH key 到 Github 账户</p>
<ol>
<li><p>添加公钥到Github<br><img src="http://static.zybuluo.com/LeoPoldCrossing/nw1zvm0lfvlhxfr0b0kcy4q7/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2022.14.09.png" alt="屏幕快照 2017-02-08 22.14.09.png-88.6kB"></p>
</li>
<li><p>左侧工具栏点击SSH and GPG keys<br>title 随意填，Key 将id_rsa.pub中的内容copy的这里</p>
</li>
<li>验证链接<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    $ ssh -T git@github.com</div><div class="line">Hi LeoPoldCrossing! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div><div class="line">    # bingo! SSH配置完成</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>Step 4 绑定Git 和 Github</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;your github username&quot;</div><div class="line">$ git config --global user.email &quot;your github email&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="关联Hexo和GitHub"><a href="#关联Hexo和GitHub" class="headerlink" title="关联Hexo和GitHub"></a>关联Hexo和GitHub</h2><ul>
<li><p>Step 1 Copy仓库地址<br><img src="http://static.zybuluo.com/LeoPoldCrossing/tjkk9gavd3p1ynowzwwzv9bk/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-08%2022.35.10.png" alt="屏幕快照 2017-02-08 22.35.10.png-106.9kB"></p>
</li>
<li><p>Step 2 修改_config.yml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/LeoPoldCrossing/LeoPoldCrossing.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>Step 3 在博客目录下执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">or </div><div class="line">$ hexo g</div><div class="line">------------华丽的分割线---------</div><div class="line">$ hexo deploy</div><div class="line">or </div><div class="line">$ hexo d![blog-main.png-368.1kB][6]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>根据提示输入github账号和密码，然后见证劳动成果的时刻<br><strong>浏览器打开 username.github.io(我的是LeoPoldCrossing.github.io)</strong>，效果图如下：<br><img src="http://static.zybuluo.com/LeoPoldCrossing/t6cpsoeyr86jbc4r4fvmbhpj/blog-main.png" alt="blog-main.png-368.1kB"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：2017年伊始，先给自己定了一个小目标，将Blog迁移到Hexo。本文是我2017年的开始，也是我在Hexo的开端，Mark一下！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
